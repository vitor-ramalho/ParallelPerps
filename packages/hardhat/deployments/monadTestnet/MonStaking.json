{
  "address": "0x3E2C91A726F7360ac7a3eC3de54571Ebc62bbdc8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unstaked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_STAKE_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_STAKE_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractAddressBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getHasMonBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasMonToken",
      "outputs": [
        {
          "internalType": "contract HasMon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakedBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x05125785d62f751fa49dcbf9eb22d9e7e085bbff3a959fbef356a13073500715",
  "receipt": {
    "to": null,
    "from": "0x5E729a4F664abf7045466f12039a513DE9572E17",
    "contractAddress": "0x3E2C91A726F7360ac7a3eC3de54571Ebc62bbdc8",
    "transactionIndex": 8,
    "gasUsed": "1512072",
    "logsBloom": "0x002000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000001000000000000000000100200000000004000020000000000000000000800000000000000000000000000000400400000000000000000000200000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000020000200000000000200000000000002000000000000002000000000000000000000",
    "blockHash": "0x9524fd4e20d339fd62187571055a397f3109d78682e14b44d8b36f4a66ee2e94",
    "transactionHash": "0x05125785d62f751fa49dcbf9eb22d9e7e085bbff3a959fbef356a13073500715",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 5760414,
        "transactionHash": "0x05125785d62f751fa49dcbf9eb22d9e7e085bbff3a959fbef356a13073500715",
        "address": "0x3E2C91A726F7360ac7a3eC3de54571Ebc62bbdc8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e729a4f664abf7045466f12039a513de9572e17"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0x9524fd4e20d339fd62187571055a397f3109d78682e14b44d8b36f4a66ee2e94"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 5760414,
        "transactionHash": "0x05125785d62f751fa49dcbf9eb22d9e7e085bbff3a959fbef356a13073500715",
        "address": "0xE887582468591CB9dE71ab01acA4101C756A6442",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003e2c91a726f7360ac7a3ec3de54571ebc62bbdc8"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x9524fd4e20d339fd62187571055a397f3109d78682e14b44d8b36f4a66ee2e94"
      },
      {
        "transactionIndex": 8,
        "blockNumber": 5760414,
        "transactionHash": "0x05125785d62f751fa49dcbf9eb22d9e7e085bbff3a959fbef356a13073500715",
        "address": "0xE887582468591CB9dE71ab01acA4101C756A6442",
        "topics": [
          "0x1253844b0fff3da7dd2829de816c9b4f94c238cf2bf6eb72c02c7d6f2b53beac",
          "0x0000000000000000000000003e2c91a726f7360ac7a3ec3de54571ebc62bbdc8"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x9524fd4e20d339fd62187571055a397f3109d78682e14b44d8b36f4a66ee2e94"
      }
    ],
    "blockNumber": 5760414,
    "cumulativeGasUsed": "3475037",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "b16643e7df8b48fc292aff9038462ff9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractAddressBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getHasMonBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMonToken\",\"outputs\":[{\"internalType\":\"contract HasMon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakedBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Monad Staking Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"stake()\":{\"notice\":\"Stake MON (native currency)\"},\"unstake(uint256)\":{\"notice\":\"Unstake MON and burn hasMON\"}},\"notice\":\"Users stake MON (native currency) and receive hasMON as a staking derivative\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/MonStaking.sol\":\"MonStaking\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/staking/HasMon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Hashed Monad Token (hasMON)\\n/// @notice A derivative token representing staked MONAD\\ncontract HasMon is ERC20, Ownable {\\n    address public immutable stakingContract;\\n\\n    event StakingContractSet(address indexed stakingContract);\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        address _stakingContract\\n    ) ERC20(name, symbol) Ownable(msg.sender) {\\n        stakingContract = _stakingContract;\\n        emit StakingContractSet(_stakingContract);\\n    }\\n\\n    modifier onlyStakingContract() {\\n        require(msg.sender == stakingContract, \\\"HasMon: caller is not staking contract\\\");\\n        _;\\n    }\\n\\n    function mint(address _to, uint256 _amount) external onlyStakingContract {\\n        require(_to != address(0), \\\"HasMon: mint to the zero address\\\");\\n        _mint(_to, _amount);\\n    }\\n\\n    function burn(address _from, uint256 _amount) external onlyStakingContract {\\n        require(_from != address(0), \\\"HasMon: burn from the zero address\\\");\\n        require(balanceOf(_from) >= _amount, \\\"HasMon: burn amount exceeds balance\\\");\\n        _burn(_from, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9b150b67bdb4791dc490479e492a6318995286df928cf3332da70d30f91ae240\",\"license\":\"MIT\"},\"contracts/staking/MonStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./HasMon.sol\\\";\\n\\n/// @title Monad Staking Contract\\n/// @notice Users stake MON (native currency) and receive hasMON as a staking derivative\\ncontract MonStaking is ReentrancyGuard, Pausable, Ownable {\\n    HasMon public immutable hasMonToken;\\n\\n    mapping(address => uint256) public stakedBalances;\\n    uint256 public totalStaked;\\n\\n    uint256 public constant MIN_STAKE_AMOUNT = 1e15; // 0.001 MON\\n    uint256 public constant MAX_STAKE_AMOUNT = 1000000e18; // 1M MON\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event RewardAdded(uint256 amount);\\n    event EmergencyUnstake(address indexed user, uint256 amount);\\n\\n    constructor() Ownable(msg.sender) {\\n        hasMonToken = new HasMon(\\\"Hashed Monad\\\", \\\"hasMON\\\", address(this));\\n    }\\n\\n    function getHasMonBalance(address _user) public view returns (uint256) {\\n        return hasMonToken.balanceOf(_user);\\n    }\\n\\n    function getContractAddressBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice Stake MON (native currency)\\n    function stake() external payable nonReentrant whenNotPaused {\\n        require(msg.value >= MIN_STAKE_AMOUNT, \\\"Stake amount too low\\\");\\n        require(msg.value <= MAX_STAKE_AMOUNT, \\\"Stake amount too high\\\");\\n        require(totalStaked + msg.value <= MAX_STAKE_AMOUNT, \\\"Total stake limit reached\\\");\\n\\n        hasMonToken.mint(msg.sender, msg.value);\\n        stakedBalances[msg.sender] += msg.value;\\n        totalStaked += msg.value;\\n\\n        emit Staked(msg.sender, msg.value);\\n    }\\n\\n    /// @notice Unstake MON and burn hasMON\\n    function unstake(uint256 _amount) external nonReentrant whenNotPaused {\\n        require(_amount > 0, \\\"Cannot unstake 0\\\");\\n        require(_amount <= stakedBalances[msg.sender], \\\"Insufficient balance\\\");\\n        require(_amount <= address(this).balance, \\\"Insufficient contract balance\\\");\\n\\n        // Update state before external interactions\\n        stakedBalances[msg.sender] -= _amount;\\n        totalStaked -= _amount;\\n\\n        // Burn hasMON tokens before transfer\\n        hasMonToken.burn(msg.sender, _amount);\\n\\n        // Transfer MON back to the user\\n        (bool success, ) = payable(msg.sender).call{ value: _amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit Unstaked(msg.sender, _amount);\\n    }\\n\\n    // @notice Emergency unstake all MON and\\n    // burn hasMON tokens\\n    function emergencyUnstake() external nonReentrant {\\n        uint256 amount = stakedBalances[msg.sender];\\n        require(amount > 0, \\\"No stake to withdraw\\\");\\n\\n        stakedBalances[msg.sender] = 0;\\n        totalStaked -= amount;\\n        hasMonToken.burn(msg.sender, amount);\\n\\n        (bool success, ) = payable(msg.sender).call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n\\n        emit EmergencyUnstake(msg.sender, amount);\\n    }\\n\\n    // @notice Pause the contract\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    // @notice Unpause the contract\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice Allow contract to receive MON\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd6da7659b2641f745b0bebb70029dc085b0a47c66cb5c218050004939c6c3926\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a08060405234610152576000906001825560015490331561013c57506001600160a81b0319811633600881811b610100600160a81b0316929092176001556040519290911c6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08480a3610fed818101906001600160401b038211838310176101285760e0918391610cf8833960608152600c60608201526b12185cda195908135bdb985960a21b608082015260a06020820152600660a0820152653430b9a6a7a760d11b60c082015230604082015203019082f090811561011c5750608052604051610ba0908161015882396080518181816101940152818161020f01528181610399015281816105e1015261080a0152f35b604051903d90823e3d90fd5b634e487b7160e01b84526041600452602484fd5b631e4fbdf760e01b815260048101839052602490fd5b600080fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c9081631460fa87146109c85750806327ed7188146109a65780632e17de781461079c5780632f92f1f2146107775780633a4b66f1146105905780633f4ba83a146105275780635c975abb14610503578063715018a6146104a15780637589cf2f1461034c57806375f2d5c514610331578063817b1cd2146103125780638456cb59146102b85780638da5cb5b1461028b578063af5d4812146101c7578063e0a380b41461017f5763f2fde38b03610011573461017b57602036600319011261017b5780356001600160a01b03818116939092908483036101775761010b610a00565b841561016157505060018054610100600160a81b03198116600893841b610100600160a81b031617909155901c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101859052602490fd5b8580fd5b8280fd5b5050346101c357816003193601126101c357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b509190346101c3576020928360031936011261017b576001600160a01b039080358281169190829003610287579060248692855194859384926370a0823160e01b84528301527f0000000000000000000000000000000000000000000000000000000000000000165afa92831561027c578093610247575b505051908152f35b909192508382813d8311610275575b6102608183610a59565b8101031261027257505190388061023f565b80fd5b503d610256565b8251903d90823e3d90fd5b8480fd5b5050346101c357816003193601126101c357600154905160089190911c6001600160a01b03168152602090f35b5050346101c357816003193601126101c35760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916102f6610a00565b6102fe610a9e565b600160ff198154161760015551338152a180f35b5050346101c357816003193601126101c3576020906003549051908152f35b5050346101c357816003193601126101c35751478152602090f35b50903461017b578260031936011261017b57610366610abc565b3383526002602052808320549182156104685783903382526002602052818381205561039484600354610adf565b6003557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561017b578351632770a7eb60e21b81523392810192835260208301869052918391839182908490829060400103925af1801561045e5761044a575b508080806104199386335af1610413610aec565b50610b2c565b519081527f571394674ec9d9e81517060110f8f894ce912af2b2febc091bee0cdea68adf0060203392a26001815580f35b61045390610a2f565b61017b5782386103ff565b83513d84823e3d90fd5b6020606492519162461bcd60e51b835282015260146024820152734e6f207374616b6520746f20776974686472617760601b6044820152fd5b83346102725780600319360112610272576104ba610a00565b60018054610100600160a81b0319811690915560009060081c6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101c357816003193601126101c35760209060ff6001541690519015158152f35b503461017b578260031936011261017b57610540610a00565b6001549060ff821615610582575060ff1916600155513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b8251638dfc202b60e01b8152fd5b508260031936011261017b576105a4610abc565b6105ac610a9e565b66038d7ea4c68000341061073e5769d3c21bcecceda1000000803411610703576105d834600354610a7b565b116106c15782907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561017b5783516340c10f1960e01b815233928101928352346020840152918391839182908490829060400103925af180156106b4576106a0575b5050338252600260205280822061065e348254610a7b565b905561066c34600354610a7b565b600355513481527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a26001815580f35b6106a990610a2f565b6101c3578138610646565b50505051903d90823e3d90fd5b6020606492519162461bcd60e51b8352820152601960248201527f546f74616c207374616b65206c696d69742072656163686564000000000000006044820152fd5b506020606492519162461bcd60e51b835282015260156024820152740a6e8c2d6ca40c2dadeeadce840e8dede40d0d2ced605b1b6044820152fd5b6020606492519162461bcd60e51b835282015260146024820152735374616b6520616d6f756e7420746f6f206c6f7760601b6044820152fd5b5050346101c357816003193601126101c3576020905169d3c21bcecceda10000008152f35b50903461017b57602090816003193601126109a2578235926107bc610abc565b6107c4610a9e565b831561096e5733855260028352818520548411610936574784116108f557338552600283528185206107f7858254610adf565b905561080584600354610adf565b6003557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908590823b156101c3578351632770a7eb60e21b8152339181019182526020820187905292839182908490829060400103925af180156108eb576108b6575b50907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75916108a88580808088335af1610413610aec565b519283523392a26001815580f35b936108e37f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75939295610a2f565b939091610871565b82513d87823e3d90fd5b82606492519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b82606492519162461bcd60e51b83528201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152fd5b82606492519162461bcd60e51b8352820152601060248201526f043616e6e6f7420756e7374616b6520360841b6044820152fd5b8380fd5b5050346101c357816003193601126101c3576020905166038d7ea4c680008152f35b92919050346109a25760203660031901126109a257356001600160a01b038116908190036109a2579260209381526002845220548152f35b60015460081c6001600160a01b03163303610a1757565b60405163118cdaa760e01b8152336004820152602490fd5b67ffffffffffffffff8111610a4357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610a4357604052565b91908201809211610a8857565b634e487b7160e01b600052601160045260246000fd5b60ff60015416610aaa57565b60405163d93c066560e01b8152600490fd5b600260005414610acd576002600055565b604051633ee5aeb560e01b8152600490fd5b91908203918211610a8857565b3d15610b27573d9067ffffffffffffffff8211610a435760405191610b1b601f8201601f191660200184610a59565b82523d6000602084013e565b606090565b15610b3357565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fdfea2646970667358221220361a21ded1c00e77a6d90aff5190d4b9a72bfe59f19c020aa49977386898e4e264736f6c6343000814003360a060405234620003d85762000fed803803806200001d81620003dd565b928339810190606081830312620003d85780516001600160401b039290838111620003d857816200005091840162000403565b9060209081840151858111620003d8576040916200007091860162000403565b9301516001600160a01b039485821694919391858503620003d8578251828111620002d8576003918254916001958684811c94168015620003cd575b88851014620003b7578190601f9485811162000361575b508890858311600114620002fa57600092620002ee575b505060001982861b1c191690861b1783555b8051938411620002d85760049586548681811c91168015620002cd575b82821014620002b8578381116200026d575b5080928511600114620001ff5750938394918492600095620001f3575b50501b92600019911b1c19161781555b3315620001db575060058054336001600160a01b03198216811790925560405194167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36080527f1253844b0fff3da7dd2829de816c9b4f94c238cf2bf6eb72c02c7d6f2b53beac600080a2610b77908162000476823960805181818161016f0152818161024a01526105c20152f35b602490600060405191631e4fbdf760e01b8352820152fd5b01519350388062000138565b92919084601f1981168860005285600020956000905b8983831062000252575050501062000237575b50505050811b01815562000148565b01519060f884600019921b161c191690553880808062000228565b85870151895590970196948501948893509081019062000215565b87600052816000208480880160051c820192848910620002ae575b0160051c019087905b828110620002a15750506200011b565b6000815501879062000291565b9250819262000288565b602288634e487b7160e01b6000525260246000fd5b90607f169062000109565b634e487b7160e01b600052604160045260246000fd5b015190503880620000da565b90889350601f19831691876000528a6000209260005b8c8282106200034a575050841162000331575b505050811b018355620000ec565b015160001983881b60f8161c1916905538808062000323565b8385015186558c9790950194938401930162000310565b90915085600052886000208580850160051c8201928b8610620003ad575b918a91869594930160051c01915b8281106200039d575050620000c3565b600081558594508a91016200038d565b925081926200037f565b634e487b7160e01b600052602260045260246000fd5b93607f1693620000ac565b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620002d857604052565b919080601f84011215620003d85782516001600160401b038111620002d85760209062000439601f8201601f19168301620003dd565b92818452828287010111620003d85760005b8181106200046157508260009394955001015290565b85810183015184820184015282016200044b56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816306fdde031461086d57508063095ea7b3146107c457806318160ddd146107a557806323b872dd146106b2578063313ce5671461069657806340c10f191461059457806370a082311461055d578063715018a6146104fd5780638da5cb5b146104d457806395d89b41146103b45780639dc29fac1461021c578063a9059cbb146101eb578063dd62ed3e146101a2578063ee99205c1461015a5763f2fde38b146100c857600080fd5b34610156576020366003190112610156576100e16109ab565b906100ea6109dc565b6001600160a01b03918216928315610140575050600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b50503461019e578160031936011261019e57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b50503461019e578060031936011261019e57806020926101c06109ab565b6101c86109c6565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b50503461019e578060031936011261019e5760209061021561020b6109ab565b6024359033610a08565b5160018152f35b5082903461019e578260031936011261019e576102376109ab565b90602435906001600160a01b03610271337f0000000000000000000000000000000000000000000000000000000000000000831614610ae6565b83169283156103665783855284602052828686205410610317578385528460205285852054918383106102e35750508184957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936020938688528785520381872055816002540360025551908152a380f35b865163391434e360e21b81526001600160a01b03909216908201908152602081018390526040810184905281906060010390fd5b855162461bcd60e51b8152602081840152602360248201527f4861734d6f6e3a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b6064820152608490fd5b855162461bcd60e51b8152602081840152602260248201527f4861734d6f6e3a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b5091903461019e578160031936011261019e57805190828454600181811c908083169283156104ca575b60209384841081146104b75783885290811561049b5750600114610446575b505050829003601f01601f191682019267ffffffffffffffff841183851017610433575082918261042f925282610962565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b83851061048757505050508301013880806103fd565b805488860183015293019284908201610471565b60ff1916878501525050151560051b84010190503880806103fd565b634e487b7160e01b895260228a52602489fd5b91607f16916103de565b50503461019e578160031936011261019e5760055490516001600160a01b039091168152602090f35b833461055a578060031936011261055a576105166109dc565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b50503461019e57602036600319011261019e5760209181906001600160a01b036105856109ab565b16815280845220549051908152f35b5090346101565780600319360112610156576105ae6109ab565b60243591906001600160a01b03906105e9337f0000000000000000000000000000000000000000000000000000000000000000841614610ae6565b169283156106545760025490838201809211610641575084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a380f35b634e487b7160e01b865260119052602485fd5b6020606492519162461bcd60e51b8352820152602060248201527f4861734d6f6e3a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b50503461019e578160031936011261019e576020905160128152f35b50823461055a57606036600319011261055a576106cd6109ab565b6106d56109c6565b916044359360018060a01b038316808352600160205286832033845260205286832054916000198303610711575b602088610215898989610a08565b86831061077957811561076257331561074b5750825260016020908152868320338452815291869020908590039055829061021587610703565b8751634a1406b160e11b8152908101849052602490fd5b875163e602df0560e01b8152908101849052602490fd5b8751637dc7a0d960e11b8152339181019182526020820193909352604081018790528291506060010390fd5b50503461019e578160031936011261019e576020906002549051908152f35b50346101565781600319360112610156576107dd6109ab565b602435903315610856576001600160a01b031691821561083f57508083602095338152600187528181208582528752205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b8351634a1406b160e11b8152908101859052602490fd5b835163e602df0560e01b8152808401869052602490fd5b849150833461015657826003193601126101565782600354600181811c90808316928315610958575b60209384841081146104b75783885290811561093c57506001146108e657505050829003601f01601f191682019267ffffffffffffffff841183851017610433575082918261042f925282610962565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b83851061092857505050508301018580806103fd565b805488860183015293019284908201610912565b60ff1916878501525050151560051b84010190508580806103fd565b91607f1691610896565b6020808252825181830181905290939260005b82811061099757505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610975565b600435906001600160a01b03821682036109c157565b600080fd5b602435906001600160a01b03821682036109c157565b6005546001600160a01b031633036109f057565b60405163118cdaa760e01b8152336004820152602490fd5b916001600160a01b03808416928315610acd5716928315610ab45760009083825281602052604082205490838210610a82575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051634b637e8f60e11b815260006004820152602490fd5b15610aed57565b60405162461bcd60e51b815260206004820152602660248201527f4861734d6f6e3a2063616c6c6572206973206e6f74207374616b696e6720636f6044820152651b9d1c9858dd60d21b6064820152608490fdfea2646970667358221220a12ecb0a2bd88461dcc98cf08adc81f894f42b745917de06da4a0780eac9df4764736f6c63430008140033",
  "deployedBytecode": "0x60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c9081631460fa87146109c85750806327ed7188146109a65780632e17de781461079c5780632f92f1f2146107775780633a4b66f1146105905780633f4ba83a146105275780635c975abb14610503578063715018a6146104a15780637589cf2f1461034c57806375f2d5c514610331578063817b1cd2146103125780638456cb59146102b85780638da5cb5b1461028b578063af5d4812146101c7578063e0a380b41461017f5763f2fde38b03610011573461017b57602036600319011261017b5780356001600160a01b03818116939092908483036101775761010b610a00565b841561016157505060018054610100600160a81b03198116600893841b610100600160a81b031617909155901c167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b51631e4fbdf760e01b8152908101859052602490fd5b8580fd5b8280fd5b5050346101c357816003193601126101c357517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5080fd5b509190346101c3576020928360031936011261017b576001600160a01b039080358281169190829003610287579060248692855194859384926370a0823160e01b84528301527f0000000000000000000000000000000000000000000000000000000000000000165afa92831561027c578093610247575b505051908152f35b909192508382813d8311610275575b6102608183610a59565b8101031261027257505190388061023f565b80fd5b503d610256565b8251903d90823e3d90fd5b8480fd5b5050346101c357816003193601126101c357600154905160089190911c6001600160a01b03168152602090f35b5050346101c357816003193601126101c35760207f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258916102f6610a00565b6102fe610a9e565b600160ff198154161760015551338152a180f35b5050346101c357816003193601126101c3576020906003549051908152f35b5050346101c357816003193601126101c35751478152602090f35b50903461017b578260031936011261017b57610366610abc565b3383526002602052808320549182156104685783903382526002602052818381205561039484600354610adf565b6003557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561017b578351632770a7eb60e21b81523392810192835260208301869052918391839182908490829060400103925af1801561045e5761044a575b508080806104199386335af1610413610aec565b50610b2c565b519081527f571394674ec9d9e81517060110f8f894ce912af2b2febc091bee0cdea68adf0060203392a26001815580f35b61045390610a2f565b61017b5782386103ff565b83513d84823e3d90fd5b6020606492519162461bcd60e51b835282015260146024820152734e6f207374616b6520746f20776974686472617760601b6044820152fd5b83346102725780600319360112610272576104ba610a00565b60018054610100600160a81b0319811690915560009060081c6001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101c357816003193601126101c35760209060ff6001541690519015158152f35b503461017b578260031936011261017b57610540610a00565b6001549060ff821615610582575060ff1916600155513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b8251638dfc202b60e01b8152fd5b508260031936011261017b576105a4610abc565b6105ac610a9e565b66038d7ea4c68000341061073e5769d3c21bcecceda1000000803411610703576105d834600354610a7b565b116106c15782907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316803b1561017b5783516340c10f1960e01b815233928101928352346020840152918391839182908490829060400103925af180156106b4576106a0575b5050338252600260205280822061065e348254610a7b565b905561066c34600354610a7b565b600355513481527f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d60203392a26001815580f35b6106a990610a2f565b6101c3578138610646565b50505051903d90823e3d90fd5b6020606492519162461bcd60e51b8352820152601960248201527f546f74616c207374616b65206c696d69742072656163686564000000000000006044820152fd5b506020606492519162461bcd60e51b835282015260156024820152740a6e8c2d6ca40c2dadeeadce840e8dede40d0d2ced605b1b6044820152fd5b6020606492519162461bcd60e51b835282015260146024820152735374616b6520616d6f756e7420746f6f206c6f7760601b6044820152fd5b5050346101c357816003193601126101c3576020905169d3c21bcecceda10000008152f35b50903461017b57602090816003193601126109a2578235926107bc610abc565b6107c4610a9e565b831561096e5733855260028352818520548411610936574784116108f557338552600283528185206107f7858254610adf565b905561080584600354610adf565b6003557f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908590823b156101c3578351632770a7eb60e21b8152339181019182526020820187905292839182908490829060400103925af180156108eb576108b6575b50907f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75916108a88580808088335af1610413610aec565b519283523392a26001815580f35b936108e37f0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75939295610a2f565b939091610871565b82513d87823e3d90fd5b82606492519162461bcd60e51b8352820152601d60248201527f496e73756666696369656e7420636f6e74726163742062616c616e63650000006044820152fd5b82606492519162461bcd60e51b83528201526014602482015273496e73756666696369656e742062616c616e636560601b6044820152fd5b82606492519162461bcd60e51b8352820152601060248201526f043616e6e6f7420756e7374616b6520360841b6044820152fd5b8380fd5b5050346101c357816003193601126101c3576020905166038d7ea4c680008152f35b92919050346109a25760203660031901126109a257356001600160a01b038116908190036109a2579260209381526002845220548152f35b60015460081c6001600160a01b03163303610a1757565b60405163118cdaa760e01b8152336004820152602490fd5b67ffffffffffffffff8111610a4357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610a4357604052565b91908201809211610a8857565b634e487b7160e01b600052601160045260246000fd5b60ff60015416610aaa57565b60405163d93c066560e01b8152600490fd5b600260005414610acd576002600055565b604051633ee5aeb560e01b8152600490fd5b91908203918211610a8857565b3d15610b27573d9067ffffffffffffffff8211610a435760405191610b1b601f8201601f191660200184610a59565b82523d6000602084013e565b606090565b15610b3357565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fdfea2646970667358221220361a21ded1c00e77a6d90aff5190d4b9a72bfe59f19c020aa49977386898e4e264736f6c63430008140033",
  "devdoc": {
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Monad Staking Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "stake()": {
        "notice": "Stake MON (native currency)"
      },
      "unstake(uint256)": {
        "notice": "Unstake MON and burn hasMON"
      }
    },
    "notice": "Users stake MON (native currency) and receive hasMON as a staking derivative",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1686,
        "contract": "contracts/staking/MonStaking.sol:MonStaking",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1567,
        "contract": "contracts/staking/MonStaking.sol:MonStaking",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 54,
        "contract": "contracts/staking/MonStaking.sol:MonStaking",
        "label": "_owner",
        "offset": 1,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4881,
        "contract": "contracts/staking/MonStaking.sol:MonStaking",
        "label": "stakedBalances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4883,
        "contract": "contracts/staking/MonStaking.sol:MonStaking",
        "label": "totalStaked",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}