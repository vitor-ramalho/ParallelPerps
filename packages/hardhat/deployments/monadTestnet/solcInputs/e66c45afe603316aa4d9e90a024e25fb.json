{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/Structs.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\ncontract Structs {\n    /**\n     * An update to a feed\n     * @param oracleId The publisher of the update\n     * @param result The result of the update\n     * @param timestamp The timestamp of the update\n     */\n    struct Update {\n        bytes32 oracleId;\n        int128 result;\n        uint256 timestamp;\n    }\n\n    /**\n     * The current result for a feed\n     * @param result The result of the feed\n     * @param minTimestamp The minimum timestamp of the feed\n     * @param maxTimestamp The maximum timestamp of the feed\n     * @param minResult The minimum result of the feed\n     * @param maxResult The maximum result of the feed\n     * @param stdev The standard deviation of the feed\n     * @param range The range of the feed\n     * @param mean The mean of the feed\n     */\n    struct CurrentResult {\n        int128 result;\n        uint256 minTimestamp;\n        uint256 maxTimestamp;\n        int128 minResult;\n        int128 maxResult;\n        int128 stdev;\n        int128 range;\n        int128 mean;\n    }\n\n    /**\n     * Results for a feed\n     * @param idx The index of the feed\n     * @param updates The updates for the feed\n     */\n    struct Results {\n        uint256 idx;\n        Update[] updates;\n    }\n\n    /**\n     * An abstraction over feed allowing for UI to display the feed in a more human readable way and reconfiguration of sources.\n     * Reading from this struct should be atomic (same tx as the write).\n     * @param aggregatorId The aggregator id\n     * @param authority The authority of the feed\n     * @param name The name of the feed\n     * @param queueId The queue id associated with the feed\n     * @param toleratedDelta The maximum blocks staleness\n     * @param cid The content id (IPFS cid for example) for the feed\n     * @param feedHash The feed associated with the aggregator\n     * @param createdAt The time the feed was created\n     * @param maxVariance The maximum variance allowed for a feed result\n     * @param minResponses The minimum number of responses required for a valid feed result\n     * @param minSamples The minimum number of samples to take for a feed result\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\n     */\n    struct Aggregator {\n        bytes32 aggregatorId;\n        address authority;\n        string name;\n        bytes32 queueId;\n        uint256 toleratedDelta;\n        bytes32 cid;\n        bytes32 feedHash;\n        uint256 createdAt;\n        uint64 maxVariance;\n        uint32 minResponses;\n        uint8 minSamples;\n        uint256 maxStaleness;\n    }\n\n    /**\n     * Queue / Switchboard Subnet\n     * @param queueId The queue id\n     * @param authority The authority of the queue\n     * @param name The name of the queue\n     * @param fee The fee required to submit an update to the queue\n     * @param feeRecipient The recipient of the fee (OPTIONAL - if unset the oracle is the recipient)\n     * @param minAttestations size * (1 / minAttestations) + 1 is the minimum number of oracles required to attest to a registration\n     * @param toleratedTimestampDelta The default maximum staleness for a valid feed result\n     * @param resultsMaxSize The maximum size of the results array\n     * @param oracleValidityLength The length of time an oracle is valid for\n     * @param mrEnclaves The enclave measurements allowed by the queue\n     * @param oracles The oracles associated with the queue\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\n     * @param lastQueueOverride The last time the queue was overridden\n     * @param guardianQueueId The guardian queue id\n     */\n    struct Queue {\n        bytes32 queueId;\n        address authority;\n        string name;\n        uint256 fee;\n        address feeRecipient;\n        uint64 minAttestations;\n        uint256 toleratedTimestampDelta;\n        uint8 resultsMaxSize;\n        uint256 oracleValidityLength;\n        bytes32[] mrEnclaves;\n        bytes32[] oracles;\n        uint256 toleratedBlocksStaleness;\n        uint256 lastQueueOverride;\n        bytes32 guardianQueueId;\n    }\n\n    /**\n     * Oracle - A more dense version of the oracle\n     * @param authority the oracle's enclave secp key\n     * @param owner the owner of the oracle\n     * @param oracleId the oracle's id (hexified pubkey from solana)\n     * @param queueId the queue that the oracle belongs to\n     * @param mrEnclave the oracle's enclave measurement\n     * @param expirationTime the time the oracle expires\n     * @param feesOwed the fees owed to the oracle\n     */\n    struct Oracle {\n        address authority;\n        address owner;\n        bytes32 oracleId;\n        bytes32 queueId;\n        bytes32 mrEnclave;\n        uint256 expirationTime;\n        uint256 feesOwed;\n    }\n\n    /**\n     * Pending Oracle Registration\n     * @param oracle The oracle to be registered\n     * @param attestingOracle The oracle attesting to the registration\n     */\n    struct OracleAttestation {\n        address oracleAuthority;\n        bytes32 oracleId;\n        bytes32 attestingOracle;\n        uint256 timestamp;\n        bytes32 mrEnclave;\n    }\n\n    /**\n     * Randomness - a message resolving randomness\n     * @param randId The randomness id\n     * @param queueId The queue id\n     * @param createdAt The time the randomness was created\n     * @param authority The authority of the randomness\n     * @param rollTimestamp The timestamp of the latest roll\n     * @param minSettlementDelay The minimum settlement delay seconds\n     * @param result The value of the randomness (uint256)\n     */\n    struct Randomness {\n        bytes32 randId;\n        bytes32 queueId;\n        uint256 createdAt;\n        address authority;\n        uint256 rollTimestamp;\n        uint64 minSettlementDelay;\n        RandomnessResult result;\n    }\n\n    /**\n     * Randomness Result\n     * @param oracleId The oracle id\n     * @param oracleAuthority The authority of the oracle that provided the randomness\n     * @param value The value of the randomness\n     * @param settledAt The time the randomness was settled\n     */\n    struct RandomnessResult {\n        bytes32 oracleId;\n        address oracleAuthority;\n        uint256 value;\n        uint256 settledAt;\n    }\n\n    /**\n     * Attestations\n     * @param list The list of pending attestations\n     */\n    struct Attestations {\n        OracleAttestation[] list;\n    }\n}\n"
    },
    "contracts/perps/interfaces/IPerpEngine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./IPerpMarket.sol\";\nimport \"../libs/PerpStructs.sol\";\n\n/**\n * @title IPerpEngine\n * @dev Main interface for perpetual futures trading engine\n */\ninterface IPerpEngine {\n    /**\n     * @dev Opens a new position\n     */\n    function openPosition(\n        address token,\n        address trader,\n        uint32 marketIndex,\n        uint256 margin,\n        uint32 leverage,\n        bool isLong,\n        uint256 price,\n        uint256 maxSlippage,\n        bytes[] calldata priceUpdateData\n    ) external payable returns (PerpStructs.Position memory);\n\n    /**\n     * @dev Closes an existing position\n     */\n    function closePosition(\n        address trader,\n        uint32 marketIndex,\n        uint256 price,\n        uint256 maxSlippage,\n        bytes[] calldata priceUpdateData\n    ) external payable returns (int256);\n\n    /**\n     * @dev Liquidates a position\n     */\n    function liquidatePosition(\n        address trader,\n        uint32 marketIndex,\n        bytes[] calldata priceUpdateData\n    ) external returns (uint256);\n\n    /**\n     * @dev Gets position information\n     */\n    function getPosition(address trader, uint32 marketIndex) external view returns (PerpStructs.Position memory);\n\n    /**\n     * @dev Gets position value\n     */\n    function getPositionValue(\n        address trader,\n        uint32 marketIndex\n    ) external view returns (uint256 value, bool hasProfit, int256 fundingFee);\n\n    /**\n     * @dev Gets position risk metrics\n     */\n    function getPositionRisk(\n        address trader,\n        uint32 marketIndex\n    )\n        external\n        view\n        returns (\n            uint256 marginRatio,\n            uint256 liquidationPrice,\n            bool isLiquidatable,\n            int256 unrealizedPnl,\n            int256 fundingPayment\n        );\n\n    /**\n     * @dev Manages collateral\n     */\n    function depositCollateral(address token, uint256 amount) external;\n\n    function withdrawCollateral(address token, uint256 amount) external;\n\n    function addCollateralToken(address token, uint256 decimals, uint256 collateralRatio) external;\n\n    function getCollateralValue(address user, address token) external view returns (uint256 nominal, uint256 effective);\n\n    /**\n     * @dev System control functions\n     */\n    function enableEmergencyMode() external;\n\n    function emergencyWithdraw(address token) external;\n\n    function setOrderBook(address _orderBook) external;\n\n    /**\n     * @dev Insurance fund management\n     */\n    function addToInsuranceFund() external payable;\n\n    function withdrawFromInsuranceFund(uint256 amount) external;\n\n    /**\n     * @dev System state queries\n     */\n    function isEmergencyMode() external view returns (bool);\n\n    function getHealthFactor(address trader, uint32 marketIndex) external view returns (uint256);\n\n    function getInsuranceFundBalance() external view returns (uint256);\n}\n"
    },
    "contracts/perps/interfaces/IPerpMarket.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"../libs/PerpStructs.sol\";\n\n/**\n * @title IPerpMarket\n * @dev Interface for market-specific operations\n */\ninterface IPerpMarket {\n    /**\n     * @dev Adds a new market\n     */\n    function addMarket(\n        string calldata symbol,\n        bytes32 pythId,\n        uint256 maxLeverage,\n        uint256 liquidationThreshold,\n        uint256 fee,\n        uint256 fundingInterval,\n        int256 maxFundingRate,\n        uint256 maxPositionSize,\n        uint256 maxOpenInterest,\n        uint256 minInitialMargin\n    ) external returns (uint32 marketIndex);\n\n    /**\n     * @dev Gets market information\n     */\n    function getMarket(uint32 marketIndex) external view returns (PerpStructs.Market memory);\n\n    /**\n     * @dev Gets market statistics\n     */\n    function getMarketStats(\n        uint32 marketIndex\n    )\n        external\n        view\n        returns (\n            uint256 longOpenInterest,\n            uint256 shortOpenInterest,\n            uint256 utilizationRate,\n            int256 skewness,\n            uint256 lastFundingTime,\n            int256 currentFundingRate\n        );\n\n    /**\n     * @dev Gets market utilization\n     */\n    function getMarketUtilization(uint32 marketIndex) external view returns (uint256 longUtil, uint256 shortUtil);\n\n    /**\n     * @dev Pauses a market\n     */\n    function pauseMarket(uint32 marketIndex) external;\n\n    /**\n     * @dev Unpauses a market\n     */\n    function unpauseMarket(uint32 marketIndex) external;\n\n    /**\n     * @dev Updates market funding rate\n     */\n    function updateFunding(uint32 marketIndex) external;\n\n    /**\n     * @dev Checks if market exists and is active\n     */\n    function isMarketActive(uint32 marketIndex) external view returns (bool);\n}\n"
    },
    "contracts/perps/interfaces/IPerpOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title IPerpOracle\n * @dev Interface for price oracle implementations\n */\ninterface IPerpOracle {\n    /**\n     * @dev Gets the latest price for a given market\n     * @param marketId Identifier for the market\n     * @return price Latest price with 18 decimals precision\n     * @return timestamp Time when the price was updated\n     * @return valid Whether the price is valid\n     */\n    function getPrice(bytes32 marketId) external view returns (uint256 price, uint256 timestamp, bool valid);\n\n    /**\n     * @dev Updates price feeds with latest data\n     * @param priceUpdateData Encoded price update data from oracle\n     */\n    function updatePriceFeeds(bytes[] calldata priceUpdateData) external payable;\n\n    /**\n     * @dev Gets the fee required to update prices\n     * @param priceUpdateData Encoded price update data\n     * @return fee Amount required to pay for the update\n     */\n    function getUpdateFee(bytes[] calldata priceUpdateData) external view returns (uint256 fee);\n\n    /**\n     * @dev Checks if a price is not older than specified time\n     * @param marketId Identifier for the market\n     * @param maxAge Maximum acceptable age of the price in seconds\n     * @return price Price data if within acceptable age\n     */\n    function getPriceNoOlderThan(bytes32 marketId, uint256 maxAge) external view returns (uint256 price);\n}"
    },
    "contracts/perps/libs/PerpEvents.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\n/**\n * @title PerpEvents\n * @dev Library containing all events used in the PerpEngine system\n */\nlibrary PerpEvents {\n    /**\n     * @dev Emitted when a new position is opened\n     */\n    event PositionOpened(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        uint256 margin,\n        bool isLong,\n        uint32 leverage,\n        uint256 entryPrice,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a position is closed\n     */\n    event PositionClosed(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        int256 pnl,\n        uint256 exitPrice,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev Emitted when a position is liquidated\n     */\n    event PositionLiquidated(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        address liquidator,\n        int256 pnl,\n        uint256 liquidationPrice\n    );\n\n    /**\n     * @dev Emitted when a new market is added\n     */\n    event MarketAdded(\n        uint32 indexed marketIndex,\n        string symbol,\n        address oracle,\n        uint256 maxLeverage,\n        uint256 maxPositionSize\n    );\n\n    /**\n     * @dev Emitted when funding is updated for a market\n     */\n    event FundingUpdated(\n        uint32 indexed marketIndex,\n        int256 fundingRate,\n        uint256 openInterestLong,\n        uint256 openInterestShort\n    );\n\n    /**\n     * @dev Emitted when emergency mode is enabled\n     */\n    event EmergencyModeEnabled(address indexed triggeredBy, uint256 timestamp);\n\n    /**\n     * @dev Emitted when a market's pause state changes\n     */\n    event MarketPaused(uint32 indexed marketIndex, bool isPaused);\n\n    /**\n     * @dev Emitted when insurance fund balance changes\n     */\n    event InsuranceFundUpdated(uint256 oldBalance, uint256 newBalance);\n\n    /**\n     * @dev Emitted when orderbook address is updated\n     */\n    event OrderBookUpdated(address indexed newOrderBook);\n\n    /**\n     * @dev Emitted when collateral is deposited\n     */\n    event CollateralDeposited(address indexed user, address indexed token, uint256 amount);\n\n    /**\n     * @dev Emitted when collateral is withdrawn\n     */\n    event CollateralWithdrawn(address indexed user, address indexed token, uint256 amount);\n\n    /**\n     * @dev Emitted when a new collateral token is added\n     */\n    event CollateralTokenAdded(address indexed token, uint256 decimals, uint256 collateralRatio);\n\n    /**\n     * @dev Emitted when oracle is added to a market\n     */\n    event OracleAdded(uint32 indexed marketIndex, address oracle, uint256 weight);\n}\n"
    },
    "contracts/perps/libs/PerpMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"./PerpStructs.sol\";\n\n/**\n * @title PerpMath\n * @dev Library containing all mathematical calculations for the PerpEngine system\n */\nlibrary PerpMath {\n    // Constants\n    uint256 private constant PRECISION = 1e18;\n    uint256 private constant BASIS_POINTS = 10000;\n    uint256 private constant PRICE_PRECISION = 1e10;\n\n    /**\n     * @dev Validates if a price is within acceptable slippage range\n     */\n    function isValidPrice(uint256 price, uint256 currentPrice, uint256 maxSlippage) internal pure returns (bool) {\n        if (price == 0 || currentPrice == 0) return false;\n\n        uint256 priceDiff = price > currentPrice ? price - currentPrice : currentPrice - price;\n\n        uint256 slippage = (priceDiff * BASIS_POINTS) / currentPrice;\n        return slippage <= maxSlippage;\n    }\n\n    /**\n     * @dev Calculates the funding rate based on market imbalance\n     */\n    function calculateFundingRate(\n        uint256 openInterestLong,\n        uint256 openInterestShort,\n        int256 maxFundingRate\n    ) internal pure returns (int256) {\n        if (openInterestShort == 0) return 0;\n\n        // Calculate skew ratio between longs and shorts\n        uint256 ratio = (openInterestLong * PRECISION) / openInterestShort;\n        int256 skew = int256(ratio) - int256(PRECISION);\n\n        // Calculate and cap funding rate\n        int256 fundingRate = (skew * maxFundingRate) / int256(BASIS_POINTS);\n\n        return\n            fundingRate > maxFundingRate\n                ? maxFundingRate\n                : (fundingRate < -maxFundingRate ? -maxFundingRate : fundingRate);\n    }\n\n    /**\n     * @dev Calculates PnL for a position\n     */\n    function calculatePnL(PerpStructs.Position memory position, uint256 currentPrice) internal pure returns (int256) {\n        uint256 priceDelta;\n        if (position.isLong) {\n            if (currentPrice > position.entryPrice) {\n                priceDelta = currentPrice - position.entryPrice;\n                return int256((priceDelta * position.size) / position.entryPrice);\n            } else {\n                priceDelta = position.entryPrice - currentPrice;\n                return -int256((priceDelta * position.size) / position.entryPrice);\n            }\n        } else {\n            if (currentPrice > position.entryPrice) {\n                priceDelta = currentPrice - position.entryPrice;\n                return -int256((priceDelta * position.size) / position.entryPrice);\n            } else {\n                priceDelta = position.entryPrice - currentPrice;\n                return int256((priceDelta * position.size) / position.entryPrice);\n            }\n        }\n    }\n\n    /**\n     * @dev Calculates funding payment for a position\n     */\n    function calculateFundingPayment(\n        PerpStructs.Position memory position,\n        int256 marketCumulativeFunding\n    ) internal pure returns (int256) {\n        int256 fundingDelta = marketCumulativeFunding - position.lastCumulativeFunding;\n\n        return\n            position.isLong\n                ? (-int256(position.size) * fundingDelta) / int256(PRECISION)\n                : (int256(position.size) * fundingDelta) / int256(PRECISION);\n    }\n\n    /**\n     * @dev Calculates liquidation price for a position\n     */\n    function calculateLiquidationPrice(\n        PerpStructs.Position memory position,\n        uint256 liquidationThreshold\n    ) internal pure returns (uint256) {\n        uint256 threshold = (position.margin * liquidationThreshold) / BASIS_POINTS;\n\n        if (position.isLong) {\n            return position.entryPrice - ((position.entryPrice * (position.margin - threshold)) / position.margin);\n        } else {\n            return position.entryPrice + ((position.entryPrice * (position.margin - threshold)) / position.margin);\n        }\n    }\n\n    /**\n     * @dev Calculates total value of a position including PnL and funding\n     */\n    function calculateTotalValue(\n        uint256 margin,\n        int256 unrealizedPnl,\n        int256 fundingPayment\n    ) internal pure returns (uint256) {\n        int256 totalValue = int256(margin) + unrealizedPnl + fundingPayment;\n        return totalValue <= 0 ? 0 : uint256(totalValue);\n    }\n\n    /**\n     * @dev Calculates effective collateral value\n     */\n    function calculateEffectiveCollateral(uint256 nominal, uint256 collateralRatio) internal pure returns (uint256) {\n        return (nominal * collateralRatio) / BASIS_POINTS;\n    }\n\n    /**\n     * @dev Calculates fees for a position\n     */\n    function calculateFees(\n        uint256 size,\n        uint256 feeRate,\n        uint256 protocolShare\n    ) internal pure returns (uint256 tradingFee, uint256 protocolFee) {\n        tradingFee = (size * feeRate) / BASIS_POINTS;\n        protocolFee = (tradingFee * protocolShare) / BASIS_POINTS;\n        return (tradingFee, protocolFee);\n    }\n\n    /**\n     * @dev Calculates market utilization\n     */\n    function calculateUtilization(uint256 openInterest, uint256 maxOpenInterest) internal pure returns (uint256) {\n        return maxOpenInterest == 0 ? 0 : (openInterest * PRECISION) / maxOpenInterest;\n    }\n}\n"
    },
    "contracts/perps/libs/PerpStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title PerpStructs\n * @dev Library containing all structs used in the PerpEngine system\n */\nlibrary PerpStructs {\n    struct Position {\n        bool isOpen;\n        uint256 size; // Position size in USD (x10^18)\n        uint256 margin; // Initial margin\n        uint256 entryPrice; // Entry price in USD (x10^18)\n        int256 lastCumulativeFunding; // Funding state at entry\n        bool isLong; // Long or short position\n        uint32 leverage; // Leverage as an integer\n        uint32 marketIndex; // Index of the market\n        uint256 lastUpdateTime; // Last time position was updated\n        address collateralToken; // Collateral token address\n    }\n\n    struct OracleSource {\n        address oracleAddress;\n        bool isActive;\n        uint256 weight; // Weight in basis points (total across all oracles should be 10000)\n    }\n\n    struct CollateralToken {\n        IERC20 token;\n        uint256 decimals;\n        bool isActive;\n        uint256 collateralRatio; // How much collateral value is recognized (in basis points)\n    }\n\n    struct Market {\n        string symbol; // Market symbol (e.g., \"BTC-USD\")\n        address oracle; // Oracle address\n        uint256 maxLeverage; // Maximum allowed leverage\n        uint256 liquidationThreshold; // % of margin to trigger liquidation\n        uint256 fee; // Trading fee in bps\n        uint256 openInterestLong; // Total long positions USD\n        uint256 openInterestShort; // Total short positions USD\n        int256 cumulativeFunding; // Accumulated funding\n        uint256 lastFundingTime; // Last funding update\n        uint256 fundingInterval; // Funding rate interval\n        int256 maxFundingRate; // Max funding rate per interval\n        uint256 maxPositionSize; // Max position size per user\n        uint256 maxOpenInterest; // Max total open interest\n        uint256 minInitialMargin; // Minimum initial margin\n        bool isActive; // Market active status\n    }\n\n    struct FeeStructure {\n        uint256 makerFee; // Fee for makers (limit orders)\n        uint256 takerFee; // Fee for takers (market orders)\n        uint256 liquidationFee; // Fee for liquidators\n        uint256 protocolShare; // Protocol's share of fees\n    }\n\n    struct MarketStats {\n        uint256 longOpenInterest;\n        uint256 shortOpenInterest;\n        uint256 utilizationRate;\n        int256 skewness;\n        uint256 lastFundingTime;\n        int256 currentFundingRate;\n    }\n\n    struct PositionRisk {\n        uint256 marginRatio;\n        uint256 liquidationPrice;\n        bool isLiquidatable;\n        int256 unrealizedPnl;\n        int256 fundingPayment;\n    }\n\n    struct CollateralValue {\n        uint256 nominal;\n        uint256 effective;\n    }\n}\n"
    },
    "contracts/perps/modules/PerpCollateralModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../libs/PerpStructs.sol\";\nimport \"../libs/PerpEvents.sol\";\n\n/**\n * @title PerpCollateralModule\n * @dev Handles all collateral-related functionality for the perpetual trading system\n */\nabstract contract PerpCollateralModule is Ownable, ReentrancyGuard {\n    // Constants\n    uint256 private constant BASIS_POINTS = 10000;\n\n    // State variables\n    uint256 public minMargin;\n    address public feeRecipient;\n\n    // Mappings\n    mapping(address => bool) public supportedCollaterals;\n    mapping(address => PerpStructs.CollateralToken) public collateralTokens;\n    mapping(address => mapping(address => uint256)) public userCollateral;\n\n    // Events\n    event CollateralTokenAdded(address indexed token, uint256 decimals, uint256 collateralRatio);\n    event CollateralDeposited(address indexed user, address indexed token, uint256 amount);\n    event CollateralWithdrawn(address indexed user, address indexed token, uint256 amount);\n\n    /**\n     * @dev Initialize collateral module\n     */\n    function __PerpCollateralModule_init(address _feeRecipient, uint256 _minMargin) internal virtual onlyOwner {\n        require(_feeRecipient != address(0), \"Invalid fee recipient\");\n        require(_minMargin > 0, \"Invalid min margin\");\n\n        feeRecipient = _feeRecipient;\n        minMargin = _minMargin;\n    }\n\n    /**\n     * @dev Add a new collateral token\n     */\n    function addCollateralToken(address token, uint256 decimals, uint256 collateralRatio) external onlyOwner {\n        require(token != address(0), \"Invalid token address\");\n        require(!supportedCollaterals[token], \"Collateral already supported\");\n        require(collateralRatio <= BASIS_POINTS, \"Invalid collateral ratio\");\n\n        supportedCollaterals[token] = true;\n        collateralTokens[token] = PerpStructs.CollateralToken({\n            token: IERC20(token),\n            decimals: decimals,\n            isActive: true,\n            collateralRatio: collateralRatio\n        });\n\n        emit CollateralTokenAdded(token, decimals, collateralRatio);\n    }\n\n    /**\n     * @dev Deposit collateral\n     */\n    function depositCollateral(address token, uint256 amount) external nonReentrant {\n        require(supportedCollaterals[token], \"Unsupported collateral\");\n        require(collateralTokens[token].isActive, \"Collateral not active\");\n\n        PerpStructs.CollateralToken storage collateral = collateralTokens[token];\n        require(collateral.token.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\n\n        userCollateral[msg.sender][token] += amount;\n\n        emit CollateralDeposited(msg.sender, token, amount);\n    }\n\n    /**\n     * @dev Withdraw collateral\n     */\n    function withdrawCollateral(address token, uint256 amount) external nonReentrant {\n        require(supportedCollaterals[token], \"Unsupported collateral\");\n        require(userCollateral[msg.sender][token] >= amount, \"Insufficient balance\");\n\n        // Check if withdrawal would make positions unsafe\n        require(_isWithdrawalSafe(msg.sender, token, amount), \"Unsafe withdrawal\");\n\n        userCollateral[msg.sender][token] -= amount;\n        require(collateralTokens[token].token.transfer(msg.sender, amount), \"Transfer failed\");\n\n        emit CollateralWithdrawn(msg.sender, token, amount);\n    }\n\n    /**\n     * @dev Get collateral value\n     */\n    function getCollateralValue(\n        address user,\n        address token\n    ) external view returns (uint256 nominal, uint256 effective) {\n        nominal = userCollateral[user][token];\n        effective = (nominal * collateralTokens[token].collateralRatio) / BASIS_POINTS;\n    }\n\n    /**\n     * @dev Emergency withdraw\n     */\n    function emergencyWithdraw(address token) external nonReentrant {\n        require(_isEmergencyMode(), \"Emergency mode not active\");\n        uint256 amount = userCollateral[msg.sender][token];\n        require(amount > 0, \"No collateral to withdraw\");\n\n        userCollateral[msg.sender][token] = 0;\n        require(collateralTokens[token].token.transfer(msg.sender, amount), \"Transfer failed\");\n\n        emit CollateralWithdrawn(msg.sender, token, amount);\n    }\n\n    /**\n     * @dev Check if withdrawal is safe\n     */\n    function _isWithdrawalSafe(\n        address user,\n        address token,\n        uint256 withdrawalAmount\n    ) internal view virtual returns (bool);\n\n    /**\n     * @dev Check if emergency mode is active\n     */\n    function _isEmergencyMode() internal view virtual returns (bool);\n\n    /**\n     * @dev Lock collateral for a position\n     */\n    function _lockCollateral(address user, address token, uint256 amount) internal virtual {\n        require(userCollateral[user][token] >= amount, \"Insufficient collateral\");\n        userCollateral[user][token] -= amount;\n    }\n\n    /**\n     * @dev Release collateral from a position\n     */\n    function _releaseCollateral(address user, address token, uint256 amount) internal virtual {\n        userCollateral[user][token] += amount;\n    }\n\n    /**\n     * @dev Transfer protocol fees\n     */\n    function _transferProtocolFees(address user, address token, uint256 amount) internal virtual {\n        userCollateral[user][token] -= amount;\n        userCollateral[feeRecipient][token] += amount;\n    }\n}\n"
    },
    "contracts/perps/modules/PerpEmergencyModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../libs/PerpEvents.sol\";\n\n/**\n * @title PerpEmergencyModule\n * @dev Handles emergency functionality for the perpetual trading system\n */\nabstract contract PerpEmergencyModule is Ownable, ReentrancyGuard {\n    // State\n    bool public emergencyMode;\n    uint256 public insuranceFundBalance;\n\n    event InsuranceFundUpdated(uint256 oldBalance, uint256 newBalance);\n\n    function __PerpEmergencyModule_init() internal virtual {\n        emergencyMode = false;\n        insuranceFundBalance = 0;\n    }\n\n    /**\n     * @dev Enables emergency mode\n     */\n    function enableEmergencyMode() external onlyOwner {\n        require(!emergencyMode, \"Emergency mode already enabled\");\n        emergencyMode = true;\n        emit PerpEvents.EmergencyModeEnabled(msg.sender, block.timestamp);\n    }\n\n    /**\n     * @dev Disables emergency mode\n     */\n    function disableEmergencyMode() external onlyOwner {\n        require(emergencyMode, \"Emergency mode not enabled\");\n        emergencyMode = false;\n    }\n\n    /**\n     * @dev Adds funds to insurance fund\n     */\n    function addToInsuranceFund() external payable {\n        uint256 oldBalance = insuranceFundBalance;\n        insuranceFundBalance += msg.value;\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\n    }\n\n    /**\n     * @dev Withdraws funds from insurance fund\n     */\n    function withdrawFromInsuranceFund(uint256 amount) external onlyOwner {\n        require(amount <= insuranceFundBalance, \"Insufficient insurance fund balance\");\n        uint256 oldBalance = insuranceFundBalance;\n        insuranceFundBalance -= amount;\n        (bool success, ) = payable(owner()).call{ value: amount }(\"\");\n        require(success, \"Transfer failed\");\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\n    }\n\n    /**\n     * @dev Checks if emergency mode is active\n     */\n    function isEmergencyMode() public view returns (bool) {\n        return emergencyMode;\n    }\n\n    /**\n     * @dev Gets insurance fund balance\n     */\n    function getInsuranceFundBalance() external view returns (uint256) {\n        return insuranceFundBalance;\n    }\n\n    /**\n     * @dev Virtual receive function to be implemented by child contracts\n     */\n    receive() external payable virtual {\n        uint256 oldBalance = insuranceFundBalance;\n        insuranceFundBalance += msg.value;\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\n    }\n}\n"
    },
    "contracts/perps/modules/PerpLiquidationModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../libs/PerpStructs.sol\";\nimport \"../libs/PerpEvents.sol\";\nimport \"../libs/PerpMath.sol\";\n\n/**\n * @title PerpLiquidationModule\n * @dev Handles liquidation-related functionality for the perpetual trading system\n */\nabstract contract PerpLiquidationModule is ReentrancyGuard {\n    using PerpMath for uint256;\n    using PerpMath for PerpStructs.Position;\n\n    // Constants\n    uint256 private constant BASIS_POINTS = 10000;\n    uint256 private constant LIQUIDATION_FEE = 500; // 5% in basis points\n\n    function __PerpLiquidationModule_init() internal virtual {\n        // Initialize module\n    }\n\n    // Abstract functions that must be implemented by the main contract\n    function _getOraclePrice(uint32 marketIndex, bytes[] calldata priceUpdateData) internal virtual returns (uint256);\n\n    function _updateFunding(uint32 marketIndex) internal virtual;\n\n    function _releaseCollateral(address user, address token, uint256 amount) internal virtual;\n\n    function _transferProtocolFees(address user, address token, uint256 amount) internal virtual;\n\n    function _isEmergencyMode() internal view virtual returns (bool);\n\n    function getPosition(address trader, uint32 marketIndex) public view virtual returns (PerpStructs.Position memory);\n\n    function getMarket(uint32 marketIndex) public view virtual returns (PerpStructs.Market memory);\n\n    /**\n     * @dev Liquidates an underwater position\n     */\n    function liquidatePosition(\n        address trader,\n        uint32 marketIndex,\n        bytes[] calldata priceUpdateData\n    ) external virtual nonReentrant returns (uint256) {\n        require(!_isEmergencyMode(), \"System is in emergency mode\");\n\n        PerpStructs.Position memory position = getPosition(trader, marketIndex);\n        require(position.isOpen, \"Position not found\");\n\n        PerpStructs.Market memory market = getMarket(marketIndex);\n\n        // Get current price and update funding\n        uint256 currentPrice = _getOraclePrice(marketIndex, priceUpdateData);\n        _updateFunding(marketIndex);\n\n        // Calculate position value and check if liquidatable\n        (uint256 remainingMargin, bool _isLiquidatable) = _calculateLiquidationDetails(position, market, currentPrice);\n        require(_isLiquidatable, \"Position not liquidatable\");\n\n        // Calculate liquidation rewards\n        (uint256 liquidatorShare, uint256 protocolShare, uint256 returnAmount) = _calculateLiquidationShares(\n            remainingMargin\n        );\n\n        // Handle transfers\n        _handleLiquidationTransfers(\n            trader,\n            msg.sender,\n            position.collateralToken,\n            liquidatorShare,\n            protocolShare,\n            returnAmount\n        );\n\n        emit PerpEvents.PositionLiquidated(\n            trader,\n            marketIndex,\n            position.size,\n            msg.sender,\n            -int256(position.margin - returnAmount),\n            currentPrice\n        );\n\n        return liquidatorShare;\n    }\n\n    /**\n     * @dev Calculates if a position is liquidatable\n     */\n    function isLiquidatable(address trader, uint32 marketIndex, uint256 currentPrice) external view returns (bool) {\n        PerpStructs.Position memory position = this.getPosition(trader, marketIndex);\n        if (!position.isOpen) return false;\n\n        PerpStructs.Market memory market = getMarket(marketIndex);\n\n        // Fixed tuple destructuring syntax\n        (, bool _isLiquidatable) = _calculateLiquidationDetails(position, market, currentPrice);\n\n        return _isLiquidatable;\n    }\n\n    /**\n     * @dev Calculates liquidation details\n     */\n    function _calculateLiquidationDetails(\n        PerpStructs.Position memory position,\n        PerpStructs.Market memory market,\n        uint256 currentPrice\n    ) internal pure returns (uint256 remainingMargin, bool _isLiquidatable) {\n        int256 unrealizedPnl = PerpMath.calculatePnL(position, currentPrice);\n\n        if (unrealizedPnl >= 0) {\n            remainingMargin = position.margin + uint256(unrealizedPnl);\n        } else {\n            uint256 loss = uint256(-unrealizedPnl);\n            remainingMargin = loss < position.margin ? position.margin - loss : 0;\n        }\n\n        uint256 maintenanceMargin = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\n        _isLiquidatable = remainingMargin <= maintenanceMargin;\n\n        return (remainingMargin, _isLiquidatable);\n    }\n\n    /**\n     * @dev Calculates shares for liquidation participants\n     */\n    function _calculateLiquidationShares(\n        uint256 remainingMargin\n    ) internal pure returns (uint256 liquidatorShare, uint256 protocolShare, uint256 returnAmount) {\n        uint256 liquidationFee = (remainingMargin * LIQUIDATION_FEE) / BASIS_POINTS;\n\n        // Split liquidation fee between liquidator and protocol\n        liquidatorShare = (liquidationFee * 8000) / BASIS_POINTS; // 80% to liquidator\n        protocolShare = liquidationFee - liquidatorShare; // 20% to protocol\n\n        // Remaining amount goes back to trader\n        returnAmount = remainingMargin - liquidationFee;\n\n        return (liquidatorShare, protocolShare, returnAmount);\n    }\n\n    /**\n     * @dev Handles transfers during liquidation\n     */\n    function _handleLiquidationTransfers(\n        address trader,\n        address liquidator,\n        address collateralToken,\n        uint256 liquidatorShare,\n        uint256 protocolShare,\n        uint256 returnAmount\n    ) internal {\n        // Transfer liquidator share\n        if (liquidatorShare > 0) {\n            _releaseCollateral(liquidator, collateralToken, liquidatorShare);\n        }\n\n        // Transfer protocol share\n        if (protocolShare > 0) {\n            _transferProtocolFees(trader, collateralToken, protocolShare);\n        }\n\n        // Return remaining funds to trader\n        if (returnAmount > 0) {\n            _releaseCollateral(trader, collateralToken, returnAmount);\n        }\n    }\n}\n"
    },
    "contracts/perps/modules/PerpMarketModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../libs/PerpStructs.sol\";\nimport \"../libs/PerpEvents.sol\";\nimport \"../libs/PerpMath.sol\";\nimport \"../interfaces/IPerpMarket.sol\";\n\n/**\n * @title PerpMarketModule\n * @dev Handles market-related functionality for the perpetual trading system\n */\nabstract contract PerpMarketModule is IPerpMarket, Ownable {\n    using PerpMath for uint256;\n\n    // Constants\n    uint256 private constant BASIS_POINTS = 10000;\n    uint256 private constant MAX_LEVERAGE = 100;\n    uint256 private constant MIN_LIQUIDATION_THRESHOLD = 50;\n\n    // State variables\n    uint32 public marketCount;\n    mapping(uint32 => PerpStructs.Market) public markets;\n    mapping(uint32 => PerpStructs.FeeStructure) public marketFees;\n    mapping(uint32 => bool) public marketPaused;\n    mapping(uint32 => bytes32) public marketAggregatorIds;\n\n    function __PerpMarketModule_init() internal virtual {\n        marketCount = 0;\n    }\n\n    // Abstract functions that must be implemented by the main contract\n    function _updateOraclePrice(uint32 marketIndex) internal virtual returns (uint256);\n\n    function _isEmergencyMode() internal view virtual returns (bool);\n\n    /**\n     * @dev Adds a new market\n     */\n    function addMarket(\n        string calldata symbol,\n        bytes32 aggregatorId, // Changed from pythId to aggregatorId\n        uint256 maxLeverage,\n        uint256 liquidationThreshold,\n        uint256 fee,\n        uint256 fundingInterval,\n        int256 maxFundingRate,\n        uint256 maxPositionSize,\n        uint256 maxOpenInterest,\n        uint256 minInitialMargin\n    ) external override onlyOwner returns (uint32) {\n        require(aggregatorId != bytes32(0), \"Invalid aggregator ID\");\n        require(maxLeverage > 0 && maxLeverage <= MAX_LEVERAGE, \"Invalid max leverage\");\n        require(liquidationThreshold >= MIN_LIQUIDATION_THRESHOLD, \"Invalid liquidation threshold\");\n        require(maxPositionSize > 0, \"Invalid max position size\");\n        require(maxOpenInterest > 0, \"Invalid max open interest\");\n        require(fundingInterval > 0, \"Invalid funding interval\");\n\n        uint32 marketIndex = marketCount;\n        marketCount += 1;\n\n        marketAggregatorIds[marketIndex] = aggregatorId;\n\n        markets[marketIndex] = PerpStructs.Market({\n            symbol: symbol,\n            oracle: address(0),\n            maxLeverage: maxLeverage,\n            liquidationThreshold: liquidationThreshold,\n            fee: fee,\n            openInterestLong: 0,\n            openInterestShort: 0,\n            cumulativeFunding: 0,\n            lastFundingTime: block.timestamp,\n            fundingInterval: fundingInterval,\n            maxFundingRate: maxFundingRate,\n            maxPositionSize: maxPositionSize,\n            maxOpenInterest: maxOpenInterest,\n            minInitialMargin: minInitialMargin,\n            isActive: true\n        });\n\n        // Initialize fee structure\n        marketFees[marketIndex] = PerpStructs.FeeStructure({\n            makerFee: fee / 2, // Lower maker fees\n            takerFee: fee,\n            liquidationFee: 500, // 5% liquidation fee\n            protocolShare: 2000 // 20% protocol share\n        });\n\n        emit PerpEvents.MarketAdded(marketIndex, symbol, address(0), maxLeverage, maxPositionSize);\n\n        return marketIndex;\n    }\n\n    /**\n     * @dev Internal function to update oracle price using Switchboard\n     */\n    function _updateOraclePrice(uint32 marketIndex, bytes[] calldata updates) internal returns (uint256) {\n        require(marketExists(marketIndex), \"Market does not exist\");\n        bytes32 aggregatorId = marketAggregatorIds[marketIndex];\n        require(aggregatorId != bytes32(0), \"No oracle configured\");\n\n        // This will be implemented by PerpEngine which has access to the OracleModule\n        return _getOraclePrice(marketIndex, updates);\n    }\n\n    /**\n     * @dev Abstract function to be implemented by PerpEngine\n     */\n    function _getOraclePrice(uint32 marketIndex, bytes[] calldata updates) internal virtual returns (uint256);\n\n    /**\n     * @dev Updates market funding rate\n     */\n    function updateFunding(uint32 marketIndex) public override {\n        require(marketExists(marketIndex), \"Market does not exist\");\n        PerpStructs.Market storage market = markets[marketIndex];\n\n        if (block.timestamp < market.lastFundingTime + market.fundingInterval) {\n            return;\n        }\n\n        uint256 periods = (block.timestamp - market.lastFundingTime) / market.fundingInterval;\n        if (periods == 0) return;\n\n        int256 fundingRate = PerpMath.calculateFundingRate(\n            market.openInterestLong,\n            market.openInterestShort,\n            market.maxFundingRate\n        );\n\n        market.cumulativeFunding += fundingRate * int256(periods);\n        market.lastFundingTime += periods * market.fundingInterval;\n\n        emit PerpEvents.FundingUpdated(marketIndex, fundingRate, market.openInterestLong, market.openInterestShort);\n    }\n\n    /**\n     * @dev Gets market information\n     */\n    function getMarket(uint32 marketIndex) public view virtual override returns (PerpStructs.Market memory) {\n        require(marketExists(marketIndex), \"Market does not exist\");\n        return markets[marketIndex];\n    }\n\n    /**\n     * @dev Gets market statistics\n     */\n    function getMarketStats(\n        uint32 marketIndex\n    )\n        external\n        view\n        override\n        returns (\n            uint256 longOpenInterest,\n            uint256 shortOpenInterest,\n            uint256 utilizationRate,\n            int256 skewness,\n            uint256 lastFundingTime,\n            int256 currentFundingRate\n        )\n    {\n        require(marketExists(marketIndex), \"Market does not exist\");\n        PerpStructs.Market storage market = markets[marketIndex];\n\n        longOpenInterest = market.openInterestLong;\n        shortOpenInterest = market.openInterestShort;\n\n        utilizationRate = PerpMath.calculateUtilization(\n            market.openInterestLong + market.openInterestShort,\n            market.maxOpenInterest\n        );\n\n        skewness = _calculateSkewness(market);\n        lastFundingTime = market.lastFundingTime;\n        currentFundingRate = _calculateCurrentFundingRate(market, skewness);\n    }\n\n    /**\n     * @dev Gets market utilization\n     */\n    function getMarketUtilization(\n        uint32 marketIndex\n    ) external view override returns (uint256 longUtil, uint256 shortUtil) {\n        require(marketExists(marketIndex), \"Market does not exist\");\n        PerpStructs.Market storage market = markets[marketIndex];\n\n        longUtil = PerpMath.calculateUtilization(market.openInterestLong, market.maxOpenInterest);\n\n        shortUtil = PerpMath.calculateUtilization(market.openInterestShort, market.maxOpenInterest);\n    }\n\n    /**\n     * @dev Pauses a market\n     */\n    function pauseMarket(uint32 marketIndex) external override onlyOwner {\n        require(marketExists(marketIndex), \"Market does not exist\");\n        require(!marketPaused[marketIndex], \"Market already paused\");\n\n        marketPaused[marketIndex] = true;\n        emit PerpEvents.MarketPaused(marketIndex, true);\n    }\n\n    /**\n     * @dev Unpauses a market\n     */\n    function unpauseMarket(uint32 marketIndex) external override onlyOwner {\n        require(marketExists(marketIndex), \"Market does not exist\");\n        require(marketPaused[marketIndex], \"Market not paused\");\n\n        marketPaused[marketIndex] = false;\n        emit PerpEvents.MarketPaused(marketIndex, false);\n    }\n\n    /**\n     * @dev Checks if market exists and is active\n     */\n    function isMarketActive(uint32 marketIndex) public view override returns (bool) {\n        return\n            marketExists(marketIndex) &&\n            markets[marketIndex].isActive &&\n            !marketPaused[marketIndex] &&\n            !_isEmergencyMode();\n    }\n\n    /**\n     * @dev Internal helper to check if market exists\n     */\n    function marketExists(uint32 marketIndex) internal view returns (bool) {\n        return marketIndex < marketCount && markets[marketIndex].isActive;\n    }\n\n    /**\n     * @dev Internal helper to calculate market skewness\n     */\n    function _calculateSkewness(PerpStructs.Market storage market) internal view returns (int256) {\n        if (market.openInterestShort == 0) return 0;\n\n        uint256 ratio = (market.openInterestLong * 1e18) / market.openInterestShort;\n        return int256(ratio) - int256(1e18);\n    }\n\n    /**\n     * @dev Internal helper to calculate current funding rate\n     */\n    function _calculateCurrentFundingRate(\n        PerpStructs.Market storage market,\n        int256 skewness\n    ) internal view returns (int256) {\n        if (block.timestamp < market.lastFundingTime + market.fundingInterval) {\n            return 0;\n        }\n\n        int256 fundingRate = (skewness * market.maxFundingRate) / int256(BASIS_POINTS);\n\n        return\n            fundingRate > market.maxFundingRate\n                ? market.maxFundingRate\n                : (fundingRate < -market.maxFundingRate ? -market.maxFundingRate : fundingRate);\n    }\n}\n"
    },
    "contracts/perps/modules/PerpOracleModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { Structs } from \"@switchboard-xyz/on-demand-solidity/Structs.sol\";\nimport \"../libs/PerpStructs.sol\";\nimport { IPerpOracle } from \"../interfaces/IPerpOracle.sol\";\n\nstruct Update {\n    bytes32 oracleId; // The publisher of the update\n    int128 result; // The value of the recorded update\n    uint256 timestamp; // The timestamp of the update\n}\n\ninterface ISwitchboard {\n    function latestUpdate(bytes32 aggregatorId) external view returns (Update memory);\n\n    function updateFeeds(bytes[] calldata updates) external payable;\n\n    function getFee(bytes[] calldata updates) external view returns (uint256);\n}\n\n/**\n * @title PerpOracleModule\n * @dev Handles oracle functionality using Switchboard\n */\nabstract contract PerpOracleModule is IPerpOracle {\n    // Constants\n    uint256 private constant PRICE_PRECISION = 1e10;\n    uint256 private constant STALENESS_PERIOD = 60;\n\n    // State\n    ISwitchboard public switchboard;\n\n    // Market oracle configurations\n    struct MarketOracle {\n        bytes32 aggregatorId;\n        bool isActive;\n    }\n\n    // Error definitions\n    error InsufficientFee(uint256 expected, uint256 received);\n    error InvalidResult(int128 result);\n    error StalePrice(uint256 timestamp);\n    error NegativePrice(int128 price);\n\n    // Events\n    event OracleUpdated(uint32 marketIndex, bytes32 aggregatorId);\n    event PriceUpdated(uint32 marketIndex, int128 price, uint256 timestamp);\n\n    mapping(uint32 => MarketOracle) public marketOracles;\n\n    /**\n     * @dev Initializes the oracle module\n     */\n    function __PerpOracleModule_init(address _switchboardContract) internal virtual {\n        require(_switchboardContract != address(0), \"Invalid Switchboard address\");\n        switchboard = ISwitchboard(_switchboardContract);\n    }\n\n    /**\n     * @dev Sets oracle configuration for a market\n     */\n    function setMarketOracle(uint32 marketIndex, bytes32 aggregatorId) external virtual {\n        require(aggregatorId != bytes32(0), \"Invalid aggregator ID\");\n\n        marketOracles[marketIndex] = MarketOracle({ aggregatorId: aggregatorId, isActive: true });\n\n        emit OracleUpdated(marketIndex, aggregatorId);\n    }\n\n    /**\n     * @dev Gets price from configured oracle with updates\n     */\n    function _getOraclePrice(uint32 marketIndex, bytes[] calldata updates) internal virtual returns (uint256) {\n        MarketOracle storage oracle = marketOracles[marketIndex];\n        require(oracle.isActive, \"Oracle not configured\");\n\n        // Get the fee for updating the feeds\n        uint256 fee = switchboard.getFee(updates);\n        if (msg.value < fee) {\n            revert InsufficientFee(fee, msg.value);\n        }\n\n        // Submit the updates to the Switchboard contract\n        switchboard.updateFeeds{ value: fee }(updates);\n\n        // Read the current value\n        Update memory latestUpdate = switchboard.latestUpdate(oracle.aggregatorId);\n\n        // Check staleness\n        if (block.timestamp - latestUpdate.timestamp > STALENESS_PERIOD) {\n            revert StalePrice(latestUpdate.timestamp);\n        }\n\n        // Validate result\n        if (latestUpdate.result <= 0) {\n            revert InvalidResult(latestUpdate.result);\n        }\n\n        emit PriceUpdated(marketIndex, latestUpdate.result, latestUpdate.timestamp);\n\n        // Safe conversion: we've already checked result > 0\n        return _normalizePrice(uint128(latestUpdate.result));\n    }\n\n    /**\n     * @dev Normalizes price to contract's precision\n     */\n    function _normalizePrice(uint128 price) internal pure returns (uint256) {\n        // Switchboard returns prices with 18 decimals\n        return (uint256(price) * PRICE_PRECISION) / 1e18;\n    }\n\n    /**\n     * @dev View function to get latest price without updates\n     */\n    function getLatestPrice(uint32 marketIndex) external view returns (uint256) {\n        MarketOracle storage oracle = marketOracles[marketIndex];\n        require(oracle.isActive, \"Oracle not configured\");\n\n        // Get the latest update as struct\n        Update memory update = switchboard.latestUpdate(oracle.aggregatorId);\n\n        require(block.timestamp - update.timestamp <= STALENESS_PERIOD, \"Stale price\");\n        if (update.result <= 0) {\n            revert InvalidResult(update.result);\n        }\n\n        // Safe conversion: we've already checked result > 0\n        return _normalizePrice(uint128(update.result));\n    }\n}\n"
    },
    "contracts/perps/modules/PerpPositionModule.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"../libs/PerpStructs.sol\";\nimport \"../libs/PerpEvents.sol\";\nimport \"../libs/PerpMath.sol\";\n\n/**\n * @title PerpPositionModule\n * @dev Handles all position-related functionality\n */\nabstract contract PerpPositionModule is Ownable, ReentrancyGuard {\n    using PerpMath for uint256;\n    using PerpMath for PerpStructs.Position;\n\n    // Constants from main contract\n    uint256 private constant BASIS_POINTS = 10000;\n    uint256 private constant MAX_LEVERAGE = 100;\n\n    // State\n    mapping(address => mapping(uint32 => PerpStructs.Position)) public positions;\n\n    function __PerpPositionModule_init() internal virtual {}\n\n    // Abstract functions that must be implemented by the main contract\n    function _getOraclePrice(uint32 marketIndex, bytes[] calldata priceUpdateData) internal virtual returns (uint256);\n\n    function _updateFunding(uint32 marketIndex) internal virtual;\n\n    function _lockCollateral(address user, address token, uint256 amount) internal virtual;\n\n    function _releaseCollateral(address user, address token, uint256 amount) internal virtual;\n\n    function _transferProtocolFees(address user, address token, uint256 amount) internal virtual;\n\n    function _isEmergencyMode() internal view virtual returns (bool);\n\n    /**\n     * @dev Opens a new position\n     */\n    function openPosition(\n        address token,\n        address trader,\n        uint32 marketIndex,\n        uint256 margin,\n        uint32 leverage,\n        bool isLong,\n        uint256 price,\n        uint256 maxSlippage,\n        bytes[] calldata priceUpdateData\n    ) external virtual nonReentrant {\n        require(!_isEmergencyMode(), \"System is in emergency mode\");\n        require(!positions[trader][marketIndex].isOpen, \"Position already exists\");\n        require(leverage <= MAX_LEVERAGE, \"Leverage too high\");\n\n        // Get current price and validate\n        uint256 currentPrice = _getOraclePrice(marketIndex, priceUpdateData);\n        require(PerpMath.isValidPrice(price, currentPrice, maxSlippage), \"Price exceeds slippage\");\n\n        // Calculate position size\n        uint256 size = margin * uint256(leverage);\n\n        // Lock collateral\n        _lockCollateral(trader, token, margin);\n\n        // Update funding before position creation\n        _updateFunding(marketIndex);\n\n        // Create position\n\n        positions[trader][marketIndex] = PerpStructs.Position({\n            isOpen: true,\n            size: size,\n            margin: margin,\n            entryPrice: price,\n            lastCumulativeFunding: 0, // Will be set from market's current funding\n            isLong: isLong,\n            leverage: leverage,\n            marketIndex: marketIndex,\n            lastUpdateTime: block.timestamp,\n            collateralToken: token\n        });\n\n        emit PerpEvents.PositionOpened(trader, marketIndex, size, margin, isLong, leverage, price, block.timestamp);\n    }\n\n    /**\n     * @dev Closes an existing position\n     */\n    function closePosition(\n        address trader,\n        uint32 marketIndex,\n        uint256 price,\n        uint256 maxSlippage,\n        bytes[] calldata priceUpdateData\n    ) external virtual nonReentrant returns (int256) {\n        PerpStructs.Position memory position = positions[trader][marketIndex];\n        require(position.isOpen, \"Position does not exist\");\n\n        // Get current price and validate\n        uint256 currentPrice = _getOraclePrice(marketIndex, priceUpdateData);\n        require(PerpMath.isValidPrice(price, currentPrice, maxSlippage), \"Price exceeds slippage\");\n\n        // Update funding\n        _updateFunding(marketIndex);\n\n        // Calculate closing amounts\n        (uint256 returnAmount, int256 totalPnl) = _calculateClosingAmounts(position, price);\n\n        // Handle transfers\n        if (returnAmount > 0) {\n            _releaseCollateral(trader, position.collateralToken, returnAmount);\n        }\n\n        // Delete position\n        delete positions[trader][marketIndex];\n\n        emit PerpEvents.PositionClosed(trader, marketIndex, position.size, totalPnl, price, block.timestamp);\n\n        return totalPnl;\n    }\n\n    /**\n     * @dev Gets position information\n     */\n    function getPosition(address trader, uint32 marketIndex) public view virtual returns (PerpStructs.Position memory) {\n        return positions[trader][marketIndex];\n    }\n\n    /**\n     * @dev Gets position value and PnL\n     */\n    function getPositionValue(\n        address trader,\n        uint32 marketIndex,\n        uint256 currentPrice\n    ) external view returns (uint256 value, bool hasProfit, int256 fundingFee) {\n        PerpStructs.Position memory position = positions[trader][marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        int256 pnl = PerpMath.calculatePnL(position, currentPrice);\n        fundingFee = _calculateFundingPayment(position);\n\n        if (pnl >= 0) {\n            value = uint256(pnl);\n            hasProfit = true;\n        } else {\n            value = uint256(-pnl);\n            hasProfit = false;\n        }\n    }\n\n    /**\n     * @dev Gets position risk metrics\n     */\n    function getPositionRisk(\n        address trader,\n        uint32 marketIndex,\n        uint256 currentPrice,\n        uint256 liquidationThreshold\n    ) external view returns (PerpStructs.PositionRisk memory) {\n        PerpStructs.Position memory position = positions[trader][marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        int256 unrealizedPnl = PerpMath.calculatePnL(position, currentPrice);\n        int256 fundingPayment = _calculateFundingPayment(position);\n\n        uint256 marginRatio = PerpMath.calculateTotalValue(position.margin, unrealizedPnl, fundingPayment);\n\n        uint256 liquidationPrice = PerpMath.calculateLiquidationPrice(position, liquidationThreshold);\n\n        return\n            PerpStructs.PositionRisk({\n                marginRatio: marginRatio,\n                liquidationPrice: liquidationPrice,\n                isLiquidatable: marginRatio <= liquidationThreshold,\n                unrealizedPnl: unrealizedPnl,\n                fundingPayment: fundingPayment\n            });\n    }\n\n    /**\n     * @dev Internal function to calculate amounts for closing a position\n     */\n    function _calculateClosingAmounts(\n        PerpStructs.Position memory position,\n        uint256 price\n    ) internal pure returns (uint256 returnAmount, int256 totalPnl) {\n        int256 unrealizedPnl = PerpMath.calculatePnL(position, price);\n        totalPnl = unrealizedPnl;\n\n        if (totalPnl >= 0) {\n            returnAmount = position.margin + uint256(totalPnl);\n        } else {\n            uint256 loss = uint256(-totalPnl);\n            returnAmount = loss < position.margin ? position.margin - loss : 0;\n        }\n    }\n\n    /**\n     * @dev Internal function to calculate funding payment\n     */\n    function _calculateFundingPayment(PerpStructs.Position memory position) internal pure returns (int256) {\n        return PerpMath.calculateFundingPayment(position, 0); // Current funding passed from main contract\n    }\n}\n"
    },
    "contracts/perps/PerpEngine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * @title PerpEngine\n * @dev Core contract for perpetual trading with hasMON as collateral\n */\ncontract PerpEngine is Ownable, ReentrancyGuard {\n    // Constants\n    uint256 private constant PRECISION = 1e18;\n    uint256 private constant BASIS_POINTS = 10000;\n    uint256 private constant MAX_LEVERAGE = 100; // 100x max leverage\n    uint256 private constant MIN_LIQUIDATION_THRESHOLD = 50; // 50%\n    uint256 private constant LIQUIDATION_FEE = 500; // 5% in basis points\n    uint256 private constant PRICE_PRECISION = 1e10; // For Chainlink price conversion\n\n    // State\n    bool public emergencyMode;\n    uint256 public insuranceFundBalance;\n\n    mapping(address => mapping(address => uint256)) public collateralBalances;\n\n    struct Position {\n        bool isOpen;\n        uint256 size; // Position size in USD (x10^18)\n        uint256 margin; // Initial margin in hasMON tokens\n        uint256 entryPrice; // Entry price in USD (x10^18)\n        int256 lastCumulativeFunding; // Funding state at entry\n        bool isLong; // Long or short position\n        uint32 leverage; // Leverage as an integer\n        uint32 marketIndex; // Index of the market\n        uint256 lastUpdateTime; // Last time position was updated\n    }\n\n    struct Market {\n        string symbol; // Market symbol (e.g., \"BTC-USD\")\n        address oracle; // Chainlink oracle address\n        uint256 maxLeverage; // Maximum allowed leverage\n        uint256 liquidationThreshold; // % of margin to trigger liquidation\n        uint256 fee; // Trading fee in bps\n        uint256 openInterestLong; // Total long positions USD\n        uint256 openInterestShort; // Total short positions USD\n        int256 cumulativeFunding; // Accumulated funding\n        uint256 lastFundingTime; // Last funding update\n        uint256 fundingInterval; // Funding rate interval\n        int256 maxFundingRate; // Max funding rate per interval\n        uint256 maxPositionSize; // Max position size per user\n        uint256 maxOpenInterest; // Max total open interest\n        uint256 minInitialMargin; // Minimum initial margin\n        bool isActive; // Market active status\n    }\n\n    struct FeeStructure {\n        uint256 makerFee; // Fee for makers (limit orders)\n        uint256 takerFee; // Fee for takers (market orders)\n        uint256 liquidationFee; // Fee for liquidators\n        uint256 protocolShare; // Protocol's share of fees\n    }\n\n    // State Variables\n    uint256 public minMargin;\n    uint256 public protocolFeeShare;\n    address public feeRecipient;\n\n    // Mappings\n    mapping(address => mapping(uint32 => Position)) public positions;\n    mapping(uint32 => Market) public markets;\n    mapping(uint32 => FeeStructure) public marketFees;\n    mapping(uint32 => bool) public marketPaused;\n    uint32 public marketCount;\n\n    // Events with improved details\n    event PositionOpened(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        uint256 margin,\n        bool isLong,\n        uint32 leverage,\n        uint256 entryPrice,\n        uint256 timestamp\n    );\n    event PositionClosed(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        int256 pnl,\n        uint256 exitPrice,\n        uint256 timestamp\n    );\n    event PositionLiquidated(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        address liquidator,\n        int256 pnl,\n        uint256 liquidationPrice\n    );\n    event MarketAdded(\n        uint32 indexed marketIndex,\n        string symbol,\n        address oracle,\n        uint256 maxLeverage,\n        uint256 maxPositionSize\n    );\n    event FundingUpdated(\n        uint32 indexed marketIndex,\n        int256 fundingRate,\n        uint256 openInterestLong,\n        uint256 openInterestShort\n    );\n    event EmergencyModeEnabled(address indexed triggeredBy, uint256 timestamp);\n    event MarketPaused(uint32 indexed marketIndex, bool isPaused);\n    event InsuranceFundUpdated(uint256 oldBalance, uint256 newBalance);\n    event OrderBookUpdated(address indexed newOrderBook);\n\n    // Enhanced modifiers\n    modifier notInEmergencyMode() {\n        require(!emergencyMode, \"System is in emergency mode\");\n        _;\n    }\n\n    modifier marketActive(uint32 marketIndex) {\n        require(markets[marketIndex].isActive, \"Market not active\");\n        require(!marketPaused[marketIndex], \"Market is paused\");\n        _;\n    }\n\n    modifier validPrice(uint256 price) {\n        require(price > 0, \"Invalid price\");\n        _;\n    }\n\n    modifier marketExists(uint32 marketIndex) {\n        require(marketIndex < marketCount, \"Market does not exist\");\n        require(markets[marketIndex].oracle != address(0), \"Market not initialized\");\n        _;\n    }\n\n    modifier positionExists(address trader, uint32 marketIndex) {\n        require(positions[trader][marketIndex].isOpen, \"Position does not exist\");\n        _;\n    }\n\n    constructor(address _feeRecipient, uint256 _minMargin, uint256 _protocolFeeShare) Ownable(msg.sender) {\n        require(_feeRecipient != address(0), \"Invalid fee recipient address\");\n        require(_minMargin > 0, \"Invalid min margin\");\n        require(_protocolFeeShare <= BASIS_POINTS, \"Invalid protocol fee share\");\n\n        feeRecipient = _feeRecipient;\n        minMargin = _minMargin;\n        protocolFeeShare = _protocolFeeShare;\n\n        emergencyMode = false;\n        marketCount = 0;\n    }\n\n    function depositCollateral(address token, uint256 amount) external nonReentrant {\n        require(amount > 0, \"Amount must be > 0\");\n        require(IERC20(token).transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\n        collateralBalances[msg.sender][token] += amount;\n    }\n\n    function withdrawCollateral(address token, uint256 amount) external nonReentrant {\n        require(collateralBalances[msg.sender][token] >= amount, \"Insufficient balance\");\n        collateralBalances[msg.sender][token] -= amount;\n        require(IERC20(token).transfer(msg.sender, amount), \"Transfer failed\");\n    }\n\n    function _isValidPrice(uint256 price, uint256 currentPrice, uint256 maxSlippage) internal pure returns (bool) {\n        if (price == 0 || currentPrice == 0) return false;\n\n        uint256 priceDiff = price > currentPrice ? price - currentPrice : currentPrice - price;\n\n        uint256 slippage = (priceDiff * BASIS_POINTS) / currentPrice;\n        return slippage <= maxSlippage;\n    }\n\n    function _updateFunding(uint32 marketIndex) internal {\n        Market storage market = markets[marketIndex];\n\n        if (block.timestamp < market.lastFundingTime + market.fundingInterval) {\n            return;\n        }\n\n        // Calculate multiple funding payments if needed\n        uint256 periods = (block.timestamp - market.lastFundingTime) / market.fundingInterval;\n        if (periods == 0) return;\n\n        // Calculate imbalance between longs and shorts\n        int256 longShortRatio;\n        if (market.openInterestShort > 0) {\n            longShortRatio =\n                int256((market.openInterestLong * BASIS_POINTS) / market.openInterestShort) -\n                int256(BASIS_POINTS);\n        } else if (market.openInterestLong > 0) {\n            longShortRatio = int256(BASIS_POINTS); // Max imbalance if no shorts\n        } else {\n            longShortRatio = 0; // No positions open\n        }\n\n        // Calculate and cap funding rate\n        int256 fundingRate = (longShortRatio * market.maxFundingRate) / int256(BASIS_POINTS);\n        fundingRate = fundingRate > market.maxFundingRate\n            ? market.maxFundingRate\n            : (fundingRate < -market.maxFundingRate ? -market.maxFundingRate : fundingRate);\n\n        // Update cumulative funding\n        market.cumulativeFunding += fundingRate * int256(periods);\n        market.lastFundingTime += periods * market.fundingInterval;\n\n        emit FundingUpdated(marketIndex, fundingRate, market.openInterestLong, market.openInterestShort);\n    }\n\n    // Core trading functions\n    function openPosition(\n        address trader,\n        uint32 marketIndex,\n        uint256 margin,\n        uint32 leverage,\n        bool isLong,\n        uint256 price,\n        uint256 maxSlippage,\n        address collateralToken\n    ) external nonReentrant marketExists(marketIndex) marketActive(marketIndex) notInEmergencyMode returns (uint256) {\n        Market storage market = markets[marketIndex];\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n\n        // Validate inputs\n        require(!positions[trader][marketIndex].isOpen, \"Position already exists\");\n        require(margin >= market.minInitialMargin, \"Margin too small\");\n        require(margin >= minMargin, \"Below global minimum margin\");\n        require(leverage <= market.maxLeverage, \"Leverage too high\");\n        require(_isValidPrice(price, currentPrice, maxSlippage), \"Price exceeds slippage\");\n        require(collateralBalances[msg.sender][collateralToken] >= margin, \"Insufficient collateral\");\n\n        // Calculate position details\n        uint256 size = margin * uint256(leverage);\n        require(size <= market.maxPositionSize, \"Position size too large\");\n\n        // Check market capacity\n        uint256 newOpenInterest = isLong ? market.openInterestLong + size : market.openInterestShort + size;\n        require(newOpenInterest <= market.maxOpenInterest, \"Market capacity exceeded\");\n\n        // Calculate and collect fees\n        FeeStructure storage fees = marketFees[marketIndex];\n        uint256 tradingFee = (size * fees.takerFee) / BASIS_POINTS;\n        uint256 protocolFee = (tradingFee * fees.protocolShare) / BASIS_POINTS;\n\n        // Deduct margin plus fee from the trader’s collateral balance\n        uint256 totalDebit = margin + tradingFee;\n\n        require(collateralBalances[msg.sender][collateralToken] >= totalDebit, \"Insufficient collateral for fee\");\n        collateralBalances[msg.sender][collateralToken] -= totalDebit;\n\n        // Update funding before position creation\n        _updateFunding(marketIndex);\n\n        // Create position\n        positions[trader][marketIndex] = Position({\n            isOpen: true,\n            size: size,\n            margin: margin,\n            entryPrice: price,\n            lastCumulativeFunding: market.cumulativeFunding,\n            isLong: isLong,\n            leverage: leverage,\n            marketIndex: marketIndex,\n            lastUpdateTime: block.timestamp\n        });\n\n        // Update market state\n        if (isLong) {\n            market.openInterestLong += size;\n        } else {\n            market.openInterestShort += size;\n        }\n\n        emit PositionOpened(trader, marketIndex, size, margin, isLong, leverage, price, block.timestamp);\n\n        return size;\n    }\n\n    function closePosition(\n        address trader,\n        uint32 marketIndex,\n        uint256 price,\n        uint256 maxSlippage,\n        address collateralToken\n    ) external nonReentrant marketActive(marketIndex) positionExists(trader, marketIndex) returns (int256) {\n        Position memory pos = positions[trader][marketIndex]; // Use memory instead of storage\n        Market storage market = markets[marketIndex];\n\n        // Validate price\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        require(_isValidPrice(price, currentPrice, maxSlippage), \"Price exceeds slippage\");\n\n        // Update funding\n        _updateFunding(marketIndex);\n\n        // Calculate returns using a separate internal function\n        (uint256 returnAmount, int256 totalPnl) = _calculateClosingAmounts(trader, marketIndex, price, pos);\n\n        // Update market state\n        if (pos.isLong) {\n            market.openInterestLong -= pos.size;\n        } else {\n            market.openInterestShort -= pos.size;\n        }\n\n        // Handle transfers\n        collateralBalances[msg.sender][collateralToken] += returnAmount;\n\n        // Close position\n        delete positions[trader][marketIndex];\n\n        emit PositionClosed(trader, marketIndex, pos.size, totalPnl, price, block.timestamp);\n\n        return totalPnl;\n    }\n\n    function _calculateClosingAmounts(\n        address trader,\n        uint32 marketIndex,\n        uint256 price,\n        Position memory position\n    ) internal view returns (uint256 returnAmount, int256 totalPnl) {\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, price);\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\n        totalPnl = unrealizedPnl + fundingPayment;\n\n        FeeStructure storage fees = marketFees[marketIndex];\n        uint256 closingFee = (position.size * fees.takerFee) / BASIS_POINTS;\n\n        if (totalPnl >= 0) {\n            returnAmount = position.margin + uint256(totalPnl) - closingFee;\n        } else {\n            uint256 loss = uint256(-totalPnl);\n            returnAmount = loss < position.margin ? position.margin - loss - closingFee : 0;\n        }\n    }\n\n    function liquidatePosition(\n        address trader,\n        uint32 marketIndex,\n        address collateralToken\n    ) external nonReentrant marketActive(marketIndex) positionExists(trader, marketIndex) returns (uint256) {\n        Position storage position = positions[trader][marketIndex];\n        Market storage market = markets[marketIndex];\n        FeeStructure storage fees = marketFees[marketIndex];\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n\n        // Update funding and calculate total PnL\n        _updateFunding(marketIndex);\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\n        int256 totalPnl = unrealizedPnl + fundingPayment;\n\n        // Calculate remaining margin\n        uint256 remainingMargin;\n        if (totalPnl >= 0) {\n            remainingMargin = position.margin + uint256(totalPnl);\n        } else {\n            if (uint256(-totalPnl) < position.margin) {\n                remainingMargin = position.margin - uint256(-totalPnl);\n            } else {\n                remainingMargin = 0;\n            }\n        }\n\n        // Check liquidation threshold\n        uint256 maintenanceMargin = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\n        require(remainingMargin <= maintenanceMargin, \"Position not liquidatable\");\n\n        // Calculate liquidation rewards\n        uint256 liquidationFee = (remainingMargin * fees.liquidationFee) / BASIS_POINTS;\n        uint256 protocolShare = (liquidationFee * fees.protocolShare) / BASIS_POINTS;\n        uint256 liquidatorShare = liquidationFee - protocolShare;\n\n        // Update market state\n        if (position.isLong) {\n            market.openInterestLong -= position.size;\n        } else {\n            market.openInterestShort -= position.size;\n        }\n\n        // Transfer fees\n        if (protocolShare > 0) {\n            collateralBalances[feeRecipient][collateralToken] += protocolShare;\n        }\n        if (liquidatorShare > 0) {\n            collateralBalances[trader][collateralToken] += liquidatorShare;\n        }\n\n        // Return remaining funds to trader\n        uint256 returnAmount = remainingMargin - liquidationFee;\n        if (returnAmount > 0) {\n            collateralBalances[trader][collateralToken] += returnAmount;\n        }\n\n        // Close position\n        delete positions[trader][marketIndex];\n\n        emit PositionLiquidated(trader, marketIndex, position.size, msg.sender, totalPnl, currentPrice);\n\n        return liquidatorShare;\n    }\n\n    // Internal calculation functions\n    function _calculatePremium(Market storage market) internal view returns (int256) {\n        if (market.openInterestShort == 0) return 0;\n\n        // Calculate skew ratio between longs and shorts\n        uint256 ratio = (market.openInterestLong * PRECISION) / market.openInterestShort;\n        int256 skew = int256(ratio) - int256(PRECISION);\n\n        return skew;\n    }\n\n    function _calculatePnL(address trader, uint32 marketIndex, uint256 currentPrice) internal view returns (int256) {\n        Position storage position = positions[trader][marketIndex];\n\n        uint256 priceDelta;\n        if (position.isLong) {\n            if (currentPrice > position.entryPrice) {\n                priceDelta = currentPrice - position.entryPrice;\n                return int256((priceDelta * position.size) / position.entryPrice);\n            } else {\n                priceDelta = position.entryPrice - currentPrice;\n                return -int256((priceDelta * position.size) / position.entryPrice);\n            }\n        } else {\n            if (currentPrice > position.entryPrice) {\n                priceDelta = currentPrice - position.entryPrice;\n                return -int256((priceDelta * position.size) / position.entryPrice);\n            } else {\n                priceDelta = position.entryPrice - currentPrice;\n                return int256((priceDelta * position.size) / position.entryPrice);\n            }\n        }\n    }\n\n    function _calculateFundingPayment(address trader, uint32 marketIndex) internal view returns (int256) {\n        Position storage position = positions[trader][marketIndex];\n        Market storage market = markets[marketIndex];\n\n        int256 fundingDelta = market.cumulativeFunding - position.lastCumulativeFunding;\n\n        // Cast position.size to int256 and PRECISION to int256 for consistent arithmetic\n        if (position.isLong) {\n            return (-int256(position.size) * fundingDelta) / int256(PRECISION);\n        } else {\n            return (int256(position.size) * fundingDelta) / int256(PRECISION);\n        }\n    }\n\n    function _getOraclePrice(uint32 marketIndex) internal view returns (uint256) {\n        Market storage market = markets[marketIndex];\n        AggregatorV3Interface oracle = AggregatorV3Interface(market.oracle);\n\n        // Get latest round data\n        (uint80 roundId, int256 price, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = oracle\n            .latestRoundData();\n\n        // Price validation\n        require(price > 0, \"Invalid oracle price\");\n        require(updatedAt > 0, \"Round not complete\");\n        require(answeredInRound >= roundId, \"Stale price\");\n        require(block.timestamp - updatedAt <= 3600, \"Oracle price too old\");\n\n        // Convert to 18 decimals (assuming Chainlink uses 8 decimals)\n        return uint256(price) * PRICE_PRECISION;\n    }\n\n    // View functions for external integrations\n    function getPositionValue(\n        address trader,\n        uint32 marketIndex\n    ) external view returns (uint256 value, bool hasProfit, int256 fundingFee) {\n        Position storage position = positions[trader][marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\n        fundingFee = _calculateFundingPayment(trader, marketIndex);\n\n        if (pnl >= 0) {\n            value = uint256(pnl);\n            hasProfit = true;\n        } else {\n            value = uint256(-pnl);\n            hasProfit = false;\n        }\n    }\n\n    function getMarketUtilization(uint32 marketIndex) external view returns (uint256 longUtil, uint256 shortUtil) {\n        Market storage market = markets[marketIndex];\n\n        longUtil = market.openInterestLong == 0 ? 0 : (market.openInterestLong * PRECISION) / market.maxOpenInterest;\n\n        shortUtil = market.openInterestShort == 0 ? 0 : (market.openInterestShort * PRECISION) / market.maxOpenInterest;\n    }\n\n    function getHealthFactor(address trader, uint32 marketIndex) external view returns (uint256) {\n        Position storage position = positions[trader][marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\n        int256 fundingFee = _calculateFundingPayment(trader, marketIndex);\n        int256 totalPnl = pnl + fundingFee;\n\n        uint256 remainingMargin;\n        if (totalPnl >= 0) {\n            remainingMargin = position.margin + uint256(totalPnl);\n        } else {\n            if (uint256(-totalPnl) < position.margin) {\n                remainingMargin = position.margin - uint256(-totalPnl);\n            } else {\n                return 0;\n            }\n        }\n\n        return (remainingMargin * BASIS_POINTS) / position.margin;\n    }\n\n    // Emergency functions\n    function enableEmergencyMode() external onlyOwner {\n        require(!emergencyMode, \"Emergency mode already enabled\");\n        emergencyMode = true;\n        emit EmergencyModeEnabled(msg.sender, block.timestamp);\n    }\n\n    function pauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\n        require(!marketPaused[marketIndex], \"Market already paused\");\n        marketPaused[marketIndex] = true;\n        emit MarketPaused(marketIndex, true);\n    }\n\n    function unpauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\n        require(marketPaused[marketIndex], \"Market not paused\");\n        marketPaused[marketIndex] = false;\n        emit MarketPaused(marketIndex, false);\n    }\n\n    // Insurance fund management\n    function addToInsuranceFund() external payable {\n        uint256 oldBalance = insuranceFundBalance;\n        insuranceFundBalance += msg.value;\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\n    }\n\n    function withdrawFromInsuranceFund(uint256 amount) external onlyOwner {\n        require(amount <= insuranceFundBalance, \"Insufficient insurance fund balance\");\n        uint256 oldBalance = insuranceFundBalance;\n        insuranceFundBalance -= amount;\n        (bool success, ) = payable(owner()).call{ value: amount }(\"\");\n        require(success, \"Transfer failed\");\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\n    }\n\n    // Enhanced view functions for market analysis\n    function getMarketStats(\n        uint32 marketIndex\n    )\n        external\n        view\n        returns (\n            uint256 longOpenInterest,\n            uint256 shortOpenInterest,\n            uint256 utilizationRate,\n            int256 skewness,\n            uint256 lastFundingTime,\n            int256 currentFundingRate\n        )\n    {\n        Market storage market = markets[marketIndex];\n\n        longOpenInterest = market.openInterestLong;\n        shortOpenInterest = market.openInterestShort;\n\n        utilizationRate = market.maxOpenInterest > 0\n            ? ((market.openInterestLong + market.openInterestShort) * PRECISION) / market.maxOpenInterest\n            : 0;\n\n        skewness = _calculatePremium(market);\n        lastFundingTime = market.lastFundingTime;\n\n        // Calculate current funding rate\n        if (block.timestamp >= market.lastFundingTime + market.fundingInterval) {\n            currentFundingRate = (skewness * market.maxFundingRate) / int256(BASIS_POINTS);\n            if (currentFundingRate > market.maxFundingRate) {\n                currentFundingRate = market.maxFundingRate;\n            } else if (currentFundingRate < -market.maxFundingRate) {\n                currentFundingRate = -market.maxFundingRate;\n            }\n        }\n    }\n\n    function getPositionRisk(\n        address trader,\n        uint32 marketIndex\n    )\n        external\n        view\n        returns (\n            uint256 marginRatio,\n            uint256 liquidationPrice,\n            bool isLiquidatable,\n            int256 unrealizedPnl,\n            int256 fundingPayment\n        )\n    {\n        Position storage position = positions[trader][marketIndex];\n        Market storage market = markets[marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\n        fundingPayment = _calculateFundingPayment(trader, marketIndex);\n\n        int256 totalValue = int256(position.margin) + unrealizedPnl + fundingPayment;\n        marginRatio = totalValue <= 0 ? 0 : (uint256(totalValue) * BASIS_POINTS) / position.size;\n\n        // Calculate liquidation price\n        uint256 liquidationThreshold = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\n        if (position.isLong) {\n            liquidationPrice =\n                position.entryPrice -\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\n        } else {\n            liquidationPrice =\n                position.entryPrice +\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\n        }\n\n        isLiquidatable = marginRatio <= market.liquidationThreshold;\n    }\n\n    // Receive function for native token deposits\n    receive() external payable {\n        // Only accept payments for insurance fund\n        insuranceFundBalance += msg.value;\n        emit InsuranceFundUpdated(insuranceFundBalance - msg.value, insuranceFundBalance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}