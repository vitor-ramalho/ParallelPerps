{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/interfaces/IAggregatorModule.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Structs} from \"../structs/Structs.sol\";\n\n// -- Aggregators: an abstraction over feeds to allow for reconfiguration --\ninterface IAggregatorModule {\n    event AggregatorCreated(\n        bytes32 indexed aggregatorId,\n        bytes32 indexed feedId,\n        address authority\n    );\n    event AggregatorConfigured(\n        bytes32 indexed aggregatorId,\n        string name,\n        uint256 toleratedDelta,\n        bytes32 cid,\n        uint64 maxVariance,\n        uint32 minResponses\n    );\n    event AggregatorAuthoritySet(\n        bytes32 indexed aggregatorId,\n        address indexed authority\n    );\n\n    /**\n     * Create a new aggregator\n     * @param aggregator The aggregator to create\n     */\n    function createAggregator(Structs.Aggregator calldata aggregator) external;\n\n    /**\n     * Set the config for an aggregator\n     * @dev Only the authority of the aggregator can set the config\n     * @param aggregatorId The aggregatorId to set the config for\n     * @param name The name of the aggregator\n     * @param toleratedDelta The maximum staleness blocks for a valid feed result (or seconds if the queue has a time feed)\n     * @param cid The content id (IPFS cid for example) for the feed\n     * @param feedId The feedId associated with the aggregator\n     * @param maxVariance The maximum variance allowed for a feed result\n     * @param minResponses The minimum number of responses required for a valid feed result\n     * @param minSamples The minimum number of samples to take for a feed result\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\n     */\n    function setAggregatorConfig(\n        bytes32 aggregatorId,\n        string memory name,\n        uint256 toleratedDelta,\n        bytes32 cid,\n        bytes32 feedId,\n        uint64 maxVariance,\n        uint32 minResponses,\n        uint8 minSamples,\n        uint256 maxStaleness\n    ) external;\n\n    /**\n     * Set the authority for an aggregator\n     * @dev Only the authority of the aggregator can set a new authority\n     * @param aggregatorId The aggregatorId to set the authority for\n     * @param authority The new authority to set for the aggregator\n     */\n    function setAggregatorAuthority(\n        bytes32 aggregatorId,\n        address authority\n    ) external;\n\n    /**\n     * The aggregator to fetch\n     * @param aggregatorId The aggregatorId to get\n     */\n    function getAggregator(\n        bytes32 aggregatorId\n    )\n        external\n        view\n        returns (Structs.Aggregator memory, Structs.Update[] memory);\n\n    /**\n     * Get all aggregators\n     */\n    function getAllAggregators()\n        external\n        view\n        returns (Structs.Aggregator[] memory, Structs.Update[][] memory);\n\n    /**\n     * Get the results for a feed\n     * @param feedId The feedId to get the results for\n     * @return The results for the feed\n     */\n    function getAggregatorResults(\n        bytes32 feedId\n    ) external view returns (Structs.Update[] memory);\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/interfaces/IOracleModule.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Structs} from \"../structs/Structs.sol\";\n\n// -- Oracle: an entity that can provide updates for feeds on a queue --\ninterface IOracleModule {\n    /**\n     * Get oracles associated with an address\n     * @param queueId the queue\n     * @param oracleAddress the address of the oracle\n     * @return oracleAddress the oracle associated with the address\n     */\n    function getOracleByAddress(\n        bytes32 queueId,\n        address oracleAddress\n    ) external view returns (Structs.Oracle memory);\n\n    /**\n     * Get an oracle\n     * @param queueId The queueId associated with the oracle\n     * @param oracleId The oracleId corresponding to the oracle\n     * @return The oracle associated with the queueId and oracleId\n     */\n    function getOracle(\n        bytes32 queueId,\n        bytes32 oracleId\n    ) external view returns (Structs.Oracle memory);\n\n    /**\n     * Get all oracles associated with a queue\n     * @param queueId The queueId to get the oracles for\n     * @return The oracles associated with the queue\n     */\n    function getAllOracles(\n        bytes32 queueId\n    ) external view returns (Structs.Oracle[] memory);\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/interfaces/IQueueModule.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Structs} from \"../structs/Structs.sol\";\n\n// -- Queues: switchboard subnets (each with its own set of oracles) --\ninterface IQueueModule {\n    event QueueCreated(bytes32 queueId, address authority);\n    event QueueConfigSet(\n        bytes32 queueId,\n        string name,\n        uint256 fee,\n        uint8 minAttestations,\n        uint256 toleratedTimestampDelta,\n        uint8 resultsMaxSize,\n        uint256 oracleValidityLength,\n        uint256 toleratedBlocksStaleness\n    );\n    event QueueAuthoritySet(bytes32 queueId, address authority);\n    event QueueMrEnclaveAdded(bytes32 queueId, bytes32 mrEnclave);\n    event QueueMrEnclaveRemoved(bytes32 queueId, bytes32 mrEnclave);\n    event QueueOraclesOverridden(bytes32 queueId);\n\n    /**\n     * Create a new queue\n     * @param queue The queue to create\n     * @param oracles The initial set of oracles associated with the queue\n     */\n    function createQueue(\n        Structs.Queue calldata queue,\n        Structs.Oracle[] calldata oracles\n    ) external;\n\n    /**\n     * Set the config for a queue\n     * @dev Only the authority of the queue can set the config\n     * @param queueId the queueId to set the config for\n     * @param name name of the queue\n     * @param fee fee required to submit an update to the queue\n     * @param minAttestations minimum number of attestations required for adding an oracle the queue\n     * @param toleratedTimestampDelta default maximum staleness blocks for a valid feed result\n     * @param resultsMaxSize maximum size of the results array for feeds\n     * @param oracleValidityLength length of time an oracle is valid for\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\n     */\n    function setQueueConfig(\n        bytes32 queueId,\n        string memory name,\n        uint256 fee,\n        uint8 minAttestations,\n        uint256 toleratedTimestampDelta,\n        uint8 resultsMaxSize,\n        uint256 oracleValidityLength,\n        uint256 toleratedBlocksStaleness\n    ) external;\n\n    /**\n     * Set the authority for a queue\n     * @dev Only the authority of the queue can set a new authority\n     * @param queueId The queueId to set the authority for\n     * @param authority The new authority to set for the queue\n     */\n    function setQueueAuthority(bytes32 queueId, address authority) external;\n\n    /**\n     * Add an enclave measurement to a queue\n     * @dev Only the authority of the queue can set the mrEnclave\n     * @param queueId The queueId to set the mrEnclave for\n     * @param mrEnclave The mrEnclave to set for the queue\n     */\n    function addQueueMrEnclave(bytes32 queueId, bytes32 mrEnclave) external;\n\n    /**\n     * Remove an enclave measurement from a queue\n     * @dev Only the authority of the queue can remove the mrEnclave\n     * @param queueId The queueId to remove the mrEnclave from\n     * @param mrEnclave The mrEnclave to remove\n     */\n    function removeQueueMrEnclave(bytes32 queueId, bytes32 mrEnclave) external;\n\n    /**\n     * Get the mrEnclaves associated with a queue\n     * @param queueId The queueId to get the mrEnclaves for\n     * @return The mrEnclaves associated with the queue\n     */\n    function getQueueMrEnclaves(\n        bytes32 queueId\n    ) external view returns (bytes32[] memory);\n\n    /**\n     * Set the oracle queue manually (override the oracles array)\n     * @dev Should only be dao controlled\n     * @param queueId The queueId to set the oracles for\n     * @param oracles The oracles to set for the queue\n     */\n    function queueOverride(\n        bytes32 queueId,\n        bytes32[] calldata mrEnclaves,\n        Structs.Oracle[] calldata oracles\n    ) external;\n\n    /**\n     * Get a queue\n     * @param queueId The queueId to get\n     */\n    function getQueue(\n        bytes32 queueId\n    ) external view returns (Structs.Queue memory);\n\n    /**\n     * Get all queues\n     * @return The queues associated with the queueId\n     */\n    function getAllQueues() external view returns (Structs.Queue[] memory);\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/interfaces/IRandomnessModule.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Structs} from \"../structs/Structs.sol\";\n\n// -- Randomness: enclave-sourced randomness from an oracle on a queue --\ninterface IRandomnessModule {\n    event RandomnessRequested(\n        bytes32 indexed randomnessId,\n        address indexed authority,\n        bytes32 queueId,\n        uint64 minSettlementDelay,\n        bytes32 indexed oracleId\n    );\n\n    event RandomnessRerolled(\n        bytes32 indexed randomnessId,\n        bytes32 indexed oracleId\n    );\n\n    /**\n     * Request randomness from Switchboard from an Oracle on the queue\n     * @param randomnessId The randomness id, which must be unique, is used to identify the randomness request\n     * @param authority The authority (contract or EOA) that is in charge of providing the randomness\n     * @param queueId The queue id that the randomness is associated with\n     * @param minSettlementDelay The minimum delay before the randomness can be settled\n     */\n    function requestRandomness(\n        bytes32 randomnessId,\n        address authority,\n        bytes32 queueId,\n        uint64 minSettlementDelay\n    ) external;\n\n    /**\n     * Request randomness from Switchboard from an Oracle on the queue\n     * @param randomnessId The randomness id, which must be unique, is used to identify the randomness request\n     * @param authority The authority (contract or EOA) that is in charge of providing the randomness\n     * @param queueId The queue id that the randomness is associated with\n     * @param minSettlementDelay The minimum delay before the randomness can be settled\n     * @param oracleId The oracle id that must respond to the request\n     */\n    function requestRandomness(\n        bytes32 randomnessId,\n        address authority,\n        bytes32 queueId,\n        uint64 minSettlementDelay,\n        bytes32 oracleId\n    ) external;\n\n    /**\n     * Reroll randomness (to reuse existing randomness objects for new randomness requests)\n     * @dev caller must be the authority for the randomness\n     * @param randomnessId The randomness id\n     */\n    function rerollRandomness(bytes32 randomnessId) external;\n\n    /**\n     * Reroll randomness (to reuse existing randomness objects for new randomness requests)\n     * @dev caller must be the authority for the randomness\n     * @param randomnessId The randomness id\n     * @param oracleId The oracle id to specifically reroll randomness from\n     */\n    function rerollRandomness(bytes32 randomnessId, bytes32 oracleId) external;\n\n    /**\n     * Get randomness by id\n     * @param randomnessId The randomness id\n     * @return randomness The randomness object\n     */\n    function getRandomness(\n        bytes32 randomnessId\n    ) external view returns (Structs.Randomness memory);\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/interfaces/ISwitchboardModule.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\nimport {Structs} from \"../structs/Structs.sol\";\n\n// -- Switchboard: the main contract for the Switchboard protocol  --\ninterface ISwitchboardModule {\n    event FeedUpdate(\n        bytes32 indexed feedId,\n        bytes32 indexed oracleId,\n        uint256 timestamp,\n        int128 result\n    );\n    event OracleAdded(\n        bytes32 indexed queueId,\n        bytes32 indexed oracleId,\n        address indexed oracleAddress\n    );\n    event OracleRemoved(bytes32 indexed queueId, bytes32 indexed oracleId);\n    event RandomnessSettled(\n        bytes32 indexed randomnessId,\n        bytes32 indexed oracleId,\n        uint256 timestamp,\n        uint256 result\n    );\n\n    /**\n     * Get the latest Update struct for a feed\n     * @dev Intended to be called within the same transaction as a feed update for the most up-to-date data.\n     * @dev Reverts if the feed does not exist\n     * @dev Reverts if the feed does not have a valid update within queue (or aggregator's) tolerated delta\n     * @dev Reverts if the feed does not have the minimum number of valid responses\n     * @param feedId The identifier for the feed to get the latest update for\n     * @return Update The latest update for the given feed\n     */\n    function latestUpdate(\n        bytes32 feedId\n    ) external view returns (Structs.Update memory);\n\n    /**\n     * Calculate\n     * @param aggregatorId The feed identifier to calculate the current result for\n     * @return CurrentResult The current result for the given feed, a struct containing stats and the result\n     */\n    function findCurrentResult(\n        bytes32 aggregatorId\n    ) external view returns (Structs.CurrentResult memory);\n\n    /**\n     * Get the fee in wei for submitting a set of updates\n     * @param updates Encoded switchboard update(s) with signatures\n     * @return uint256 The fee in wei for submitting the updates\n     */\n    function getFee(bytes[] calldata updates) external view returns (uint256);\n\n    /**\n     * Update feeds with new oracle results\n     * @dev reverts if the queue's fee is not paid\n     * @dev reverts if the blockhash is invalid (i.e. the block is in the future)\n     * @dev reverts if the timestamp is out of valid range (optional flow for timestamp-sequenced updates)\n     * @param updates Encoded switchboard update(s) with signatures\n     */\n    function updateFeeds(bytes[] calldata updates) external payable;\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/ISwitchboard.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\nimport {IAggregatorModule} from \"./interfaces/IAggregatorModule.sol\";\nimport {IOracleModule} from \"./interfaces/IOracleModule.sol\";\nimport {IRandomnessModule} from \"./interfaces/IRandomnessModule.sol\";\nimport {ISwitchboardModule} from \"./interfaces/ISwitchboardModule.sol\";\nimport {IQueueModule} from \"./interfaces/IQueueModule.sol\";\n\ninterface ISwitchboard is\n    IAggregatorModule,\n    IOracleModule,\n    IRandomnessModule,\n    ISwitchboardModule,\n    IQueueModule\n{}\n"
    },
    "@switchboard-xyz/on-demand-solidity/Structs.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\ncontract Structs {\n    /**\n     * An update to a feed\n     * @param oracleId The publisher of the update\n     * @param result The result of the update\n     * @param timestamp The timestamp of the update\n     */\n    struct Update {\n        bytes32 oracleId;\n        int128 result;\n        uint256 timestamp;\n    }\n\n    /**\n     * The current result for a feed\n     * @param result The result of the feed\n     * @param minTimestamp The minimum timestamp of the feed\n     * @param maxTimestamp The maximum timestamp of the feed\n     * @param minResult The minimum result of the feed\n     * @param maxResult The maximum result of the feed\n     * @param stdev The standard deviation of the feed\n     * @param range The range of the feed\n     * @param mean The mean of the feed\n     */\n    struct CurrentResult {\n        int128 result;\n        uint256 minTimestamp;\n        uint256 maxTimestamp;\n        int128 minResult;\n        int128 maxResult;\n        int128 stdev;\n        int128 range;\n        int128 mean;\n    }\n\n    /**\n     * Results for a feed\n     * @param idx The index of the feed\n     * @param updates The updates for the feed\n     */\n    struct Results {\n        uint256 idx;\n        Update[] updates;\n    }\n\n    /**\n     * An abstraction over feed allowing for UI to display the feed in a more human readable way and reconfiguration of sources.\n     * Reading from this struct should be atomic (same tx as the write).\n     * @param aggregatorId The aggregator id\n     * @param authority The authority of the feed\n     * @param name The name of the feed\n     * @param queueId The queue id associated with the feed\n     * @param toleratedDelta The maximum blocks staleness\n     * @param cid The content id (IPFS cid for example) for the feed\n     * @param feedHash The feed associated with the aggregator\n     * @param createdAt The time the feed was created\n     * @param maxVariance The maximum variance allowed for a feed result\n     * @param minResponses The minimum number of responses required for a valid feed result\n     * @param minSamples The minimum number of samples to take for a feed result\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\n     */\n    struct Aggregator {\n        bytes32 aggregatorId;\n        address authority;\n        string name;\n        bytes32 queueId;\n        uint256 toleratedDelta;\n        bytes32 cid;\n        bytes32 feedHash;\n        uint256 createdAt;\n        uint64 maxVariance;\n        uint32 minResponses;\n        uint8 minSamples;\n        uint256 maxStaleness;\n    }\n\n    /**\n     * Queue / Switchboard Subnet\n     * @param queueId The queue id\n     * @param authority The authority of the queue\n     * @param name The name of the queue\n     * @param fee The fee required to submit an update to the queue\n     * @param feeRecipient The recipient of the fee (OPTIONAL - if unset the oracle is the recipient)\n     * @param minAttestations size * (1 / minAttestations) + 1 is the minimum number of oracles required to attest to a registration\n     * @param toleratedTimestampDelta The default maximum staleness for a valid feed result\n     * @param resultsMaxSize The maximum size of the results array\n     * @param oracleValidityLength The length of time an oracle is valid for\n     * @param mrEnclaves The enclave measurements allowed by the queue\n     * @param oracles The oracles associated with the queue\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\n     * @param lastQueueOverride The last time the queue was overridden\n     * @param guardianQueueId The guardian queue id\n     */\n    struct Queue {\n        bytes32 queueId;\n        address authority;\n        string name;\n        uint256 fee;\n        address feeRecipient;\n        uint64 minAttestations;\n        uint256 toleratedTimestampDelta;\n        uint8 resultsMaxSize;\n        uint256 oracleValidityLength;\n        bytes32[] mrEnclaves;\n        bytes32[] oracles;\n        uint256 toleratedBlocksStaleness;\n        uint256 lastQueueOverride;\n        bytes32 guardianQueueId;\n    }\n\n    /**\n     * Oracle - A more dense version of the oracle\n     * @param authority the oracle's enclave secp key\n     * @param owner the owner of the oracle\n     * @param oracleId the oracle's id (hexified pubkey from solana)\n     * @param queueId the queue that the oracle belongs to\n     * @param mrEnclave the oracle's enclave measurement\n     * @param expirationTime the time the oracle expires\n     * @param feesOwed the fees owed to the oracle\n     */\n    struct Oracle {\n        address authority;\n        address owner;\n        bytes32 oracleId;\n        bytes32 queueId;\n        bytes32 mrEnclave;\n        uint256 expirationTime;\n        uint256 feesOwed;\n    }\n\n    /**\n     * Pending Oracle Registration\n     * @param oracle The oracle to be registered\n     * @param attestingOracle The oracle attesting to the registration\n     */\n    struct OracleAttestation {\n        address oracleAuthority;\n        bytes32 oracleId;\n        bytes32 attestingOracle;\n        uint256 timestamp;\n        bytes32 mrEnclave;\n    }\n\n    /**\n     * Randomness - a message resolving randomness\n     * @param randId The randomness id\n     * @param queueId The queue id\n     * @param createdAt The time the randomness was created\n     * @param authority The authority of the randomness\n     * @param rollTimestamp The timestamp of the latest roll\n     * @param minSettlementDelay The minimum settlement delay seconds\n     * @param result The value of the randomness (uint256)\n     */\n    struct Randomness {\n        bytes32 randId;\n        bytes32 queueId;\n        uint256 createdAt;\n        address authority;\n        uint256 rollTimestamp;\n        uint64 minSettlementDelay;\n        RandomnessResult result;\n    }\n\n    /**\n     * Randomness Result\n     * @param oracleId The oracle id\n     * @param oracleAuthority The authority of the oracle that provided the randomness\n     * @param value The value of the randomness\n     * @param settledAt The time the randomness was settled\n     */\n    struct RandomnessResult {\n        bytes32 oracleId;\n        address oracleAuthority;\n        uint256 value;\n        uint256 settledAt;\n    }\n\n    /**\n     * Attestations\n     * @param list The list of pending attestations\n     */\n    struct Attestations {\n        OracleAttestation[] list;\n    }\n}\n"
    },
    "@switchboard-xyz/on-demand-solidity/structs/Structs.sol": {
      "content": "//SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.0 <0.9.0;\n\ncontract Structs {\n    /**\n     * An update to a feed\n     * @param oracleId The publisher of the update\n     * @param result The result of the update\n     * @param timestamp The timestamp of the update\n     */\n    struct Update {\n        bytes32 oracleId;\n        int128 result;\n        uint256 timestamp;\n    }\n\n    /**\n     * The current result for a feed\n     * @param result The result of the feed\n     * @param minTimestamp The minimum timestamp of the feed\n     * @param maxTimestamp The maximum timestamp of the feed\n     * @param minResult The minimum result of the feed\n     * @param maxResult The maximum result of the feed\n     * @param stdev The standard deviation of the feed\n     * @param range The range of the feed\n     * @param mean The mean of the feed\n     */\n    struct CurrentResult {\n        int128 result;\n        uint256 minTimestamp;\n        uint256 maxTimestamp;\n        int128 minResult;\n        int128 maxResult;\n        int128 stdev;\n        int128 range;\n        int128 mean;\n    }\n\n    /**\n     * Results for a feed\n     * @param idx The index of the feed\n     * @param updates The updates for the feed\n     */\n    struct Results {\n        uint256 idx;\n        Update[] updates;\n    }\n\n    /**\n     * An abstraction over feed allowing for UI to display the feed in a more human readable way and reconfiguration of sources.\n     * Reading from this struct should be atomic (same tx as the write).\n     * @param aggregatorId The aggregator id\n     * @param authority The authority of the feed\n     * @param name The name of the feed\n     * @param queueId The queue id associated with the feed\n     * @param toleratedDelta The maximum blocks staleness\n     * @param cid The content id (IPFS cid for example) for the feed\n     * @param feedHash The feed associated with the aggregator\n     * @param createdAt The time the feed was created\n     * @param maxVariance The maximum variance allowed for a feed result\n     * @param minResponses The minimum number of responses required for a valid feed result\n     * @param minSamples The minimum number of samples to take for a feed result\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\n     */\n    struct Aggregator {\n        bytes32 aggregatorId;\n        address authority;\n        string name;\n        bytes32 queueId;\n        uint256 toleratedDelta;\n        bytes32 cid;\n        bytes32 feedHash;\n        uint256 createdAt;\n        uint64 maxVariance;\n        uint32 minResponses;\n        uint8 minSamples;\n        uint256 maxStaleness;\n    }\n\n    /**\n     * Queue / Switchboard Subnet\n     * @param queueId The queue id\n     * @param authority The authority of the queue\n     * @param name The name of the queue\n     * @param fee The fee required to submit an update to the queue\n     * @param feeRecipient The recipient of the fee (OPTIONAL - if unset the oracle is the recipient)\n     * @param minAttestations size * (1 / minAttestations) + 1 is the minimum number of oracles required to attest to a registration\n     * @param toleratedTimestampDelta The default maximum staleness for a valid feed result\n     * @param resultsMaxSize The maximum size of the results array\n     * @param oracleValidityLength The length of time an oracle is valid for\n     * @param mrEnclaves The enclave measurements allowed by the queue\n     * @param oracles The oracles associated with the queue\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\n     * @param lastQueueOverride The last time the queue was overridden\n     * @param guardianQueueId The guardian queue id\n     */\n    struct Queue {\n        bytes32 queueId;\n        address authority;\n        string name;\n        uint256 fee;\n        address feeRecipient;\n        uint64 minAttestations;\n        uint256 toleratedTimestampDelta;\n        uint8 resultsMaxSize;\n        uint256 oracleValidityLength;\n        bytes32[] mrEnclaves;\n        bytes32[] oracles;\n        uint256 toleratedBlocksStaleness;\n        uint256 lastQueueOverride;\n        bytes32 guardianQueueId;\n    }\n\n    /**\n     * Oracle - A more dense version of the oracle\n     * @param authority the oracle's enclave secp key\n     * @param owner the owner of the oracle\n     * @param oracleId the oracle's id (hexified pubkey from solana)\n     * @param queueId the queue that the oracle belongs to\n     * @param mrEnclave the oracle's enclave measurement\n     * @param expirationTime the time the oracle expires\n     * @param feesOwed the fees owed to the oracle\n     */\n    struct Oracle {\n        address authority;\n        address owner;\n        bytes32 oracleId;\n        bytes32 queueId;\n        bytes32 mrEnclave;\n        uint256 expirationTime;\n        uint256 feesOwed;\n    }\n\n    /**\n     * Pending Oracle Registration\n     * @param oracle The oracle to be registered\n     * @param attestingOracle The oracle attesting to the registration\n     */\n    struct OracleAttestation {\n        address oracleAuthority;\n        bytes32 oracleId;\n        bytes32 attestingOracle;\n        uint256 timestamp;\n        bytes32 mrEnclave;\n    }\n\n    /**\n     * Randomness - a message resolving randomness\n     * @param randId The randomness id\n     * @param queueId The queue id\n     * @param createdAt The time the randomness was created\n     * @param authority The authority of the randomness\n     * @param rollTimestamp The timestamp of the latest roll\n     * @param minSettlementDelay The minimum settlement delay seconds\n     * @param result The value of the randomness (uint256)\n     */\n    struct Randomness {\n        bytes32 randId;\n        bytes32 queueId;\n        uint256 createdAt;\n        address authority;\n        uint256 rollTimestamp;\n        uint64 minSettlementDelay;\n        RandomnessResult result;\n    }\n\n    /**\n     * Randomness Result\n     * @param oracleId The oracle id\n     * @param oracleAuthority The authority of the oracle that provided the randomness\n     * @param value The value of the randomness\n     * @param settledAt The time the randomness was settled\n     */\n    struct RandomnessResult {\n        bytes32 oracleId;\n        address oracleAuthority;\n        uint256 value;\n        uint256 settledAt;\n    }\n\n    /**\n     * Attestations\n     * @param list The list of pending attestations\n     */\n    struct Attestations {\n        OracleAttestation[] list;\n    }\n}\n"
    },
    "contracts/perps/HasMonCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IPerpEngine {\n    function updateCollateral(address user, uint256 amount, bool isDeposit) external;\n}\n\ncontract HasMonCollateral is Ownable {\n    IERC20 public hasMON;\n    IPerpEngine public perpEngine;\n    mapping(address => uint256) public collateralBalances;\n\n    event CollateralDeposited(address indexed user, uint256 amount);\n    event CollateralWithdrawn(address indexed user, uint256 amount);\n    event PerpEngineSet(address perpEngine);\n\n    constructor(address _hasMON) Ownable(msg.sender) {\n        hasMON = IERC20(_hasMON);\n    }\n\n    function setPerpEngine(address _perpEngine) external onlyOwner {\n        require(address(perpEngine) == address(0), \"PerpEngine already set\");\n        perpEngine = IPerpEngine(_perpEngine);\n        emit PerpEngineSet(_perpEngine);\n    }\n\n    function depositCollateral(uint256 amount) external {\n        require(amount > 0, \"Deposit amount must be greater than zero\");\n        require(hasMON.transferFrom(msg.sender, address(this), amount), \"Transfer failed\");\n\n        collateralBalances[msg.sender] += amount;\n        perpEngine.updateCollateral(msg.sender, amount, true);\n\n        emit CollateralDeposited(msg.sender, amount);\n    }\n\n    function withdrawCollateral(uint256 amount) external {\n        require(amount > 0, \"Withdraw amount must be greater than zero\");\n        require(collateralBalances[msg.sender] >= amount, \"Insufficient collateral\");\n\n        collateralBalances[msg.sender] -= amount;\n        perpEngine.updateCollateral(msg.sender, amount, false);\n\n        require(hasMON.transfer(msg.sender, amount), \"Transfer failed\");\n\n        emit CollateralWithdrawn(msg.sender, amount);\n    }\n}\n"
    },
    "contracts/perps/PerpEngine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IHasMonCollateral {\n    function collateralBalances(address user) external view returns (uint256);\n}\n\ncontract PerpEngine is Ownable {\n    struct Position {\n        uint256 size;\n        uint256 entryPrice;\n        bool isLong;\n    }\n\n    IHasMonCollateral public hasMonCollateral;\n    address public oracle;\n    mapping(address => Position) public positions;\n    mapping(address => uint256) public fundingRates;\n\n    event PositionOpened(address indexed user, uint256 size, uint256 entryPrice, bool isLong);\n    event PositionClosed(address indexed user, uint256 exitPrice, int256 pnl);\n    event Liquidated(address indexed user);\n    event FundingRateUpdated(address indexed user, uint256 newFundingRate);\n\n    constructor(address _hasMonCollateral) Ownable(msg.sender) {\n        // oracle = _oracle;\n        hasMonCollateral = IHasMonCollateral(_hasMonCollateral);\n    }\n\n    function openPosition(uint256 size, uint256 entryPrice, bool isLong) external {\n        require(hasMonCollateral.collateralBalances(msg.sender) >= size, \"Insufficient collateral\");\n        positions[msg.sender] = Position(size, entryPrice, isLong);\n        emit PositionOpened(msg.sender, size, entryPrice, isLong);\n    }\n\n    function closePosition(uint256 exitPrice) external {\n        Position memory position = positions[msg.sender];\n        require(position.size > 0, \"No open position\");\n\n        int256 pnl = calculatePnL(position, exitPrice);\n        delete positions[msg.sender];\n\n        emit PositionClosed(msg.sender, exitPrice, pnl);\n    }\n\n    function liquidate(address user, uint256 liquidationPrice) external onlyOwner {\n        Position memory position = positions[user];\n        require(position.size > 0, \"No open position to liquidate\");\n\n        delete positions[user];\n        emit Liquidated(user);\n    }\n\n    function updateFundingRate(address user, uint256 newFundingRate) external onlyOwner {\n        fundingRates[user] = newFundingRate;\n        emit FundingRateUpdated(user, newFundingRate);\n    }\n\n    function calculatePnL(Position memory position, uint256 exitPrice) internal pure returns (int256) {\n        if (position.isLong) {\n            return int256(position.size * (exitPrice - position.entryPrice));\n        } else {\n            return int256(position.size * (position.entryPrice - exitPrice));\n        }\n    }\n}\n"
    },
    "contracts/perps/PerpetualTrading.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract PerpetualTrading is Ownable, ReentrancyGuard {\n    // Market structure\n    struct Market {\n        bytes32 marketId;\n        address baseToken;\n        uint256 maxLeverage;\n        uint256 maintenanceMargin;\n        uint256 liquidationFee;\n        uint256 fundingRateMultiplier;\n        uint256 lastFundingTime;\n        int256 cumulativeFundingRate;\n        uint256 openInterestLong;\n        uint256 openInterestShort;\n        bool isActive;\n    }\n\n    // Position structure\n    struct Position {\n        uint256 size;\n        uint256 margin;\n        uint256 entryPrice;\n        int256 entryFundingRate;\n        bool isLong;\n        uint256 lastUpdateTime;\n    }\n\n    // Mappings\n    mapping(bytes32 => Market) public markets;\n    mapping(address => mapping(bytes32 => Position)) public positions;\n    mapping(address => uint256) public collateralBalances;\n\n    uint256 public price;\n\n    // Insurance fund\n    uint256 public insuranceFund;\n    bytes32[] public marketIds;\n\n    // Events\n    event MarketCreated(bytes32 indexed marketId, address baseToken);\n    event PositionOpened(address indexed trader, bytes32 indexed marketId, uint256 size, uint256 margin, bool isLong);\n    event PositionClosed(address indexed trader, bytes32 indexed marketId, uint256 pnl);\n    event PositionLiquidated(address indexed trader, bytes32 indexed marketId, uint256 deficit);\n    event FundingRateUpdated(bytes32 indexed marketId, int256 fundingRate);\n\n    constructor() Ownable(msg.sender) {}\n\n    function createMarket(\n        bytes32 _marketId,\n        address _baseToken,\n        uint256 _maxLeverage,\n        uint256 _maintenanceMargin,\n        uint256 _liquidationFee,\n        uint256 _fundingRateMultiplier\n    ) external onlyOwner {\n        require(!markets[_marketId].isActive, \"Market already exists\");\n\n        markets[_marketId] = Market({\n            marketId: _marketId,\n            baseToken: _baseToken,\n            maxLeverage: _maxLeverage,\n            maintenanceMargin: _maintenanceMargin,\n            liquidationFee: _liquidationFee,\n            fundingRateMultiplier: _fundingRateMultiplier,\n            lastFundingTime: block.timestamp,\n            cumulativeFundingRate: 0,\n            openInterestLong: 0,\n            openInterestShort: 0,\n            isActive: true\n        });\n\n        emit MarketCreated(_marketId, _baseToken);\n    }\n\n    function getAllMarkets() external view returns (Market[] memory) {\n        uint256 marketCount = 0;\n        for (uint256 i = 0; i < marketIds.length; i++) {\n            if (markets[marketIds[i]].isActive) {\n                marketCount++;\n            }\n        }\n\n        Market[] memory activeMarkets = new Market[](marketCount);\n        uint256 index = 0;\n        for (uint256 i = 0; i < marketIds.length; i++) {\n            if (markets[marketIds[i]].isActive) {\n                activeMarkets[index] = markets[marketIds[i]];\n                index++;\n            }\n        }\n\n        return activeMarkets;\n    }\n\n    function depositCollateral(uint256 _amount) external nonReentrant {\n        IERC20(markets[bytes32(0)].baseToken).transferFrom(msg.sender, address(this), _amount);\n        collateralBalances[msg.sender] += _amount;\n    }\n\n    function withdrawCollateral(uint256 _amount) external nonReentrant {\n        require(collateralBalances[msg.sender] >= _amount, \"Insufficient balance\");\n\n        // Check if withdrawal doesn't cause positions to be under-collateralized\n        // Implementation needed\n\n        collateralBalances[msg.sender] -= _amount;\n        IERC20(markets[bytes32(0)].baseToken).transfer(msg.sender, _amount);\n    }\n\n    function openPosition(\n        bytes32 _marketId,\n        uint256 _margin,\n        uint256 _leverage,\n        bool _isLong,\n        uint256 _price\n    ) external nonReentrant {\n        Market storage market = markets[_marketId];\n        require(market.isActive, \"Market not active\");\n        require(_leverage <= market.maxLeverage, \"Leverage too high\");\n        require(collateralBalances[msg.sender] >= _margin, \"Insufficient collateral\");\n\n        // Update funding rate\n        _updateFundingRate(_marketId);\n\n        // Calculate position size\n        uint256 size = _margin * _leverage;\n\n        // Update position\n        Position storage position = positions[msg.sender][_marketId];\n\n        // If position exists, close it first\n        if (position.size > 0) {\n            // Close existing position\n            // Implementation needed\n        }\n\n        // Create new position\n        position.size = size;\n        position.margin = _margin;\n        position.entryPrice = _price;\n        position.entryFundingRate = market.cumulativeFundingRate;\n        position.isLong = _isLong;\n        position.lastUpdateTime = block.timestamp;\n\n        // Update market open interest\n        if (_isLong) {\n            market.openInterestLong += size;\n        } else {\n            market.openInterestShort += size;\n        }\n\n        // Reduce collateral balance\n        collateralBalances[msg.sender] -= _margin;\n\n        emit PositionOpened(msg.sender, _marketId, size, _margin, _isLong);\n    }\n\n    function closePosition(bytes32 _marketId, uint256 _price) external nonReentrant {\n        Market storage market = markets[_marketId];\n        Position storage position = positions[msg.sender][_marketId];\n\n        require(position.size > 0, \"No position to close\");\n\n        // Update funding rate\n        _updateFundingRate(_marketId);\n\n        // Calculate PnL\n        int256 pnl = _calculatePnL(position, _price, market.cumulativeFundingRate);\n        uint256 marginToReturn = position.margin;\n\n        // Add PnL to margin (if positive) or deduct from margin (if negative)\n        if (pnl > 0) {\n            marginToReturn += uint256(pnl);\n        } else if (pnl < 0 && uint256(-pnl) < marginToReturn) {\n            marginToReturn -= uint256(-pnl);\n        } else {\n            marginToReturn = 0;\n        }\n\n        // Update market open interest\n        if (position.isLong) {\n            market.openInterestLong -= position.size;\n        } else {\n            market.openInterestShort -= position.size;\n        }\n\n        // Return remaining margin to collateral balance\n        collateralBalances[msg.sender] += marginToReturn;\n\n        // Reset position\n        delete positions[msg.sender][_marketId];\n\n        emit PositionClosed(msg.sender, _marketId, marginToReturn);\n    }\n\n    function liquidatePosition(address _trader, bytes32 _marketId, uint256 _price) external nonReentrant {\n        Market storage market = markets[_marketId];\n        Position storage position = positions[_trader][_marketId];\n\n        require(position.size > 0, \"No position to liquidate\");\n\n        // Update funding rate\n        _updateFundingRate(_marketId);\n\n        // Calculate PnL\n        int256 pnl = _calculatePnL(position, _price, market.cumulativeFundingRate);\n\n        // Check if position is liquidatable\n        uint256 currentMargin = pnl > 0\n            ? position.margin + uint256(pnl)\n            : (uint256(-pnl) >= position.margin ? 0 : position.margin - uint256(-pnl));\n\n        uint256 maintenanceAmount = (position.size * market.maintenanceMargin) / 10000; // Basis points\n\n        require(currentMargin < maintenanceAmount, \"Position not liquidatable\");\n\n        // Calculate liquidation fee\n        uint256 liquidationFee = (position.size * market.liquidationFee) / 10000; // Basis points\n\n        // Calculate deficit\n        uint256 deficit = 0;\n        if (currentMargin < liquidationFee) {\n            deficit = liquidationFee - currentMargin;\n            // Use insurance fund to cover deficit\n            if (insuranceFund >= deficit) {\n                insuranceFund -= deficit;\n            } else {\n                // Socialize losses if insurance fund is insufficient\n                // Implementation needed\n            }\n            currentMargin = 0;\n        } else {\n            currentMargin -= liquidationFee;\n        }\n\n        // Pay liquidation fee to liquidator\n        collateralBalances[msg.sender] += liquidationFee;\n\n        // Return remaining margin to trader\n        if (currentMargin > 0) {\n            collateralBalances[_trader] += currentMargin;\n        }\n\n        // Update market open interest\n        if (position.isLong) {\n            market.openInterestLong -= position.size;\n        } else {\n            market.openInterestShort -= position.size;\n        }\n\n        // Reset position\n        delete positions[_trader][_marketId];\n\n        emit PositionLiquidated(_trader, _marketId, deficit);\n    }\n\n    function _updateFundingRate(bytes32 _marketId) internal {\n        Market storage market = markets[_marketId];\n\n        // Skip if last update was too recent\n        if (block.timestamp - market.lastFundingTime < 1 hours) {\n            return;\n        }\n\n        // Calculate hours since last update\n        uint256 hoursElapsed = (block.timestamp - market.lastFundingTime) / 1 hours;\n\n        // Calculate premium index based on open interest imbalance\n        int256 premiumIndex = 0;\n        if (market.openInterestLong > 0 || market.openInterestShort > 0) {\n            premiumIndex = int256(\n                ((int256(market.openInterestLong) - int256(market.openInterestShort)) *\n                    int256(market.fundingRateMultiplier)) / int256(market.openInterestLong + market.openInterestShort)\n            );\n        }\n\n        // Update cumulative funding rate\n        market.cumulativeFundingRate += premiumIndex * int256(hoursElapsed);\n\n        // Update last funding time\n        market.lastFundingTime = block.timestamp;\n\n        emit FundingRateUpdated(_marketId, premiumIndex);\n    }\n\n    function _calculatePnL(\n        Position memory _position,\n        uint256 _currentPrice,\n        int256 _currentCumulativeFunding\n    ) internal pure returns (int256) {\n        // Calculate PnL from price movement\n        int256 pricePnL;\n        if (_position.isLong) {\n            pricePnL = int256(((_currentPrice * _position.size) / _position.entryPrice) - _position.size);\n        } else {\n            pricePnL = int256(_position.size - ((_currentPrice * _position.size) / _position.entryPrice));\n        }\n\n        // Calculate funding payment\n        int256 fundingPayment = (int256(_position.size) * (_currentCumulativeFunding - _position.entryFundingRate)) /\n            1e18;\n\n        // Longs pay funding when positive, shorts pay when negative\n        if (_position.isLong) {\n            return pricePnL - fundingPayment;\n        } else {\n            return pricePnL + fundingPayment;\n        }\n    }\n}\n"
    },
    "contracts/perps/SwitchboardOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport { ISwitchboard } from \"@switchboard-xyz/on-demand-solidity/ISwitchboard.sol\";\nimport { Structs } from \"@switchboard-xyz/on-demand-solidity/Structs.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title SwitchboardOracle\n * @dev Contract that integrates with Switchboard's data feeds for price oracle functionality\n */\ncontract SwitchboardOracle is Ownable {\n    // Mapping from market ID to Switchboard feed address\n    mapping(bytes32 => address) public priceFeeds;\n\n    // Mapping to store the decimals for each price feed\n    mapping(bytes32 => uint8) public feedDecimals;\n\n    // Heartbeat threshold in seconds (time before price is considered stale)\n    uint256 public stalePriceThreshold = 300; // 5 minutes\n\n    // Events\n    event PriceFeedSet(bytes32 indexed marketId, address indexed feedAddress, uint8 decimals);\n    event StalePriceThresholdUpdated(uint256 newThreshold);\n\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Sets a Switchboard price feed for a specific market\n     * @param marketId The ID of the market\n     * @param feedAddress The address of the Switchboard feed\n     * @param decimals The number of decimals used in the feed\n     */\n    function setPriceFeed(bytes32 marketId, address feedAddress, uint8 decimals) external onlyOwner {\n        require(feedAddress != address(0), \"Invalid feed address\");\n        priceFeeds[marketId] = feedAddress;\n        feedDecimals[marketId] = decimals;\n\n        emit PriceFeedSet(marketId, feedAddress, decimals);\n    }\n\n    /**\n     * @dev Updates the stale price threshold\n     * @param newThreshold New threshold in seconds\n     */\n    function setStalePriceThreshold(uint256 newThreshold) external onlyOwner {\n        stalePriceThreshold = newThreshold;\n\n        emit StalePriceThresholdUpdated(newThreshold);\n    }\n\n    /**\n     * @dev Gets the latest price from Switchboard for a specific market\n     * @param marketId The ID of the market\n     * @return price The latest price (normalized to 8 decimals)\n     * @return timestamp The timestamp of the latest update\n     */\n    function getPrice(bytes32 marketId) external view returns (uint256 price, uint256 timestamp) {\n        address feedAddress = priceFeeds[marketId];\n        require(feedAddress != address(0), \"Feed not found\");\n\n        // Get the latest result from Switchboard feed\n        int256 latestValue;\n        uint256 latestTimestamp;\n\n        try ISwitchboardFeed(feedAddress).latestResult() returns (int256 value, uint256 updatedAt) {\n            latestValue = value;\n            latestTimestamp = updatedAt;\n        } catch {\n            revert(\"Failed to fetch price from Switchboard\");\n        }\n\n        require(latestTimestamp > 0, \"Price not available\");\n        require(block.timestamp - latestTimestamp <= stalePriceThreshold, \"Price is stale\");\n\n        // Switchboard prices are stored as a scaled int256 depending on the feed's decimals\n        // We normalize to 8 decimals which is standard for price feeds in DeFi\n        if (latestValue >= 0) {\n            // Handle decimals conversion - standardize to 8 decimals\n            if (feedDecimals[marketId] > 8) {\n                price = uint256(latestValue) / (10 ** (feedDecimals[marketId] - 8));\n            } else if (feedDecimals[marketId] < 8) {\n                price = uint256(latestValue) * (10 ** (8 - feedDecimals[marketId]));\n            } else {\n                price = uint256(latestValue);\n            }\n\n            return (price, latestTimestamp);\n        } else {\n            revert(\"Negative price returned\");\n        }\n    }\n}\n\n/**\n * @title ISwitchboardFeed\n * @dev Interface for interacting with a Switchboard feed\n */\ninterface ISwitchboardFeed {\n    function latestResult() external view returns (int256 value, uint256 updatedAt);\n\n    function latestResultWithValidity() external view returns (int256 value, uint256 updatedAt, bool validity);\n}\n"
    },
    "contracts/staking/HasMon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title Hashed Monad Token (hasMON)\n/// @notice A derivative token representing staked MONAD\ncontract HasMon is ERC20, Ownable {\n    address public immutable stakingContract;\n\n    event StakingContractSet(address indexed stakingContract);\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address _stakingContract\n    ) ERC20(name, symbol) Ownable(msg.sender) {\n        stakingContract = _stakingContract;\n        emit StakingContractSet(_stakingContract);\n    }\n\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"HasMon: caller is not staking contract\");\n        _;\n    }\n\n    function mint(address _to, uint256 _amount) external onlyStakingContract {\n        require(_to != address(0), \"HasMon: mint to the zero address\");\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external onlyStakingContract {\n        require(_from != address(0), \"HasMon: burn from the zero address\");\n        require(balanceOf(_from) >= _amount, \"HasMon: burn amount exceeds balance\");\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/staking/MonStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./HasMon.sol\";\n\n/// @title Monad Staking Contract\n/// @notice Users stake MON (native currency) and receive hasMON as a staking derivative\ncontract MonStaking is ReentrancyGuard, Pausable, Ownable {\n    HasMon public immutable hasMonToken;\n\n    mapping(address => uint256) public stakedBalances;\n    uint256 public totalStaked;\n\n    uint256 public constant MIN_STAKE_AMOUNT = 1e15; // 0.001 MON\n    uint256 public constant MAX_STAKE_AMOUNT = 1000000e18; // 1M MON\n\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event RewardAdded(uint256 amount);\n    event EmergencyUnstake(address indexed user, uint256 amount);\n\n    constructor() Ownable(msg.sender) {\n        hasMonToken = new HasMon(\"Hashed Monad\", \"hasMON\", address(this));\n    }\n\n    function getHasMonBalance(address _user) public view returns (uint256) {\n        return hasMonToken.balanceOf(_user);\n    }\n\n    function getContractAddressBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Stake MON (native currency)\n    function stake() external payable nonReentrant whenNotPaused {\n        require(msg.value >= MIN_STAKE_AMOUNT, \"Stake amount too low\");\n        require(msg.value <= MAX_STAKE_AMOUNT, \"Stake amount too high\");\n        require(totalStaked + msg.value <= MAX_STAKE_AMOUNT, \"Total stake limit reached\");\n\n        hasMonToken.mint(msg.sender, msg.value);\n        stakedBalances[msg.sender] += msg.value;\n        totalStaked += msg.value;\n\n        emit Staked(msg.sender, msg.value);\n    }\n\n    /// @notice Unstake MON and burn hasMON\n    function unstake(uint256 _amount) external nonReentrant whenNotPaused {\n        require(_amount > 0, \"Cannot unstake 0\");\n        require(_amount <= stakedBalances[msg.sender], \"Insufficient balance\");\n        require(_amount <= address(this).balance, \"Insufficient contract balance\");\n\n        // Update state before external interactions\n        stakedBalances[msg.sender] -= _amount;\n        totalStaked -= _amount;\n\n        // Burn hasMON tokens before transfer\n        hasMonToken.burn(msg.sender, _amount);\n\n        // Transfer MON back to the user\n        (bool success, ) = payable(msg.sender).call{ value: _amount }(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Unstaked(msg.sender, _amount);\n    }\n\n    // @notice Emergency unstake all MON and\n    // burn hasMON tokens\n    function emergencyUnstake() external nonReentrant {\n        uint256 amount = stakedBalances[msg.sender];\n        require(amount > 0, \"No stake to withdraw\");\n\n        stakedBalances[msg.sender] = 0;\n        totalStaked -= amount;\n        hasMonToken.burn(msg.sender, amount);\n\n        (bool success, ) = payable(msg.sender).call{ value: amount }(\"\");\n        require(success, \"Transfer failed\");\n\n        emit EmergencyUnstake(msg.sender, amount);\n    }\n\n    // @notice Pause the contract\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    // @notice Unpause the contract\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /// @notice Allow contract to receive MON\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}