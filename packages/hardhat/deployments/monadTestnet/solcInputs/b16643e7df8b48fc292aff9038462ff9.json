{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/perps/HasMonCollateral.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title HasMonCollateral\n * @dev Contract for managing hasMON as collateral for perpetual trading\n */\ncontract HasMonCollateral is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    uint256 private constant MAX_ALLOCATION_PERCENTAGE = 9000; // 90% in basis points\n    uint256 private constant BASIS_POINTS = 10000;\n\n    bool public emergencyMode;\n    mapping(address => bool) public whitelist;\n\n    // State variables\n    IERC20 public hasMON;\n    address public perpEngine;\n    address public orderBook;\n\n    // Mapping of user balances\n    mapping(address => uint256) public userCollateral;\n    uint256 public totalCollateral;\n\n    // Fee accumulation\n    uint256 public accumulatedFees;\n    address public feeRecipient;\n\n    mapping(address => uint256) public allocatedCollateral; // Track allocated collateral\n    mapping(address => uint256) public lastUpdateTime;\n\n    // Events\n    event CollateralDeposited(address indexed user, uint256 amount);\n    event CollateralWithdrawn(address indexed user, uint256 amount);\n    event CollateralAllocated(address indexed user, uint256 amount);\n    event CollateralReleased(address indexed user, uint256 amount);\n    event FeesWithdrawn(uint256 amount);\n    event EmergencyModeEnabled(address indexed triggeredBy);\n    event WhitelistUpdated(address indexed user, bool status);\n    event PerpEngineUpdated(address indexed newPerpEngine);\n    event OrderBookUpdated(address indexed newOrderBook);\n\n    // Modifiers\n    modifier onlyPerpEngine() {\n        require(msg.sender == perpEngine, \"Only PerpEngine can call\");\n        _;\n    }\n\n    modifier onlyOrderBook() {\n        require(msg.sender == orderBook, \"Only OrderBook can call\");\n        _;\n    }\n\n    constructor(address _hasMON, address _feeRecipient) Ownable(msg.sender) {\n        hasMON = IERC20(_hasMON);\n        feeRecipient = _feeRecipient;\n    }\n\n    // Admin functions\n\n    function enableEmergencyMode() external onlyOwner {\n        emergencyMode = true;\n        emit EmergencyModeEnabled(msg.sender);\n    }\n\n    function updateWhitelist(address user, bool status) external onlyOwner {\n        whitelist[user] = status;\n        emit WhitelistUpdated(user, status);\n    }\n\n    function setPerpEngine(address _perpEngine) external onlyOwner {\n        require(_perpEngine != address(0), \"Invalid PerpEngine address\");\n        require(_perpEngine != perpEngine, \"Same address\");\n        perpEngine = _perpEngine;\n        emit PerpEngineUpdated(_perpEngine);\n    }\n\n    function setOrderBook(address _orderBook) external onlyOwner {\n        orderBook = _orderBook;\n    }\n\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\n        feeRecipient = _feeRecipient;\n    }\n\n    /**\n     * @dev Allows users to deposit hasMON as collateral\n     * @param amount The amount of hasMON to deposit\n     */\n    function depositCollateral(uint256 amount) external nonReentrant {\n        require(!emergencyMode, \"System is in emergency mode\");\n        require(amount > 0, \"Amount must be greater than 0\");\n\n        // Check allowance before transfer\n        require(hasMON.allowance(msg.sender, address(this)) >= amount, \"Insufficient allowance\");\n\n        // Update last action time\n        lastUpdateTime[msg.sender] = block.timestamp;\n\n        // Transfer hasMON from user to this contract\n        hasMON.safeTransferFrom(msg.sender, address(this), amount);\n\n        // Update user's collateral balance\n        userCollateral[msg.sender] += amount;\n        totalCollateral += amount;\n\n        emit CollateralDeposited(msg.sender, amount);\n    }\n\n    /**\n     * @dev Allows users to withdraw available hasMON collateral\n     * @param amount The amount of hasMON to withdraw\n     */\n    function withdrawCollateral(uint256 amount) external nonReentrant {\n        require(!emergencyMode || whitelist[msg.sender], \"Withdrawals restricted\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(userCollateral[msg.sender] >= amount, \"Insufficient collateral\");\n\n        // Check available collateral (not allocated)\n        uint256 available = userCollateral[msg.sender] - allocatedCollateral[msg.sender];\n        require(available >= amount, \"Collateral is allocated\");\n\n        // Update balances\n        userCollateral[msg.sender] -= amount;\n        totalCollateral -= amount;\n        lastUpdateTime[msg.sender] = block.timestamp;\n\n        // Transfer hasMON to user\n        hasMON.safeTransfer(msg.sender, amount);\n\n        emit CollateralWithdrawn(msg.sender, amount);\n    }\n\n    /**\n     * @dev Allocates collateral for a trading position (called by OrderBook/PerpEngine)\n     * @param user The user's address\n     * @param amount The amount to allocate\n     */\n    function allocateCollateral(address user, uint256 amount) external nonReentrant onlyPerpEngine {\n        require(userCollateral[user] >= amount, \"Insufficient collateral\");\n\n        // Check allocation limits\n        uint256 totalAllocated = allocatedCollateral[user] + amount;\n        uint256 maxAllowedAllocation = (userCollateral[user] * MAX_ALLOCATION_PERCENTAGE) / BASIS_POINTS;\n        require(totalAllocated <= maxAllowedAllocation, \"Exceeds max allocation\");\n\n        // Update user's allocated collateral\n        allocatedCollateral[user] += amount;\n        userCollateral[user] -= amount;\n\n        emit CollateralAllocated(user, amount);\n    }\n\n    /**\n     * @dev Releases collateral back to user after position closure (called by PerpEngine)\n     * @param user The user's address\n     * @param amount The amount to release\n     * @param pnl The profit/loss from the position (can be negative)\n     */\n    function releaseCollateral(address user, uint256 amount, int256 pnl) external nonReentrant onlyPerpEngine {\n        uint256 releaseAmount = amount;\n\n        // Handle profits (positive PnL)\n        if (pnl > 0) {\n            releaseAmount += uint256(pnl);\n        }\n        // Handle losses (negative PnL)\n        else if (pnl < 0) {\n            uint256 loss = uint256(-pnl);\n            if (loss >= amount) {\n                releaseAmount = 0;\n            } else {\n                releaseAmount -= loss;\n            }\n        }\n\n        // Update user's collateral\n        userCollateral[user] += releaseAmount;\n\n        emit CollateralReleased(user, releaseAmount);\n    }\n\n    /**\n     * @dev Processes trading fees (called by PerpEngine)\n     * @param amount Fee amount to process\n     */\n    function processFee(uint256 amount) external nonReentrant onlyPerpEngine {\n        require(amount > 0, \"Fee must be greater than 0\");\n\n        // Accumulate fees\n        accumulatedFees += amount;\n    }\n\n    /**\n     * @dev Withdraws accumulated fees to fee recipient (called by owner)\n     */\n    function withdrawFees() external onlyOwner {\n        require(accumulatedFees > 0, \"No fees to withdraw\");\n\n        uint256 amount = accumulatedFees;\n        accumulatedFees = 0;\n\n        // Transfer fees to recipient\n        hasMON.safeTransfer(feeRecipient, amount);\n\n        emit FeesWithdrawn(amount);\n    }\n\n    /**\n     * @dev Get user's available collateral\n     * @param user The user's address\n     * @return The amount of available collateral\n     */\n    function getAvailableCollateral(address user) external view returns (uint256) {\n        return userCollateral[user];\n    }\n\n    function getCollateralStatus(\n        address user\n    ) external view returns (uint256 total, uint256 allocated, uint256 available, uint256 lastAction) {\n        total = userCollateral[user];\n        allocated = allocatedCollateral[user];\n        available = total - allocated;\n        lastAction = lastUpdateTime[user];\n    }\n\n    function getSystemInfo()\n        external\n        view\n        returns (\n            uint256 totalCollateralAmount,\n            uint256 totalFeesAccumulated,\n            bool isEmergencyMode,\n            address engineAddress,\n            address bookAddress\n        )\n    {\n        return (totalCollateral, accumulatedFees, emergencyMode, perpEngine, orderBook);\n    }\n\n    function getMaxAllowedAllocation(address user) public view returns (uint256 maxAllowed, uint256 currentAllocated) {\n        maxAllowed = (userCollateral[user] * MAX_ALLOCATION_PERCENTAGE) / BASIS_POINTS;\n        currentAllocated = allocatedCollateral[user];\n    }\n}\n"
    },
    "contracts/perps/PerpEngine.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n\n/**\n * @title PerpEngine\n * @dev Core contract for perpetual trading with hasMON as collateral\n */\ncontract PerpEngine is Ownable, ReentrancyGuard {\n    // Constants\n    uint256 private constant PRECISION = 1e18;\n    uint256 private constant BASIS_POINTS = 10000;\n    uint256 private constant MAX_LEVERAGE = 100; // 100x max leverage\n    uint256 private constant MIN_LIQUIDATION_THRESHOLD = 50; // 50%\n    uint256 private constant LIQUIDATION_FEE = 500; // 5% in basis points\n    uint256 private constant PRICE_PRECISION = 1e10; // For Chainlink price conversion\n\n    // State\n    bool public emergencyMode;\n    uint256 public insuranceFundBalance;\n\n    // Structs with improvements\n    struct Position {\n        bool isOpen;\n        uint256 size; // Position size in USD (x10^18)\n        uint256 margin; // Initial margin in hasMON tokens\n        uint256 entryPrice; // Entry price in USD (x10^18)\n        int256 lastCumulativeFunding; // Funding state at entry\n        bool isLong; // Long or short position\n        uint32 leverage; // Leverage as an integer\n        uint32 marketIndex; // Index of the market\n        uint256 lastUpdateTime; // Last time position was updated\n    }\n\n    struct Market {\n        string symbol; // Market symbol (e.g., \"BTC-USD\")\n        address oracle; // Chainlink oracle address\n        uint256 maxLeverage; // Maximum allowed leverage\n        uint256 liquidationThreshold; // % of margin to trigger liquidation\n        uint256 fee; // Trading fee in bps\n        uint256 openInterestLong; // Total long positions USD\n        uint256 openInterestShort; // Total short positions USD\n        int256 cumulativeFunding; // Accumulated funding\n        uint256 lastFundingTime; // Last funding update\n        uint256 fundingInterval; // Funding rate interval\n        int256 maxFundingRate; // Max funding rate per interval\n        uint256 maxPositionSize; // Max position size per user\n        uint256 maxOpenInterest; // Max total open interest\n        uint256 minInitialMargin; // Minimum initial margin\n        bool isActive; // Market active status\n    }\n\n    struct FeeStructure {\n        uint256 makerFee; // Fee for makers (limit orders)\n        uint256 takerFee; // Fee for takers (market orders)\n        uint256 liquidationFee; // Fee for liquidators\n        uint256 protocolShare; // Protocol's share of fees\n    }\n\n    // State Variables\n    address public hasMonCollateral;\n    address public orderBook;\n    IERC20 public hasMON;\n    uint256 public minMargin;\n    uint256 public protocolFeeShare;\n    address public feeRecipient;\n\n    // Mappings\n    mapping(address => mapping(uint32 => Position)) public positions;\n    mapping(uint32 => Market) public markets;\n    mapping(uint32 => FeeStructure) public marketFees;\n    mapping(uint32 => bool) public marketPaused;\n    uint32 public marketCount;\n    // Events with improved details\n    event PositionOpened(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        uint256 margin,\n        bool isLong,\n        uint32 leverage,\n        uint256 entryPrice,\n        uint256 timestamp\n    );\n    event PositionClosed(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        int256 pnl,\n        uint256 exitPrice,\n        uint256 timestamp\n    );\n    event PositionLiquidated(\n        address indexed trader,\n        uint32 indexed marketIndex,\n        uint256 size,\n        address liquidator,\n        int256 pnl,\n        uint256 liquidationPrice\n    );\n    event MarketAdded(\n        uint32 indexed marketIndex,\n        string symbol,\n        address oracle,\n        uint256 maxLeverage,\n        uint256 maxPositionSize\n    );\n    event FundingUpdated(\n        uint32 indexed marketIndex,\n        int256 fundingRate,\n        uint256 openInterestLong,\n        uint256 openInterestShort\n    );\n    event EmergencyModeEnabled(address indexed triggeredBy, uint256 timestamp);\n    event MarketPaused(uint32 indexed marketIndex, bool isPaused);\n    event InsuranceFundUpdated(uint256 oldBalance, uint256 newBalance);\n    event OrderBookUpdated(address indexed newOrderBook);\n\n    // Enhanced modifiers\n    modifier notInEmergencyMode() {\n        require(!emergencyMode, \"System is in emergency mode\");\n        _;\n    }\n\n    modifier marketActive(uint32 marketIndex) {\n        require(markets[marketIndex].isActive, \"Market not active\");\n        require(!marketPaused[marketIndex], \"Market is paused\");\n        _;\n    }\n\n    modifier validPrice(uint256 price) {\n        require(price > 0, \"Invalid price\");\n        _;\n    }\n\n    modifier onlyOrderBook() {\n        require(msg.sender == orderBook, \"Only orderbook can call\");\n        _;\n    }\n\n    modifier marketExists(uint32 marketIndex) {\n        require(marketIndex < marketCount, \"Market does not exist\");\n        require(markets[marketIndex].oracle != address(0), \"Market not initialized\");\n        _;\n    }\n\n    modifier positionExists(address trader, uint32 marketIndex) {\n        require(positions[trader][marketIndex].isOpen, \"Position does not exist\");\n        _;\n    }\n\n    constructor(\n        address _hasMonCollateral,\n        address _hasMon,\n        address _feeRecipient,\n        uint256 _minMargin,\n        uint256 _protocolFeeShare\n    ) Ownable(msg.sender) {\n        require(_hasMonCollateral != address(0), \"Invalid hasMonCollateral address\");\n        require(_hasMon != address(0), \"Invalid hasMon address\");\n        require(_feeRecipient != address(0), \"Invalid fee recipient address\");\n        require(_minMargin > 0, \"Invalid min margin\");\n        require(_protocolFeeShare <= BASIS_POINTS, \"Invalid protocol fee share\");\n\n        hasMonCollateral = _hasMonCollateral;\n        hasMON = IERC20(_hasMon);\n        feeRecipient = _feeRecipient;\n        minMargin = _minMargin;\n        protocolFeeShare = _protocolFeeShare;\n\n        emergencyMode = false;\n        marketCount = 0;\n    }\n\n    function setOrderBook(address _orderBook) external onlyOwner {\n        require(_orderBook != address(0), \"Invalid orderbook address\");\n        orderBook = _orderBook;\n        emit OrderBookUpdated(orderBook);\n    }\n\n    function _isValidPrice(uint256 price, uint256 currentPrice, uint256 maxSlippage) internal pure returns (bool) {\n        if (price == 0 || currentPrice == 0) return false;\n\n        uint256 priceDiff = price > currentPrice ? price - currentPrice : currentPrice - price;\n\n        uint256 slippage = (priceDiff * BASIS_POINTS) / currentPrice;\n        return slippage <= maxSlippage;\n    }\n\n    function _updateFunding(uint32 marketIndex) internal {\n        Market storage market = markets[marketIndex];\n\n        if (block.timestamp < market.lastFundingTime + market.fundingInterval) {\n            return;\n        }\n\n        // Calculate multiple funding payments if needed\n        uint256 periods = (block.timestamp - market.lastFundingTime) / market.fundingInterval;\n        if (periods == 0) return;\n\n        // Calculate imbalance between longs and shorts\n        int256 longShortRatio;\n        if (market.openInterestShort > 0) {\n            longShortRatio =\n                int256((market.openInterestLong * BASIS_POINTS) / market.openInterestShort) -\n                int256(BASIS_POINTS);\n        } else if (market.openInterestLong > 0) {\n            longShortRatio = int256(BASIS_POINTS); // Max imbalance if no shorts\n        } else {\n            longShortRatio = 0; // No positions open\n        }\n\n        // Calculate and cap funding rate\n        int256 fundingRate = (longShortRatio * market.maxFundingRate) / int256(BASIS_POINTS);\n        fundingRate = fundingRate > market.maxFundingRate\n            ? market.maxFundingRate\n            : (fundingRate < -market.maxFundingRate ? -market.maxFundingRate : fundingRate);\n\n        // Update cumulative funding\n        market.cumulativeFunding += fundingRate * int256(periods);\n        market.lastFundingTime += periods * market.fundingInterval;\n\n        emit FundingUpdated(marketIndex, fundingRate, market.openInterestLong, market.openInterestShort);\n    }\n\n    // Core trading functions\n    function openPosition(\n        address trader,\n        uint32 marketIndex,\n        uint256 margin,\n        uint32 leverage,\n        bool isLong,\n        uint256 price,\n        uint256 maxSlippage\n    )\n        external\n        onlyOrderBook\n        nonReentrant\n        marketExists(marketIndex)\n        marketActive(marketIndex)\n        notInEmergencyMode\n        returns (uint256)\n    {\n        Market storage market = markets[marketIndex];\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n\n        // Validate inputs\n        require(!positions[trader][marketIndex].isOpen, \"Position already exists\");\n        require(margin >= market.minInitialMargin, \"Margin too small\");\n        require(margin >= minMargin, \"Below global minimum margin\");\n        require(leverage <= market.maxLeverage, \"Leverage too high\");\n        require(_isValidPrice(price, currentPrice, maxSlippage), \"Price exceeds slippage\");\n\n        // Calculate position details\n        uint256 size = margin * uint256(leverage);\n        require(size <= market.maxPositionSize, \"Position size too large\");\n\n        // Check market capacity\n        uint256 newOpenInterest = isLong ? market.openInterestLong + size : market.openInterestShort + size;\n        require(newOpenInterest <= market.maxOpenInterest, \"Market capacity exceeded\");\n\n        // Calculate and collect fees\n        FeeStructure storage fees = marketFees[marketIndex];\n        uint256 tradingFee = (size * fees.takerFee) / BASIS_POINTS;\n        uint256 protocolFee = (tradingFee * fees.protocolShare) / BASIS_POINTS;\n\n        // Transfer fees and margin\n        require(hasMON.transferFrom(hasMonCollateral, address(this), margin + tradingFee), \"Fee transfer failed\");\n\n        // Update funding before position creation\n        _updateFunding(marketIndex);\n\n        // Create position\n        positions[trader][marketIndex] = Position({\n            isOpen: true,\n            size: size,\n            margin: margin,\n            entryPrice: price,\n            lastCumulativeFunding: market.cumulativeFunding,\n            isLong: isLong,\n            leverage: leverage,\n            marketIndex: marketIndex,\n            lastUpdateTime: block.timestamp\n        });\n\n        // Update market state\n        if (isLong) {\n            market.openInterestLong += size;\n        } else {\n            market.openInterestShort += size;\n        }\n\n        emit PositionOpened(trader, marketIndex, size, margin, isLong, leverage, price, block.timestamp);\n\n        return size;\n    }\n\n    function closePosition(\n        address trader,\n        uint32 marketIndex,\n        uint256 price,\n        uint256 maxSlippage\n    )\n        external\n        onlyOrderBook\n        nonReentrant\n        marketActive(marketIndex)\n        positionExists(trader, marketIndex)\n        returns (int256)\n    {\n        Position memory pos = positions[trader][marketIndex]; // Use memory instead of storage\n        Market storage market = markets[marketIndex];\n\n        // Validate price\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        require(_isValidPrice(price, currentPrice, maxSlippage), \"Price exceeds slippage\");\n\n        // Update funding\n        _updateFunding(marketIndex);\n\n        // Calculate returns using a separate internal function\n        (uint256 returnAmount, int256 totalPnl) = _calculateClosingAmounts(trader, marketIndex, price, pos);\n\n        // Update market state\n        if (pos.isLong) {\n            market.openInterestLong -= pos.size;\n        } else {\n            market.openInterestShort -= pos.size;\n        }\n\n        // Handle transfers\n        _handleClosingTransfers(returnAmount, trader);\n\n        // Close position\n        delete positions[trader][marketIndex];\n\n        emit PositionClosed(trader, marketIndex, pos.size, totalPnl, price, block.timestamp);\n\n        return totalPnl;\n    }\n\n    function _calculateClosingAmounts(\n        address trader,\n        uint32 marketIndex,\n        uint256 price,\n        Position memory position\n    ) internal view returns (uint256 returnAmount, int256 totalPnl) {\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, price);\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\n        totalPnl = unrealizedPnl + fundingPayment;\n\n        FeeStructure storage fees = marketFees[marketIndex];\n        uint256 closingFee = (position.size * fees.takerFee) / BASIS_POINTS;\n\n        if (totalPnl >= 0) {\n            returnAmount = position.margin + uint256(totalPnl) - closingFee;\n        } else {\n            uint256 loss = uint256(-totalPnl);\n            returnAmount = loss < position.margin ? position.margin - loss - closingFee : 0;\n        }\n    }\n\n    function _handleClosingTransfers(uint256 amount, address trader) internal {\n        if (amount > 0) {\n            // Transfer remaining funds back to hasMonCollateral contract\n            require(hasMON.transfer(hasMonCollateral, amount), \"Transfer to collateral failed\");\n        }\n    }\n\n    function liquidatePosition(\n        address trader,\n        uint32 marketIndex\n    ) external nonReentrant marketActive(marketIndex) positionExists(trader, marketIndex) returns (uint256) {\n        Position storage position = positions[trader][marketIndex];\n        Market storage market = markets[marketIndex];\n        FeeStructure storage fees = marketFees[marketIndex];\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n\n        // Update funding and calculate total PnL\n        _updateFunding(marketIndex);\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\n        int256 totalPnl = unrealizedPnl + fundingPayment;\n\n        // Calculate remaining margin\n        uint256 remainingMargin;\n        if (totalPnl >= 0) {\n            remainingMargin = position.margin + uint256(totalPnl);\n        } else {\n            if (uint256(-totalPnl) < position.margin) {\n                remainingMargin = position.margin - uint256(-totalPnl);\n            } else {\n                remainingMargin = 0;\n            }\n        }\n\n        // Check liquidation threshold\n        uint256 maintenanceMargin = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\n        require(remainingMargin <= maintenanceMargin, \"Position not liquidatable\");\n\n        // Calculate liquidation rewards\n        uint256 liquidationFee = (remainingMargin * fees.liquidationFee) / BASIS_POINTS;\n        uint256 protocolShare = (liquidationFee * fees.protocolShare) / BASIS_POINTS;\n        uint256 liquidatorShare = liquidationFee - protocolShare;\n\n        // Update market state\n        if (position.isLong) {\n            market.openInterestLong -= position.size;\n        } else {\n            market.openInterestShort -= position.size;\n        }\n\n        // Transfer fees\n        if (protocolShare > 0) {\n            require(hasMON.transfer(feeRecipient, protocolShare), \"Protocol fee transfer failed\");\n        }\n        if (liquidatorShare > 0) {\n            require(hasMON.transfer(msg.sender, liquidatorShare), \"Liquidator fee transfer failed\");\n        }\n\n        // Return remaining funds to trader\n        uint256 returnAmount = remainingMargin - liquidationFee;\n        if (returnAmount > 0) {\n            require(hasMON.transfer(hasMonCollateral, returnAmount), \"Return transfer failed\");\n        }\n\n        // Close position\n        delete positions[trader][marketIndex];\n\n        emit PositionLiquidated(trader, marketIndex, position.size, msg.sender, totalPnl, currentPrice);\n\n        return liquidatorShare;\n    }\n\n    // Internal calculation functions\n    function _calculatePremium(uint256 marketPrice, Market storage market) internal view returns (int256) {\n        if (market.openInterestShort == 0) return 0;\n\n        // Calculate skew ratio between longs and shorts\n        uint256 ratio = (market.openInterestLong * PRECISION) / market.openInterestShort;\n        int256 skew = int256(ratio) - int256(PRECISION);\n\n        return skew;\n    }\n\n    function _calculatePnL(address trader, uint32 marketIndex, uint256 currentPrice) internal view returns (int256) {\n        Position storage position = positions[trader][marketIndex];\n\n        uint256 priceDelta;\n        if (position.isLong) {\n            if (currentPrice > position.entryPrice) {\n                priceDelta = currentPrice - position.entryPrice;\n                return int256((priceDelta * position.size) / position.entryPrice);\n            } else {\n                priceDelta = position.entryPrice - currentPrice;\n                return -int256((priceDelta * position.size) / position.entryPrice);\n            }\n        } else {\n            if (currentPrice > position.entryPrice) {\n                priceDelta = currentPrice - position.entryPrice;\n                return -int256((priceDelta * position.size) / position.entryPrice);\n            } else {\n                priceDelta = position.entryPrice - currentPrice;\n                return int256((priceDelta * position.size) / position.entryPrice);\n            }\n        }\n    }\n\n    function _calculateFundingPayment(address trader, uint32 marketIndex) internal view returns (int256) {\n        Position storage position = positions[trader][marketIndex];\n        Market storage market = markets[marketIndex];\n\n        int256 fundingDelta = market.cumulativeFunding - position.lastCumulativeFunding;\n\n        // Cast position.size to int256 and PRECISION to int256 for consistent arithmetic\n        if (position.isLong) {\n            return (-int256(position.size) * fundingDelta) / int256(PRECISION);\n        } else {\n            return (int256(position.size) * fundingDelta) / int256(PRECISION);\n        }\n    }\n\n    function _getOraclePrice(uint32 marketIndex) internal view returns (uint256) {\n        Market storage market = markets[marketIndex];\n        AggregatorV3Interface oracle = AggregatorV3Interface(market.oracle);\n\n        // Get latest round data\n        (uint80 roundId, int256 price, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = oracle\n            .latestRoundData();\n\n        // Price validation\n        require(price > 0, \"Invalid oracle price\");\n        require(updatedAt > 0, \"Round not complete\");\n        require(answeredInRound >= roundId, \"Stale price\");\n        require(block.timestamp - updatedAt <= 3600, \"Oracle price too old\");\n\n        // Convert to 18 decimals (assuming Chainlink uses 8 decimals)\n        return uint256(price) * PRICE_PRECISION;\n    }\n\n    // View functions for external integrations\n    function getPositionValue(\n        address trader,\n        uint32 marketIndex\n    ) external view returns (uint256 value, bool hasProfit, int256 fundingFee) {\n        Position storage position = positions[trader][marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\n        fundingFee = _calculateFundingPayment(trader, marketIndex);\n\n        if (pnl >= 0) {\n            value = uint256(pnl);\n            hasProfit = true;\n        } else {\n            value = uint256(-pnl);\n            hasProfit = false;\n        }\n    }\n\n    function getMarketUtilization(uint32 marketIndex) external view returns (uint256 longUtil, uint256 shortUtil) {\n        Market storage market = markets[marketIndex];\n\n        longUtil = market.openInterestLong == 0 ? 0 : (market.openInterestLong * PRECISION) / market.maxOpenInterest;\n\n        shortUtil = market.openInterestShort == 0 ? 0 : (market.openInterestShort * PRECISION) / market.maxOpenInterest;\n    }\n\n    function getHealthFactor(address trader, uint32 marketIndex) external view returns (uint256) {\n        Position storage position = positions[trader][marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\n        int256 fundingFee = _calculateFundingPayment(trader, marketIndex);\n        int256 totalPnl = pnl + fundingFee;\n\n        uint256 remainingMargin;\n        if (totalPnl >= 0) {\n            remainingMargin = position.margin + uint256(totalPnl);\n        } else {\n            if (uint256(-totalPnl) < position.margin) {\n                remainingMargin = position.margin - uint256(-totalPnl);\n            } else {\n                return 0;\n            }\n        }\n\n        return (remainingMargin * BASIS_POINTS) / position.margin;\n    }\n\n    // Emergency functions\n    function enableEmergencyMode() external onlyOwner {\n        require(!emergencyMode, \"Emergency mode already enabled\");\n        emergencyMode = true;\n        emit EmergencyModeEnabled(msg.sender, block.timestamp);\n    }\n\n    function pauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\n        require(!marketPaused[marketIndex], \"Market already paused\");\n        marketPaused[marketIndex] = true;\n        emit MarketPaused(marketIndex, true);\n    }\n\n    function unpauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\n        require(marketPaused[marketIndex], \"Market not paused\");\n        marketPaused[marketIndex] = false;\n        emit MarketPaused(marketIndex, false);\n    }\n\n    // Insurance fund management\n    function addToInsuranceFund() external payable {\n        uint256 oldBalance = insuranceFundBalance;\n        insuranceFundBalance += msg.value;\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\n    }\n\n    function withdrawFromInsuranceFund(uint256 amount) external onlyOwner {\n        require(amount <= insuranceFundBalance, \"Insufficient insurance fund balance\");\n        uint256 oldBalance = insuranceFundBalance;\n        insuranceFundBalance -= amount;\n        (bool success, ) = payable(owner()).call{ value: amount }(\"\");\n        require(success, \"Transfer failed\");\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\n    }\n\n    // Enhanced view functions for market analysis\n    function getMarketStats(\n        uint32 marketIndex\n    )\n        external\n        view\n        returns (\n            uint256 longOpenInterest,\n            uint256 shortOpenInterest,\n            uint256 utilizationRate,\n            int256 skewness,\n            uint256 lastFundingTime,\n            int256 currentFundingRate\n        )\n    {\n        Market storage market = markets[marketIndex];\n\n        longOpenInterest = market.openInterestLong;\n        shortOpenInterest = market.openInterestShort;\n\n        utilizationRate = market.maxOpenInterest > 0\n            ? ((market.openInterestLong + market.openInterestShort) * PRECISION) / market.maxOpenInterest\n            : 0;\n\n        skewness = _calculatePremium(_getOraclePrice(marketIndex), market);\n        lastFundingTime = market.lastFundingTime;\n\n        // Calculate current funding rate\n        if (block.timestamp >= market.lastFundingTime + market.fundingInterval) {\n            currentFundingRate = (skewness * market.maxFundingRate) / int256(BASIS_POINTS);\n            if (currentFundingRate > market.maxFundingRate) {\n                currentFundingRate = market.maxFundingRate;\n            } else if (currentFundingRate < -market.maxFundingRate) {\n                currentFundingRate = -market.maxFundingRate;\n            }\n        }\n    }\n\n    function getPositionRisk(\n        address trader,\n        uint32 marketIndex\n    )\n        external\n        view\n        returns (\n            uint256 marginRatio,\n            uint256 liquidationPrice,\n            bool isLiquidatable,\n            int256 unrealizedPnl,\n            int256 fundingPayment\n        )\n    {\n        Position storage position = positions[trader][marketIndex];\n        Market storage market = markets[marketIndex];\n        require(position.isOpen, \"Position not found\");\n\n        uint256 currentPrice = _getOraclePrice(marketIndex);\n        unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\n        fundingPayment = _calculateFundingPayment(trader, marketIndex);\n\n        int256 totalValue = int256(position.margin) + unrealizedPnl + fundingPayment;\n        marginRatio = totalValue <= 0 ? 0 : (uint256(totalValue) * BASIS_POINTS) / position.size;\n\n        // Calculate liquidation price\n        uint256 liquidationThreshold = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\n        if (position.isLong) {\n            liquidationPrice =\n                position.entryPrice -\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\n        } else {\n            liquidationPrice =\n                position.entryPrice +\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\n        }\n\n        isLiquidatable = marginRatio <= market.liquidationThreshold;\n    }\n\n    // Receive function for native token deposits\n    receive() external payable {\n        // Only accept payments for insurance fund\n        insuranceFundBalance += msg.value;\n        emit InsuranceFundUpdated(insuranceFundBalance - msg.value, insuranceFundBalance);\n    }\n}\n"
    },
    "contracts/staking/HasMon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title Hashed Monad Token (hasMON)\n/// @notice A derivative token representing staked MONAD\ncontract HasMon is ERC20, Ownable {\n    address public immutable stakingContract;\n\n    event StakingContractSet(address indexed stakingContract);\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        address _stakingContract\n    ) ERC20(name, symbol) Ownable(msg.sender) {\n        stakingContract = _stakingContract;\n        emit StakingContractSet(_stakingContract);\n    }\n\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"HasMon: caller is not staking contract\");\n        _;\n    }\n\n    function mint(address _to, uint256 _amount) external onlyStakingContract {\n        require(_to != address(0), \"HasMon: mint to the zero address\");\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external onlyStakingContract {\n        require(_from != address(0), \"HasMon: burn from the zero address\");\n        require(balanceOf(_from) >= _amount, \"HasMon: burn amount exceeds balance\");\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/staking/MonStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./HasMon.sol\";\n\n/// @title Monad Staking Contract\n/// @notice Users stake MON (native currency) and receive hasMON as a staking derivative\ncontract MonStaking is ReentrancyGuard, Pausable, Ownable {\n    HasMon public immutable hasMonToken;\n\n    mapping(address => uint256) public stakedBalances;\n    uint256 public totalStaked;\n\n    uint256 public constant MIN_STAKE_AMOUNT = 1e15; // 0.001 MON\n    uint256 public constant MAX_STAKE_AMOUNT = 1000000e18; // 1M MON\n\n    event Staked(address indexed user, uint256 amount);\n    event Unstaked(address indexed user, uint256 amount);\n    event RewardAdded(uint256 amount);\n    event EmergencyUnstake(address indexed user, uint256 amount);\n\n    constructor() Ownable(msg.sender) {\n        hasMonToken = new HasMon(\"Hashed Monad\", \"hasMON\", address(this));\n    }\n\n    function getHasMonBalance(address _user) public view returns (uint256) {\n        return hasMonToken.balanceOf(_user);\n    }\n\n    function getContractAddressBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @notice Stake MON (native currency)\n    function stake() external payable nonReentrant whenNotPaused {\n        require(msg.value >= MIN_STAKE_AMOUNT, \"Stake amount too low\");\n        require(msg.value <= MAX_STAKE_AMOUNT, \"Stake amount too high\");\n        require(totalStaked + msg.value <= MAX_STAKE_AMOUNT, \"Total stake limit reached\");\n\n        hasMonToken.mint(msg.sender, msg.value);\n        stakedBalances[msg.sender] += msg.value;\n        totalStaked += msg.value;\n\n        emit Staked(msg.sender, msg.value);\n    }\n\n    /// @notice Unstake MON and burn hasMON\n    function unstake(uint256 _amount) external nonReentrant whenNotPaused {\n        require(_amount > 0, \"Cannot unstake 0\");\n        require(_amount <= stakedBalances[msg.sender], \"Insufficient balance\");\n        require(_amount <= address(this).balance, \"Insufficient contract balance\");\n\n        // Update state before external interactions\n        stakedBalances[msg.sender] -= _amount;\n        totalStaked -= _amount;\n\n        // Burn hasMON tokens before transfer\n        hasMonToken.burn(msg.sender, _amount);\n\n        // Transfer MON back to the user\n        (bool success, ) = payable(msg.sender).call{ value: _amount }(\"\");\n        require(success, \"Transfer failed\");\n\n        emit Unstaked(msg.sender, _amount);\n    }\n\n    // @notice Emergency unstake all MON and\n    // burn hasMON tokens\n    function emergencyUnstake() external nonReentrant {\n        uint256 amount = stakedBalances[msg.sender];\n        require(amount > 0, \"No stake to withdraw\");\n\n        stakedBalances[msg.sender] = 0;\n        totalStaked -= amount;\n        hasMonToken.burn(msg.sender, amount);\n\n        (bool success, ) = payable(msg.sender).call{ value: amount }(\"\");\n        require(success, \"Transfer failed\");\n\n        emit EmergencyUnstake(msg.sender, amount);\n    }\n\n    // @notice Pause the contract\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    // @notice Unpause the contract\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /// @notice Allow contract to receive MON\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}