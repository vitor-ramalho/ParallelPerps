{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/perps/PerpetualTrading.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract PerpetualTrading is Ownable, ReentrancyGuard {\n    // Market structure\n    struct Market {\n        bytes32 marketId;\n        address baseToken;\n        uint256 maxLeverage;\n        uint256 maintenanceMargin;\n        uint256 liquidationFee;\n        uint256 fundingRateMultiplier;\n        uint256 lastFundingTime;\n        int256 cumulativeFundingRate;\n        uint256 openInterestLong;\n        uint256 openInterestShort;\n        bool isActive;\n    }\n\n    // Position structure\n    struct Position {\n        uint256 size;\n        uint256 margin;\n        uint256 entryPrice;\n        int256 entryFundingRate;\n        bool isLong;\n        uint256 lastUpdateTime;\n    }\n\n    // Mappings\n    mapping(bytes32 => Market) public markets;\n    mapping(address => mapping(bytes32 => Position)) public positions;\n    mapping(address => uint256) public collateralBalances;\n\n    uint256 public price;\n\n    // Insurance fund\n    uint256 public insuranceFund;\n\n    // Events\n    event MarketCreated(bytes32 indexed marketId, address baseToken);\n    event PositionOpened(address indexed trader, bytes32 indexed marketId, uint256 size, uint256 margin, bool isLong);\n    event PositionClosed(address indexed trader, bytes32 indexed marketId, uint256 pnl);\n    event PositionLiquidated(address indexed trader, bytes32 indexed marketId, uint256 deficit);\n    event FundingRateUpdated(bytes32 indexed marketId, int256 fundingRate);\n\n    constructor() Ownable(msg.sender) {}\n\n    function createMarket(\n        bytes32 _marketId,\n        address _baseToken,\n        uint256 _maxLeverage,\n        uint256 _maintenanceMargin,\n        uint256 _liquidationFee,\n        uint256 _fundingRateMultiplier\n    ) external onlyOwner {\n        require(!markets[_marketId].isActive, \"Market already exists\");\n\n        markets[_marketId] = Market({\n            marketId: _marketId,\n            baseToken: _baseToken,\n            maxLeverage: _maxLeverage,\n            maintenanceMargin: _maintenanceMargin,\n            liquidationFee: _liquidationFee,\n            fundingRateMultiplier: _fundingRateMultiplier,\n            lastFundingTime: block.timestamp,\n            cumulativeFundingRate: 0,\n            openInterestLong: 0,\n            openInterestShort: 0,\n            isActive: true\n        });\n\n        emit MarketCreated(_marketId, _baseToken);\n    }\n\n    function depositCollateral(uint256 _amount) external nonReentrant {\n        IERC20(markets[bytes32(0)].baseToken).transferFrom(msg.sender, address(this), _amount);\n        collateralBalances[msg.sender] += _amount;\n    }\n\n    function withdrawCollateral(uint256 _amount) external nonReentrant {\n        require(collateralBalances[msg.sender] >= _amount, \"Insufficient balance\");\n\n        // Check if withdrawal doesn't cause positions to be under-collateralized\n        // Implementation needed\n\n        collateralBalances[msg.sender] -= _amount;\n        IERC20(markets[bytes32(0)].baseToken).transfer(msg.sender, _amount);\n    }\n\n    function openPosition(\n        bytes32 _marketId,\n        uint256 _margin,\n        uint256 _leverage,\n        bool _isLong,\n        uint256 _price\n    ) external nonReentrant {\n        Market storage market = markets[_marketId];\n        require(market.isActive, \"Market not active\");\n        require(_leverage <= market.maxLeverage, \"Leverage too high\");\n        require(collateralBalances[msg.sender] >= _margin, \"Insufficient collateral\");\n\n        // Update funding rate\n        _updateFundingRate(_marketId);\n\n        // Calculate position size\n        uint256 size = _margin * _leverage;\n\n        // Update position\n        Position storage position = positions[msg.sender][_marketId];\n\n        // If position exists, close it first\n        if (position.size > 0) {\n            // Close existing position\n            // Implementation needed\n        }\n\n        // Create new position\n        position.size = size;\n        position.margin = _margin;\n        position.entryPrice = _price;\n        position.entryFundingRate = market.cumulativeFundingRate;\n        position.isLong = _isLong;\n        position.lastUpdateTime = block.timestamp;\n\n        // Update market open interest\n        if (_isLong) {\n            market.openInterestLong += size;\n        } else {\n            market.openInterestShort += size;\n        }\n\n        // Reduce collateral balance\n        collateralBalances[msg.sender] -= _margin;\n\n        emit PositionOpened(msg.sender, _marketId, size, _margin, _isLong);\n    }\n\n    function closePosition(bytes32 _marketId, uint256 _price) external nonReentrant {\n        Market storage market = markets[_marketId];\n        Position storage position = positions[msg.sender][_marketId];\n\n        require(position.size > 0, \"No position to close\");\n\n        // Update funding rate\n        _updateFundingRate(_marketId);\n\n        // Calculate PnL\n        int256 pnl = _calculatePnL(position, _price, market.cumulativeFundingRate);\n        uint256 marginToReturn = position.margin;\n\n        // Add PnL to margin (if positive) or deduct from margin (if negative)\n        if (pnl > 0) {\n            marginToReturn += uint256(pnl);\n        } else if (pnl < 0 && uint256(-pnl) < marginToReturn) {\n            marginToReturn -= uint256(-pnl);\n        } else {\n            marginToReturn = 0;\n        }\n\n        // Update market open interest\n        if (position.isLong) {\n            market.openInterestLong -= position.size;\n        } else {\n            market.openInterestShort -= position.size;\n        }\n\n        // Return remaining margin to collateral balance\n        collateralBalances[msg.sender] += marginToReturn;\n\n        // Reset position\n        delete positions[msg.sender][_marketId];\n\n        emit PositionClosed(msg.sender, _marketId, marginToReturn);\n    }\n\n    function liquidatePosition(address _trader, bytes32 _marketId, uint256 _price) external nonReentrant {\n        Market storage market = markets[_marketId];\n        Position storage position = positions[_trader][_marketId];\n\n        require(position.size > 0, \"No position to liquidate\");\n\n        // Update funding rate\n        _updateFundingRate(_marketId);\n\n        // Calculate PnL\n        int256 pnl = _calculatePnL(position, _price, market.cumulativeFundingRate);\n\n        // Check if position is liquidatable\n        uint256 currentMargin = pnl > 0\n            ? position.margin + uint256(pnl)\n            : (uint256(-pnl) >= position.margin ? 0 : position.margin - uint256(-pnl));\n\n        uint256 maintenanceAmount = (position.size * market.maintenanceMargin) / 10000; // Basis points\n\n        require(currentMargin < maintenanceAmount, \"Position not liquidatable\");\n\n        // Calculate liquidation fee\n        uint256 liquidationFee = (position.size * market.liquidationFee) / 10000; // Basis points\n\n        // Calculate deficit\n        uint256 deficit = 0;\n        if (currentMargin < liquidationFee) {\n            deficit = liquidationFee - currentMargin;\n            // Use insurance fund to cover deficit\n            if (insuranceFund >= deficit) {\n                insuranceFund -= deficit;\n            } else {\n                // Socialize losses if insurance fund is insufficient\n                // Implementation needed\n            }\n            currentMargin = 0;\n        } else {\n            currentMargin -= liquidationFee;\n        }\n\n        // Pay liquidation fee to liquidator\n        collateralBalances[msg.sender] += liquidationFee;\n\n        // Return remaining margin to trader\n        if (currentMargin > 0) {\n            collateralBalances[_trader] += currentMargin;\n        }\n\n        // Update market open interest\n        if (position.isLong) {\n            market.openInterestLong -= position.size;\n        } else {\n            market.openInterestShort -= position.size;\n        }\n\n        // Reset position\n        delete positions[_trader][_marketId];\n\n        emit PositionLiquidated(_trader, _marketId, deficit);\n    }\n\n    function _updateFundingRate(bytes32 _marketId) internal {\n        Market storage market = markets[_marketId];\n\n        // Skip if last update was too recent\n        if (block.timestamp - market.lastFundingTime < 1 hours) {\n            return;\n        }\n\n        // Calculate hours since last update\n        uint256 hoursElapsed = (block.timestamp - market.lastFundingTime) / 1 hours;\n\n        // Calculate premium index based on open interest imbalance\n        int256 premiumIndex = 0;\n        if (market.openInterestLong > 0 || market.openInterestShort > 0) {\n            premiumIndex = int256(\n                ((int256(market.openInterestLong) - int256(market.openInterestShort)) *\n                    int256(market.fundingRateMultiplier)) / int256(market.openInterestLong + market.openInterestShort)\n            );\n        }\n\n        // Update cumulative funding rate\n        market.cumulativeFundingRate += premiumIndex * int256(hoursElapsed);\n\n        // Update last funding time\n        market.lastFundingTime = block.timestamp;\n\n        emit FundingRateUpdated(_marketId, premiumIndex);\n    }\n\n    function _calculatePnL(\n        Position memory _position,\n        uint256 _currentPrice,\n        int256 _currentCumulativeFunding\n    ) internal pure returns (int256) {\n        // Calculate PnL from price movement\n        int256 pricePnL;\n        if (_position.isLong) {\n            pricePnL = int256(((_currentPrice * _position.size) / _position.entryPrice) - _position.size);\n        } else {\n            pricePnL = int256(_position.size - ((_currentPrice * _position.size) / _position.entryPrice));\n        }\n\n        // Calculate funding payment\n        int256 fundingPayment = (int256(_position.size) * (_currentCumulativeFunding - _position.entryFundingRate)) /\n            1e18;\n\n        // Longs pay funding when positive, shorts pay when negative\n        if (_position.isLong) {\n            return pricePnL - fundingPayment;\n        } else {\n            return pricePnL + fundingPayment;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}