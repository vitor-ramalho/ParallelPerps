{
  "address": "0xF081511501A964B69b0527fF1522d82CFAA6628c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hasMonCollateral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_hasMon",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFeeShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EmergencyModeEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openInterestLong",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openInterestShort",
          "type": "uint256"
        }
      ],
      "name": "FundingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "InsuranceFundUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPositionSize",
          "type": "uint256"
        }
      ],
      "name": "MarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "MarketPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOrderBook",
          "type": "address"
        }
      ],
      "name": "OrderBookUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PositionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPrice",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leverage",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PositionOpened",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addToInsuranceFund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "closePosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableEmergencyMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getMarketStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "longOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "utilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "skewness",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "currentFundingRate",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getMarketUtilization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "longUtil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortUtil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getPositionRisk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marginRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidatable",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "unrealizedPnl",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "fundingPayment",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getPositionValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasProfit",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasMON",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasMonCollateral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "makerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openInterestLong",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openInterestShort",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "cumulativeFunding",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingInterval",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "maxFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maxPositionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minInitialMargin",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "leverage",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "pauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "lastCumulativeFunding",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "leverage",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "name": "setOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "unpauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromInsuranceFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x583a628b3fbda3993bdc0db79053cbbc1f11be877716fcb8bde08e670c657b79",
  "receipt": {
    "to": null,
    "from": "0x5E729a4F664abf7045466f12039a513DE9572E17",
    "contractAddress": "0xF081511501A964B69b0527fF1522d82CFAA6628c",
    "transactionIndex": 15,
    "gasUsed": "2540120",
    "logsBloom": "0x
    "blockHash": "0x3649c574737fb93dcd6c74e5b01b9334f0c1cb5c9e78acae0a98a30d3d1f46f5",
    "transactionHash": "0x583a628b3fbda3993bdc0db79053cbbc1f11be877716fcb8bde08e670c657b79",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 5760440,
        "transactionHash": "0x583a628b3fbda3993bdc0db79053cbbc1f11be877716fcb8bde08e670c657b79",
        "address": "0xF081511501A964B69b0527fF1522d82CFAA6628c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e729a4f664abf7045466f12039a513de9572e17"
        ],
        "data": "0x",
        "logIndex": 69,
        "blockHash": "0x3649c574737fb93dcd6c74e5b01b9334f0c1cb5c9e78acae0a98a30d3d1f46f5"
      }
    ],
    "blockNumber": 5760440,
    "cumulativeGasUsed": "7660059",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4e9E588a27DE851947e3848C5764cb817f02aBD3",
    "0xE887582468591CB9dE71ab01acA4101C756A6442",
    "0x989d0faccf313a0d78b0d7fcb0216075eded94e7",
    "100000000000000000",
    500
  ],
  "numDeployments": 1,
  "solcInputHash": "b16643e7df8b48fc292aff9038462ff9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hasMonCollateral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_hasMon\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeeShare\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterestLong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterestShort\",\"type\":\"uint256\"}],\"name\":\"FundingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"InsuranceFundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPositionSize\",\"type\":\"uint256\"}],\"name\":\"MarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"MarketPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOrderBook\",\"type\":\"address\"}],\"name\":\"OrderBookUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PositionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addToInsuranceFund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getMarketStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"longOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"skewness\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"currentFundingRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getMarketUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"longUtil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortUtil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getPositionRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidatable\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"unrealizedPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fundingPayment\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getPositionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasProfit\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMON\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMonCollateral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"liquidatePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openInterestLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openInterestShort\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"cumulativeFunding\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lastCumulativeFunding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"name\":\"setOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"unpauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Core contract for perpetual trading with hasMON as collateral\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PerpEngine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/perps/PerpEngine.sol\":\"PerpEngine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/perps/PerpEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title PerpEngine\\n * @dev Core contract for perpetual trading with hasMON as collateral\\n */\\ncontract PerpEngine is Ownable, ReentrancyGuard {\\n    // Constants\\n    uint256 private constant PRECISION = 1e18;\\n    uint256 private constant BASIS_POINTS = 10000;\\n    uint256 private constant MAX_LEVERAGE = 100; // 100x max leverage\\n    uint256 private constant MIN_LIQUIDATION_THRESHOLD = 50; // 50%\\n    uint256 private constant LIQUIDATION_FEE = 500; // 5% in basis points\\n    uint256 private constant PRICE_PRECISION = 1e10; // For Chainlink price conversion\\n\\n    // State\\n    bool public emergencyMode;\\n    uint256 public insuranceFundBalance;\\n\\n    // Structs with improvements\\n    struct Position {\\n        bool isOpen;\\n        uint256 size; // Position size in USD (x10^18)\\n        uint256 margin; // Initial margin in hasMON tokens\\n        uint256 entryPrice; // Entry price in USD (x10^18)\\n        int256 lastCumulativeFunding; // Funding state at entry\\n        bool isLong; // Long or short position\\n        uint32 leverage; // Leverage as an integer\\n        uint32 marketIndex; // Index of the market\\n        uint256 lastUpdateTime; // Last time position was updated\\n    }\\n\\n    struct Market {\\n        string symbol; // Market symbol (e.g., \\\"BTC-USD\\\")\\n        address oracle; // Chainlink oracle address\\n        uint256 maxLeverage; // Maximum allowed leverage\\n        uint256 liquidationThreshold; // % of margin to trigger liquidation\\n        uint256 fee; // Trading fee in bps\\n        uint256 openInterestLong; // Total long positions USD\\n        uint256 openInterestShort; // Total short positions USD\\n        int256 cumulativeFunding; // Accumulated funding\\n        uint256 lastFundingTime; // Last funding update\\n        uint256 fundingInterval; // Funding rate interval\\n        int256 maxFundingRate; // Max funding rate per interval\\n        uint256 maxPositionSize; // Max position size per user\\n        uint256 maxOpenInterest; // Max total open interest\\n        uint256 minInitialMargin; // Minimum initial margin\\n        bool isActive; // Market active status\\n    }\\n\\n    struct FeeStructure {\\n        uint256 makerFee; // Fee for makers (limit orders)\\n        uint256 takerFee; // Fee for takers (market orders)\\n        uint256 liquidationFee; // Fee for liquidators\\n        uint256 protocolShare; // Protocol's share of fees\\n    }\\n\\n    // State Variables\\n    address public hasMonCollateral;\\n    address public orderBook;\\n    IERC20 public hasMON;\\n    uint256 public minMargin;\\n    uint256 public protocolFeeShare;\\n    address public feeRecipient;\\n\\n    // Mappings\\n    mapping(address => mapping(uint32 => Position)) public positions;\\n    mapping(uint32 => Market) public markets;\\n    mapping(uint32 => FeeStructure) public marketFees;\\n    mapping(uint32 => bool) public marketPaused;\\n    uint32 public marketCount;\\n    // Events with improved details\\n    event PositionOpened(\\n        address indexed trader,\\n        uint32 indexed marketIndex,\\n        uint256 size,\\n        uint256 margin,\\n        bool isLong,\\n        uint32 leverage,\\n        uint256 entryPrice,\\n        uint256 timestamp\\n    );\\n    event PositionClosed(\\n        address indexed trader,\\n        uint32 indexed marketIndex,\\n        uint256 size,\\n        int256 pnl,\\n        uint256 exitPrice,\\n        uint256 timestamp\\n    );\\n    event PositionLiquidated(\\n        address indexed trader,\\n        uint32 indexed marketIndex,\\n        uint256 size,\\n        address liquidator,\\n        int256 pnl,\\n        uint256 liquidationPrice\\n    );\\n    event MarketAdded(\\n        uint32 indexed marketIndex,\\n        string symbol,\\n        address oracle,\\n        uint256 maxLeverage,\\n        uint256 maxPositionSize\\n    );\\n    event FundingUpdated(\\n        uint32 indexed marketIndex,\\n        int256 fundingRate,\\n        uint256 openInterestLong,\\n        uint256 openInterestShort\\n    );\\n    event EmergencyModeEnabled(address indexed triggeredBy, uint256 timestamp);\\n    event MarketPaused(uint32 indexed marketIndex, bool isPaused);\\n    event InsuranceFundUpdated(uint256 oldBalance, uint256 newBalance);\\n    event OrderBookUpdated(address indexed newOrderBook);\\n\\n    // Enhanced modifiers\\n    modifier notInEmergencyMode() {\\n        require(!emergencyMode, \\\"System is in emergency mode\\\");\\n        _;\\n    }\\n\\n    modifier marketActive(uint32 marketIndex) {\\n        require(markets[marketIndex].isActive, \\\"Market not active\\\");\\n        require(!marketPaused[marketIndex], \\\"Market is paused\\\");\\n        _;\\n    }\\n\\n    modifier validPrice(uint256 price) {\\n        require(price > 0, \\\"Invalid price\\\");\\n        _;\\n    }\\n\\n    modifier onlyOrderBook() {\\n        require(msg.sender == orderBook, \\\"Only orderbook can call\\\");\\n        _;\\n    }\\n\\n    modifier marketExists(uint32 marketIndex) {\\n        require(marketIndex < marketCount, \\\"Market does not exist\\\");\\n        require(markets[marketIndex].oracle != address(0), \\\"Market not initialized\\\");\\n        _;\\n    }\\n\\n    modifier positionExists(address trader, uint32 marketIndex) {\\n        require(positions[trader][marketIndex].isOpen, \\\"Position does not exist\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _hasMonCollateral,\\n        address _hasMon,\\n        address _feeRecipient,\\n        uint256 _minMargin,\\n        uint256 _protocolFeeShare\\n    ) Ownable(msg.sender) {\\n        require(_hasMonCollateral != address(0), \\\"Invalid hasMonCollateral address\\\");\\n        require(_hasMon != address(0), \\\"Invalid hasMon address\\\");\\n        require(_feeRecipient != address(0), \\\"Invalid fee recipient address\\\");\\n        require(_minMargin > 0, \\\"Invalid min margin\\\");\\n        require(_protocolFeeShare <= BASIS_POINTS, \\\"Invalid protocol fee share\\\");\\n\\n        hasMonCollateral = _hasMonCollateral;\\n        hasMON = IERC20(_hasMon);\\n        feeRecipient = _feeRecipient;\\n        minMargin = _minMargin;\\n        protocolFeeShare = _protocolFeeShare;\\n\\n        emergencyMode = false;\\n        marketCount = 0;\\n    }\\n\\n    function setOrderBook(address _orderBook) external onlyOwner {\\n        require(_orderBook != address(0), \\\"Invalid orderbook address\\\");\\n        orderBook = _orderBook;\\n        emit OrderBookUpdated(orderBook);\\n    }\\n\\n    function _isValidPrice(uint256 price, uint256 currentPrice, uint256 maxSlippage) internal pure returns (bool) {\\n        if (price == 0 || currentPrice == 0) return false;\\n\\n        uint256 priceDiff = price > currentPrice ? price - currentPrice : currentPrice - price;\\n\\n        uint256 slippage = (priceDiff * BASIS_POINTS) / currentPrice;\\n        return slippage <= maxSlippage;\\n    }\\n\\n    function _updateFunding(uint32 marketIndex) internal {\\n        Market storage market = markets[marketIndex];\\n\\n        if (block.timestamp < market.lastFundingTime + market.fundingInterval) {\\n            return;\\n        }\\n\\n        // Calculate multiple funding payments if needed\\n        uint256 periods = (block.timestamp - market.lastFundingTime) / market.fundingInterval;\\n        if (periods == 0) return;\\n\\n        // Calculate imbalance between longs and shorts\\n        int256 longShortRatio;\\n        if (market.openInterestShort > 0) {\\n            longShortRatio =\\n                int256((market.openInterestLong * BASIS_POINTS) / market.openInterestShort) -\\n                int256(BASIS_POINTS);\\n        } else if (market.openInterestLong > 0) {\\n            longShortRatio = int256(BASIS_POINTS); // Max imbalance if no shorts\\n        } else {\\n            longShortRatio = 0; // No positions open\\n        }\\n\\n        // Calculate and cap funding rate\\n        int256 fundingRate = (longShortRatio * market.maxFundingRate) / int256(BASIS_POINTS);\\n        fundingRate = fundingRate > market.maxFundingRate\\n            ? market.maxFundingRate\\n            : (fundingRate < -market.maxFundingRate ? -market.maxFundingRate : fundingRate);\\n\\n        // Update cumulative funding\\n        market.cumulativeFunding += fundingRate * int256(periods);\\n        market.lastFundingTime += periods * market.fundingInterval;\\n\\n        emit FundingUpdated(marketIndex, fundingRate, market.openInterestLong, market.openInterestShort);\\n    }\\n\\n    // Core trading functions\\n    function openPosition(\\n        address trader,\\n        uint32 marketIndex,\\n        uint256 margin,\\n        uint32 leverage,\\n        bool isLong,\\n        uint256 price,\\n        uint256 maxSlippage\\n    )\\n        external\\n        onlyOrderBook\\n        nonReentrant\\n        marketExists(marketIndex)\\n        marketActive(marketIndex)\\n        notInEmergencyMode\\n        returns (uint256)\\n    {\\n        Market storage market = markets[marketIndex];\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n\\n        // Validate inputs\\n        require(!positions[trader][marketIndex].isOpen, \\\"Position already exists\\\");\\n        require(margin >= market.minInitialMargin, \\\"Margin too small\\\");\\n        require(margin >= minMargin, \\\"Below global minimum margin\\\");\\n        require(leverage <= market.maxLeverage, \\\"Leverage too high\\\");\\n        require(_isValidPrice(price, currentPrice, maxSlippage), \\\"Price exceeds slippage\\\");\\n\\n        // Calculate position details\\n        uint256 size = margin * uint256(leverage);\\n        require(size <= market.maxPositionSize, \\\"Position size too large\\\");\\n\\n        // Check market capacity\\n        uint256 newOpenInterest = isLong ? market.openInterestLong + size : market.openInterestShort + size;\\n        require(newOpenInterest <= market.maxOpenInterest, \\\"Market capacity exceeded\\\");\\n\\n        // Calculate and collect fees\\n        FeeStructure storage fees = marketFees[marketIndex];\\n        uint256 tradingFee = (size * fees.takerFee) / BASIS_POINTS;\\n        uint256 protocolFee = (tradingFee * fees.protocolShare) / BASIS_POINTS;\\n\\n        // Transfer fees and margin\\n        require(hasMON.transferFrom(hasMonCollateral, address(this), margin + tradingFee), \\\"Fee transfer failed\\\");\\n\\n        // Update funding before position creation\\n        _updateFunding(marketIndex);\\n\\n        // Create position\\n        positions[trader][marketIndex] = Position({\\n            isOpen: true,\\n            size: size,\\n            margin: margin,\\n            entryPrice: price,\\n            lastCumulativeFunding: market.cumulativeFunding,\\n            isLong: isLong,\\n            leverage: leverage,\\n            marketIndex: marketIndex,\\n            lastUpdateTime: block.timestamp\\n        });\\n\\n        // Update market state\\n        if (isLong) {\\n            market.openInterestLong += size;\\n        } else {\\n            market.openInterestShort += size;\\n        }\\n\\n        emit PositionOpened(trader, marketIndex, size, margin, isLong, leverage, price, block.timestamp);\\n\\n        return size;\\n    }\\n\\n    function closePosition(\\n        address trader,\\n        uint32 marketIndex,\\n        uint256 price,\\n        uint256 maxSlippage\\n    )\\n        external\\n        onlyOrderBook\\n        nonReentrant\\n        marketActive(marketIndex)\\n        positionExists(trader, marketIndex)\\n        returns (int256)\\n    {\\n        Position memory pos = positions[trader][marketIndex]; // Use memory instead of storage\\n        Market storage market = markets[marketIndex];\\n\\n        // Validate price\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        require(_isValidPrice(price, currentPrice, maxSlippage), \\\"Price exceeds slippage\\\");\\n\\n        // Update funding\\n        _updateFunding(marketIndex);\\n\\n        // Calculate returns using a separate internal function\\n        (uint256 returnAmount, int256 totalPnl) = _calculateClosingAmounts(trader, marketIndex, price, pos);\\n\\n        // Update market state\\n        if (pos.isLong) {\\n            market.openInterestLong -= pos.size;\\n        } else {\\n            market.openInterestShort -= pos.size;\\n        }\\n\\n        // Handle transfers\\n        _handleClosingTransfers(returnAmount, trader);\\n\\n        // Close position\\n        delete positions[trader][marketIndex];\\n\\n        emit PositionClosed(trader, marketIndex, pos.size, totalPnl, price, block.timestamp);\\n\\n        return totalPnl;\\n    }\\n\\n    function _calculateClosingAmounts(\\n        address trader,\\n        uint32 marketIndex,\\n        uint256 price,\\n        Position memory position\\n    ) internal view returns (uint256 returnAmount, int256 totalPnl) {\\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, price);\\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\\n        totalPnl = unrealizedPnl + fundingPayment;\\n\\n        FeeStructure storage fees = marketFees[marketIndex];\\n        uint256 closingFee = (position.size * fees.takerFee) / BASIS_POINTS;\\n\\n        if (totalPnl >= 0) {\\n            returnAmount = position.margin + uint256(totalPnl) - closingFee;\\n        } else {\\n            uint256 loss = uint256(-totalPnl);\\n            returnAmount = loss < position.margin ? position.margin - loss - closingFee : 0;\\n        }\\n    }\\n\\n    function _handleClosingTransfers(uint256 amount, address trader) internal {\\n        if (amount > 0) {\\n            // Transfer remaining funds back to hasMonCollateral contract\\n            require(hasMON.transfer(hasMonCollateral, amount), \\\"Transfer to collateral failed\\\");\\n        }\\n    }\\n\\n    function liquidatePosition(\\n        address trader,\\n        uint32 marketIndex\\n    ) external nonReentrant marketActive(marketIndex) positionExists(trader, marketIndex) returns (uint256) {\\n        Position storage position = positions[trader][marketIndex];\\n        Market storage market = markets[marketIndex];\\n        FeeStructure storage fees = marketFees[marketIndex];\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n\\n        // Update funding and calculate total PnL\\n        _updateFunding(marketIndex);\\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\\n        int256 totalPnl = unrealizedPnl + fundingPayment;\\n\\n        // Calculate remaining margin\\n        uint256 remainingMargin;\\n        if (totalPnl >= 0) {\\n            remainingMargin = position.margin + uint256(totalPnl);\\n        } else {\\n            if (uint256(-totalPnl) < position.margin) {\\n                remainingMargin = position.margin - uint256(-totalPnl);\\n            } else {\\n                remainingMargin = 0;\\n            }\\n        }\\n\\n        // Check liquidation threshold\\n        uint256 maintenanceMargin = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\\n        require(remainingMargin <= maintenanceMargin, \\\"Position not liquidatable\\\");\\n\\n        // Calculate liquidation rewards\\n        uint256 liquidationFee = (remainingMargin * fees.liquidationFee) / BASIS_POINTS;\\n        uint256 protocolShare = (liquidationFee * fees.protocolShare) / BASIS_POINTS;\\n        uint256 liquidatorShare = liquidationFee - protocolShare;\\n\\n        // Update market state\\n        if (position.isLong) {\\n            market.openInterestLong -= position.size;\\n        } else {\\n            market.openInterestShort -= position.size;\\n        }\\n\\n        // Transfer fees\\n        if (protocolShare > 0) {\\n            require(hasMON.transfer(feeRecipient, protocolShare), \\\"Protocol fee transfer failed\\\");\\n        }\\n        if (liquidatorShare > 0) {\\n            require(hasMON.transfer(msg.sender, liquidatorShare), \\\"Liquidator fee transfer failed\\\");\\n        }\\n\\n        // Return remaining funds to trader\\n        uint256 returnAmount = remainingMargin - liquidationFee;\\n        if (returnAmount > 0) {\\n            require(hasMON.transfer(hasMonCollateral, returnAmount), \\\"Return transfer failed\\\");\\n        }\\n\\n        // Close position\\n        delete positions[trader][marketIndex];\\n\\n        emit PositionLiquidated(trader, marketIndex, position.size, msg.sender, totalPnl, currentPrice);\\n\\n        return liquidatorShare;\\n    }\\n\\n    // Internal calculation functions\\n    function _calculatePremium(uint256 marketPrice, Market storage market) internal view returns (int256) {\\n        if (market.openInterestShort == 0) return 0;\\n\\n        // Calculate skew ratio between longs and shorts\\n        uint256 ratio = (market.openInterestLong * PRECISION) / market.openInterestShort;\\n        int256 skew = int256(ratio) - int256(PRECISION);\\n\\n        return skew;\\n    }\\n\\n    function _calculatePnL(address trader, uint32 marketIndex, uint256 currentPrice) internal view returns (int256) {\\n        Position storage position = positions[trader][marketIndex];\\n\\n        uint256 priceDelta;\\n        if (position.isLong) {\\n            if (currentPrice > position.entryPrice) {\\n                priceDelta = currentPrice - position.entryPrice;\\n                return int256((priceDelta * position.size) / position.entryPrice);\\n            } else {\\n                priceDelta = position.entryPrice - currentPrice;\\n                return -int256((priceDelta * position.size) / position.entryPrice);\\n            }\\n        } else {\\n            if (currentPrice > position.entryPrice) {\\n                priceDelta = currentPrice - position.entryPrice;\\n                return -int256((priceDelta * position.size) / position.entryPrice);\\n            } else {\\n                priceDelta = position.entryPrice - currentPrice;\\n                return int256((priceDelta * position.size) / position.entryPrice);\\n            }\\n        }\\n    }\\n\\n    function _calculateFundingPayment(address trader, uint32 marketIndex) internal view returns (int256) {\\n        Position storage position = positions[trader][marketIndex];\\n        Market storage market = markets[marketIndex];\\n\\n        int256 fundingDelta = market.cumulativeFunding - position.lastCumulativeFunding;\\n\\n        // Cast position.size to int256 and PRECISION to int256 for consistent arithmetic\\n        if (position.isLong) {\\n            return (-int256(position.size) * fundingDelta) / int256(PRECISION);\\n        } else {\\n            return (int256(position.size) * fundingDelta) / int256(PRECISION);\\n        }\\n    }\\n\\n    function _getOraclePrice(uint32 marketIndex) internal view returns (uint256) {\\n        Market storage market = markets[marketIndex];\\n        AggregatorV3Interface oracle = AggregatorV3Interface(market.oracle);\\n\\n        // Get latest round data\\n        (uint80 roundId, int256 price, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = oracle\\n            .latestRoundData();\\n\\n        // Price validation\\n        require(price > 0, \\\"Invalid oracle price\\\");\\n        require(updatedAt > 0, \\\"Round not complete\\\");\\n        require(answeredInRound >= roundId, \\\"Stale price\\\");\\n        require(block.timestamp - updatedAt <= 3600, \\\"Oracle price too old\\\");\\n\\n        // Convert to 18 decimals (assuming Chainlink uses 8 decimals)\\n        return uint256(price) * PRICE_PRECISION;\\n    }\\n\\n    // View functions for external integrations\\n    function getPositionValue(\\n        address trader,\\n        uint32 marketIndex\\n    ) external view returns (uint256 value, bool hasProfit, int256 fundingFee) {\\n        Position storage position = positions[trader][marketIndex];\\n        require(position.isOpen, \\\"Position not found\\\");\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        fundingFee = _calculateFundingPayment(trader, marketIndex);\\n\\n        if (pnl >= 0) {\\n            value = uint256(pnl);\\n            hasProfit = true;\\n        } else {\\n            value = uint256(-pnl);\\n            hasProfit = false;\\n        }\\n    }\\n\\n    function getMarketUtilization(uint32 marketIndex) external view returns (uint256 longUtil, uint256 shortUtil) {\\n        Market storage market = markets[marketIndex];\\n\\n        longUtil = market.openInterestLong == 0 ? 0 : (market.openInterestLong * PRECISION) / market.maxOpenInterest;\\n\\n        shortUtil = market.openInterestShort == 0 ? 0 : (market.openInterestShort * PRECISION) / market.maxOpenInterest;\\n    }\\n\\n    function getHealthFactor(address trader, uint32 marketIndex) external view returns (uint256) {\\n        Position storage position = positions[trader][marketIndex];\\n        require(position.isOpen, \\\"Position not found\\\");\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        int256 fundingFee = _calculateFundingPayment(trader, marketIndex);\\n        int256 totalPnl = pnl + fundingFee;\\n\\n        uint256 remainingMargin;\\n        if (totalPnl >= 0) {\\n            remainingMargin = position.margin + uint256(totalPnl);\\n        } else {\\n            if (uint256(-totalPnl) < position.margin) {\\n                remainingMargin = position.margin - uint256(-totalPnl);\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        return (remainingMargin * BASIS_POINTS) / position.margin;\\n    }\\n\\n    // Emergency functions\\n    function enableEmergencyMode() external onlyOwner {\\n        require(!emergencyMode, \\\"Emergency mode already enabled\\\");\\n        emergencyMode = true;\\n        emit EmergencyModeEnabled(msg.sender, block.timestamp);\\n    }\\n\\n    function pauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\\n        require(!marketPaused[marketIndex], \\\"Market already paused\\\");\\n        marketPaused[marketIndex] = true;\\n        emit MarketPaused(marketIndex, true);\\n    }\\n\\n    function unpauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\\n        require(marketPaused[marketIndex], \\\"Market not paused\\\");\\n        marketPaused[marketIndex] = false;\\n        emit MarketPaused(marketIndex, false);\\n    }\\n\\n    // Insurance fund management\\n    function addToInsuranceFund() external payable {\\n        uint256 oldBalance = insuranceFundBalance;\\n        insuranceFundBalance += msg.value;\\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\\n    }\\n\\n    function withdrawFromInsuranceFund(uint256 amount) external onlyOwner {\\n        require(amount <= insuranceFundBalance, \\\"Insufficient insurance fund balance\\\");\\n        uint256 oldBalance = insuranceFundBalance;\\n        insuranceFundBalance -= amount;\\n        (bool success, ) = payable(owner()).call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\\n    }\\n\\n    // Enhanced view functions for market analysis\\n    function getMarketStats(\\n        uint32 marketIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 longOpenInterest,\\n            uint256 shortOpenInterest,\\n            uint256 utilizationRate,\\n            int256 skewness,\\n            uint256 lastFundingTime,\\n            int256 currentFundingRate\\n        )\\n    {\\n        Market storage market = markets[marketIndex];\\n\\n        longOpenInterest = market.openInterestLong;\\n        shortOpenInterest = market.openInterestShort;\\n\\n        utilizationRate = market.maxOpenInterest > 0\\n            ? ((market.openInterestLong + market.openInterestShort) * PRECISION) / market.maxOpenInterest\\n            : 0;\\n\\n        skewness = _calculatePremium(_getOraclePrice(marketIndex), market);\\n        lastFundingTime = market.lastFundingTime;\\n\\n        // Calculate current funding rate\\n        if (block.timestamp >= market.lastFundingTime + market.fundingInterval) {\\n            currentFundingRate = (skewness * market.maxFundingRate) / int256(BASIS_POINTS);\\n            if (currentFundingRate > market.maxFundingRate) {\\n                currentFundingRate = market.maxFundingRate;\\n            } else if (currentFundingRate < -market.maxFundingRate) {\\n                currentFundingRate = -market.maxFundingRate;\\n            }\\n        }\\n    }\\n\\n    function getPositionRisk(\\n        address trader,\\n        uint32 marketIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 marginRatio,\\n            uint256 liquidationPrice,\\n            bool isLiquidatable,\\n            int256 unrealizedPnl,\\n            int256 fundingPayment\\n        )\\n    {\\n        Position storage position = positions[trader][marketIndex];\\n        Market storage market = markets[marketIndex];\\n        require(position.isOpen, \\\"Position not found\\\");\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        fundingPayment = _calculateFundingPayment(trader, marketIndex);\\n\\n        int256 totalValue = int256(position.margin) + unrealizedPnl + fundingPayment;\\n        marginRatio = totalValue <= 0 ? 0 : (uint256(totalValue) * BASIS_POINTS) / position.size;\\n\\n        // Calculate liquidation price\\n        uint256 liquidationThreshold = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\\n        if (position.isLong) {\\n            liquidationPrice =\\n                position.entryPrice -\\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\\n        } else {\\n            liquidationPrice =\\n                position.entryPrice +\\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\\n        }\\n\\n        isLiquidatable = marginRatio <= market.liquidationThreshold;\\n    }\\n\\n    // Receive function for native token deposits\\n    receive() external payable {\\n        // Only accept payments for insurance fund\\n        insuranceFundBalance += msg.value;\\n        emit InsuranceFundUpdated(insuranceFundBalance - msg.value, insuranceFundBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x5ac11b9df5941ddbaa4c341809081d5f462509210ee793fbbaa3518a2ac7f913\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346200029d57601f62002c4b38819003918201601f191683019291906001600160401b03841183851017620002a2578160a092849260409687528339810103126200029d576200005181620002b8565b90602062000061818301620002b8565b6200006e858401620002b8565b6080606085015194015194331562000285576000549060018060a01b031993338584161760005588519260018060a01b03928391823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360018055169283156200024557508116928315620002015716938415620001be57851562000186576127108711620001435750826004541617600455816006541617600655600954161760095560075560085560ff196002541660025563ffffffff19600e5416600e555161297d9081620002ce8239f35b60649088519062461bcd60e51b82526004820152601a60248201527f496e76616c69642070726f746f636f6c206665652073686172650000000000006044820152fd5b60649088519062461bcd60e51b82526004820152601260248201527124b73b30b634b21036b4b71036b0b933b4b760711b6044820152fd5b60649088519062461bcd60e51b82526004820152601d60248201527f496e76616c69642066656520726563697069656e7420616464726573730000006044820152fd5b885162461bcd60e51b815260048101879052601660248201527f496e76616c6964206861734d6f6e2061646472657373000000000000000000006044820152606490fd5b6064908762461bcd60e51b825280600483015260248201527f496e76616c6964206861734d6f6e436f6c6c61746572616c20616464726573736044820152fd5b8651631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200029d5756fe610100806040526004361015610067575b50361561001c57600080fd5b7f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e884604061004b3460035461216a565b8060035561005934826121d2565b9082519182526020820152a1005b60003560e01c9081630905f56014611ef7575080630bba41a814611eaa578063160d8b2814611df35780631c804dcb146119085780632d2451d114611814578063367c7605146117d857806339c294be146117ba5780633dbc645d1461179c57806346904840146117735780634c1d81d41461173f57806352003d18146116b35780635300e18314611332578063715018a6146112d9578063717659161461122b57806374d6672d146110fe578063768e48a1146110d5578063776af5ba146110ac5780638da5cb5b14611083578063960b26a2146110655780639a1598c814610fb75780639cd7a34b14610f8e5780639f7e44c51461095f578063aca55a89146107e0578063b97d5dbe14610686578063c5b1c7d0146105e4578063ca4e5b6f1461058b578063ec97908214610567578063ece91e351461033f578063f2fde38b146102b15763fb9f1009146101be5738610010565b346102ac576020806003193601126102ac576101d8611f40565b906101e1611f92565b6101f863ffffffff80600e5416931692831061200a565b6000828152600b8252604090206001015461021d906001600160a01b0316151561204e565b81600052600d815260ff6040600020541615610274577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600d8152604060002060ff19815416905560405160008152a2005b6064906040519062461bcd60e51b82526004820152601160248201527013585c9ad95d081b9bdd081c185d5cd959607a1b6044820152fd5b600080fd5b346102ac5760203660031901126102ac576102ca611f17565b6102d2611f92565b6001600160a01b0390811690811561032657600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346102ac5760203660031901126102ac5763ffffffff61035d611f40565b16600052600b602052604060002060405190600081549060019180831c9183821691821561055d575b60208410831461054757838752869290811561052857506001146104e4575b6103b192500384611f70565b60018060a01b03908201541660805260028101549060038101546004820154600583015460068401546007850154600886015490600987015492600a88015494600b89015496600c8a01549860ff600e600d8d01549c01541660c0526040518060a0526101e08091528d51908160e05260a051015260005b60e05181101561044c578d810160209081015160a0518301610200015201610429565b508b600061020060e05160a051010152608051602060a0510152604060a0510152606060a0510152608060a051015260a08051015260c060a051015260e060a051015261010060a051015261012060a051015261014060a051015261016060a051015261018060a05101526101a060a051015260c05115156101c060a051015260a05161020081601f19601f60e05101168101030190f35b509083600052602060002090836000925b82841061050e575050509060206103b1928201016103a5565b6020929450805483858a01015201910190918386936104f5565b602092506103b194915060ff191682840152151560051b8201016103a5565b634e487b7160e01b600052602260045260246000fd5b92607f1692610386565b346102ac5760003660031901126102ac57602063ffffffff600e5416604051908152f35b346102ac5760203660031901126102ac5763ffffffff6105a9611f40565b16600052600c602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b346102ac5760003660031901126102ac576105fd611f92565b60025460ff81166106415760019060ff1916176002556040514281527f86e6259fbf164140d541a86ff1a2a0606fa80f77ed47ca4748ca84810358afcb60203392a2005b60405162461bcd60e51b815260206004820152601e60248201527f456d657267656e6379206d6f646520616c726561647920656e61626c656400006044820152606490fd5b346102ac576020806003193601126102ac57600435906106a4611f92565b6003549182811161078f5760008080836106bf8295886121d2565b60035581546001600160a01b03165af13d1561078a573d67ffffffffffffffff811161077457604051906106fc601f8201601f1916850183611f70565b81526000833d92013e5b1561073e5760035460408051938452918301527f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e88491a1005b6064906040519062461bcd60e51b82526004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152fd5b634e487b7160e01b600052604160045260246000fd5b610706565b60405162461bcd60e51b815260048101839052602360248201527f496e73756666696369656e7420696e737572616e63652066756e642062616c616044820152626e636560e81b6064820152608490fd5b346102ac5760403660031901126102ac576107f9611f17565b610801611f2d565b60018060a01b038216600052600a602052604060002063ffffffff8216600052602052604060002091600b60205261085e60406000209261084560ff8654166127f9565b61085861085182612600565b828561248b565b92612543565b90600284015493610878836108738488612276565b612276565b946000861361091c5760a0955060036000955b01549161271061089b8484612157565b049060ff6005820154166000146108f7576108d6926108cb6108c560036108d094015494836121d2565b84612157565b612177565b906121d2565b935b6040519481865260208601521115604084015260608301526080820152f35b610916926108cb6108c5600361091094015494836121d2565b9061216a565b936108d8565b6127109586810296818804149015171561094957600361094360a097600185015490612177565b9561088b565b634e487b7160e01b600052601160045260246000fd5b346102ac5760e03660031901126102ac57610978611f17565b610980611f2d565b63ffffffff9160643583811681036102ac576084351515608435036102ac576109b460018060a01b03600554163314611fbe565b6109bc6121af565b6109cd84600e54168585161061200a565b8284166000908152600b60205260409020600101546109f6906001600160a01b0316151561204e565b838316600052600b602052610a1560ff600e6040600020015416612093565b838316600052600d602052610a3260ff60406000205416156120d3565b60ff60025416610f4957838316600052600b602052604060002092610a5681612600565b60018060a01b038416600052600a602052604060002086831660005260205260ff60406000205416610f0457600d85015460443510610ecc5760075460443510610e8757600285015486841611610e4e57610aba610abf9160c4359060a4356121df565b612112565b610acd858316604435612157565b93600b8101548511610e095760843515610df657610aef85600583015461216a565b600c82015410610db157858216600052600c6020526040600020610b296003612710610b1f60018501548a612157565b0492015482612157565b506006546004546001600160a01b039182169260209290911690606490610b529060443561216a565b91600060405195869485936323b872dd60e01b8552600485015230602485015260448401525af1908115610da557600091610d76575b5015610d3b576020958260c092610bbf7f52710922282cb913690ab8fed6a1d7ec4464874aaf30f9f14d982aa24eda4de795612292565b600781015460068860405192610bd484611f53565b600184528c84018c81528a604086019260443584526060870160a43581526080880191825260a0880194608435151586528b8d8a019416845260e08901948c8c1686526101008a019742895260018060a01b03166000526020600a905260406000208d8d16600052602052610c5d60406000209a5115158b9060ff801983541691151516179055565b5160018a0155516002890155516003880155516004870155610c926005870193511515849060ff801983541691151516179055565b519064ffffffff0068ffffffff00000000008454925160281b169260081b169068ffffffffffffffff0019161717905551910155608435600014610d2657600501610cde88825461216a565b90555b81604051958887526044358a8801526084351515604088015216606086015260a43560808601524260a0860152169360018060a01b031692a360018055604051908152f35b600601610d3488825461216a565b9055610ce1565b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b610d98915060203d602011610d9e575b610d908183611f70565b810190612197565b87610b88565b503d610d86565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152601860248201527f4d61726b657420636170616369747920657863656564656400000000000000006044820152606490fd5b610e0485600683015461216a565b610aef565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e2073697a6520746f6f206c617267650000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270098caeccae4c2ceca40e8dede40d0d2ced607b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f42656c6f7720676c6f62616c206d696e696d756d206d617267696e00000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f13585c99da5b881d1bdbc81cdb585b1b60821b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20616c7265616479206578697374730000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f53797374656d20697320696e20656d657267656e6379206d6f646500000000006044820152606490fd5b346102ac5760003660031901126102ac576004546040516001600160a01b039091168152602090f35b346102ac5760203660031901126102ac57610fd0611f17565b610fd8611f92565b6001600160a01b0316801561102057600580546001600160a01b031916821790557ffdcb9994e4d473b3bd591edff019610e7adebea2ed840dcbfe21fe7d62296de2600080a2005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206f72646572626f6f6b2061646472657373000000000000006044820152606490fd5b346102ac5760003660031901126102ac576020600854604051908152f35b346102ac5760003660031901126102ac576000546040516001600160a01b039091168152602090f35b346102ac5760003660031901126102ac576005546040516001600160a01b039091168152602090f35b346102ac5760003660031901126102ac576006546040516001600160a01b039091168152602090f35b346102ac5760203660031901126102ac57611117611f40565b600063ffffffff8216600052600b6020526040600020906005820154916006810154600c8201549485151560001461121c57611153828661216a565b95670de0b6b3a7640000968781029781890414901517156109495761117d6111839160c098612177565b91612600565b5061118d836128f3565b916008840154936111a260098201548661216a565b4210156111cc575b50604051958652602086015260408501526060840152608083015260a0820152f35b600a91955001546127106111e08285612242565b05818113156111f25750935b876111aa565b94906111fd81612265565b861261120a575b506111ec565b611215919550612265565b9387611204565b60c09550611183600091612600565b346102ac5760203660031901126102ac5763ffffffff611249611f40565b16600052600b6020526040600020600581015480156000146112b2575060005b6006820154918261128857506040915060005b82519182526020820152f35b670de0b6b3a76400008084029384040361094957604092600c6112ad92015490612177565b61127c565b670de0b6b3a76400008082029182040361094957600c8201546112d491612177565b611269565b346102ac5760003660031901126102ac576112f2611f92565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102ac5760803660031901126102ac5761134b611f17565b611353611f2d565b6005546001600160a01b03919061136d9083163314611fbe565b6113756121af565b63ffffffff8082169182600052602094600b865261139d60ff600e6040600020015416612093565b83600052600d86526113b760ff60406000205416156120d3565b858582169384600052600a825260406000208660005282526113e060ff6040600020541661243f565b84600052600a825260406000208660005282526040600020966040519361140685611f53565b60ff89541615158552600189015494848101958652610100600660028c01549b604084019c8d52600381015460608501526004810154608085015260058101549660a085019760ff811615158952818160081c1660c087015260281c1660e0850152015491015287600052600b84526114b96040600020916114b361148a89612600565b9861149f610aba6044359b606435908d6121df565b6114a881612292565b6108588a828561248b565b90612276565b9888600052600c85526127106114da60406000206001895191015490612157565b048a60008112611683576114f2906114f7935161216a565b6121d2565b925b511561166b576115106005865192019182546121d2565b90555b816115ab575b5050507fb266a68c763115f9e38948031eb363f250bda550b1b667dc5bd640b6d3650a8a9160809184600052600a88526040600020866000528852611586604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b519060405191825286888301526040820152426060820152a360018055604051908152f35b6006546004805460405163a9059cbb60e01b81529084166001600160a01b0316918101919091526024810193909352919291839116816000816044810103925af1908115610da55760009161164e575b501561160957858780611519565b60405162461bcd60e51b815260048101879052601d60248201527f5472616e7366657220746f20636f6c6c61746572616c206661696c65640000006044820152606490fd5b6116659150873d8911610d9e57610d908183611f70565b876115fb565b61167c6006865192019182546121d2565b9055611513565b61168c90612265565b9151808310156116a9576116a3926114f2916121d2565b926114f9565b50505060006116a3565b346102ac5760403660031901126102ac5760606116ce611f17565b61170d6116d9611f2d565b60018060a01b038316600052600a602052604060002063ffffffff821660005260205261084560ff604060002054166127f9565b906000811261172e579060015b604051928352151560208301526040820152f35b61173790612265565b90600061171a565b346102ac5760403660031901126102ac57602061176b61175d611f17565b611765611f2d565b9061283a565b604051908152f35b346102ac5760003660031901126102ac576009546040516001600160a01b039091168152602090f35b346102ac5760003660031901126102ac576020600354604051908152f35b346102ac5760003660031901126102ac576020600754604051908152f35b346102ac5760203660031901126102ac5763ffffffff6117f6611f40565b16600052600d602052602060ff604060002054166040519015158152f35b346102ac576020806003193601126102ac5761182e611f40565b90611837611f92565b61184e63ffffffff80600e5416931692831061200a565b6000828152600b82526040902060010154611873906001600160a01b0316151561204e565b81600052600d815260ff604060002054166118cc577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600d81526040600020600160ff1982541617905560405160018152a2005b6064906040519062461bcd60e51b82526004820152601560248201527413585c9ad95d08185b1c9958591e481c185d5cd959605a1b6044820152fd5b346102ac5760403660031901126102ac57611921611f17565b611929611f2d565b906119326121af565b63ffffffff821680600052602092600b845261195860ff600e6040600020015416612093565b81600052600d845261197260ff60406000205416156120d3565b60018060a01b03928381169182600052600a865260406000208460005286526119a260ff6040600020541661243f565b82600052600a865260406000208460005286526040600020600b8752604060002095600c88526119f26040600020946114b36119dd86612600565b956119e781612292565b61085887828561248b565b9360008512611dc157611a0985600285015461216a565b611a22600285015461271091829160038d015490612157565b048211611d7c579081611a4c60038594611a428f98976002015486612157565b0494015484612157565b04611a5781846121d2565b9a60ff600588015416600014611d6157611a7b6005600189015492019182546121d2565b90555b80611c9c575b5089611bea575b90611a95916121d2565b9081611b31575b5050509160809160017f575af161dc7fcfec91ce8b044ddfdc06c97cf3c371b3b030fc3bc9c697d085679486600052600a8a526040600020886000528a52611b0c604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b015491604051928352338984015260408301526060820152a360018055604051908152f35b6006546004805460405163a9059cbb60e01b81529084166001600160a01b0316918101919091526024810193909352919291839116816000816044810103925af1908115610da557600091611bcd575b5015611b8f57868880611a9c565b60405162461bcd60e51b815260048101889052601660248201527514995d1d5c9b881d1c985b9cd9995c8819985a5b195960521b6044820152606490fd5b611be49150883d8a11610d9e57610d908183611f70565b88611b81565b60065460405163a9059cbb60e01b8152336004820152602481018c9052939492939192908290604490829060009089165af1908115610da557600091611c7f575b5015611c3a5790899291611a8b565b60405162461bcd60e51b8152600481018b9052601e60248201527f4c697175696461746f7220666565207472616e73666572206661696c656400006044820152606490fd5b611c9691508b3d8d11610d9e57610d908183611f70565b8b611c2b565b60065460095460405163a9059cbb60e01b81529086166001600160a01b031660048201526024810192909252939492939192909182908616816000816044810103925af1908115610da557600091611d44575b5015611cff57908992918b611a84565b60405162461bcd60e51b8152600481018b9052601c60248201527f50726f746f636f6c20666565207472616e73666572206661696c6564000000006044820152606490fd5b611d5b91508b3d8d11610d9e57610d908183611f70565b8b611cef565b611d756006600189015492019182546121d2565b9055611a7e565b60405162461bcd60e51b8152600481018c9052601960248201527f506f736974696f6e206e6f74206c6971756964617461626c65000000000000006044820152606490fd5b611dca85612265565b6002840154809110600014611deb57611de6906108d087612265565b611a09565b506000611a09565b346102ac5760403660031901126102ac57610120611e0f611f17565b611e17611f2d565b9060018060a01b0316600052600a602052604060002063ffffffff809216600052602052604060002060ff815416916001820154916002810154600382015460048301549160066005850154940154956040519715158852602088015260408701526060860152608085015260ff8116151560a0850152818160081c1660c085015260281c1660e0830152610100820152f35b60003660031901126102ac577f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e8846040600354611ee6348261216a565b8060035582519182526020820152a1005b346102ac5760003660031901126102ac5760209060ff6002541615158152f35b600435906001600160a01b03821682036102ac57565b6024359063ffffffff821682036102ac57565b6004359063ffffffff821682036102ac57565b610120810190811067ffffffffffffffff82111761077457604052565b90601f8019910116810190811067ffffffffffffffff82111761077457604052565b6000546001600160a01b03163303611fa657565b60405163118cdaa760e01b8152336004820152602490fd5b15611fc557565b60405162461bcd60e51b815260206004820152601760248201527f4f6e6c79206f72646572626f6f6b2063616e2063616c6c0000000000000000006044820152606490fd5b1561201157565b60405162461bcd60e51b815260206004820152601560248201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606490fd5b1561205557565b60405162461bcd60e51b815260206004820152601660248201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b6044820152606490fd5b1561209a57565b60405162461bcd60e51b81526020600482015260116024820152704d61726b6574206e6f742061637469766560781b6044820152606490fd5b156120da57565b60405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc81c185d5cd95960821b6044820152606490fd5b1561211957565b60405162461bcd60e51b81526020600482015260166024820152755072696365206578636565647320736c69707061676560501b6044820152606490fd5b8181029291811591840414171561094957565b9190820180921161094957565b8115612181570490565b634e487b7160e01b600052601260045260246000fd5b908160209103126102ac575180151581036102ac5790565b6002600154146121c0576002600155565b604051633ee5aeb560e01b8152600490fd5b9190820391821161094957565b8015801561223a575b612232578180821115612222576121fe916121d2565b905b612710918281029281840414901517156109495761221d91612177565b111590565b9061222c916121d2565b90612200565b505050600090565b5081156121e8565b818102929160008212600160ff1b82141661094957818405149015171561094957565b600160ff1b81146109495760000390565b9190916000838201938412911290801582169115161761094957565b63ffffffff166000818152600b602052604081209060088201918254926009820154936122bf858261216a565b4210612437576122d3856108cb83426121d2565b94851561242e5760068401549485156123e1576005850154612710908181029181830414901517156123cd578661230991612177565b61270f1981019081136001166123cd576005936109107fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b2387999794606099979461238e945b61271061235f600a8a01548093612242565b0591818313156123a557509050985b612378818b612242565b61238760078901918254612276565b9055612157565b9055015460405192835260208301526040820152a2565b6123ae82612265565b83121590506123c7576123c19150612265565b9861236e565b506123c1565b634e487b7160e01b82526011600452602482fd5b9261238e600593610910879460609997877fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b23879c9a015415156000146124285761271061234d565b8061234d565b50505050505050565b505050505050565b1561244657565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20646f6573206e6f742065786973740000000000000000006044820152606490fd5b60018060a01b0316600052600a60205263ffffffff6040600020911660005260205260406000209060ff60058301541660001461250b57600382015490818111156124ef576124ec9260016124e3846108cb946121d2565b91015490612157565b90565b906108cb6124ec9360016124e361250695856121d2565b612265565b6003820154908181111561253057906108cb6124ec9360016124e384612506966121d2565b6124ec9260016124e36108cb93856121d2565b919060009260018060a01b03168352600a60205263ffffffff604084209116835260205260408220600b60205260076040842001546004820154908482820392128183128116918313901516176125d557670de0b6b3a764000092935060ff6005830154166000146125c8576125bf60016125c4930154612265565b612242565b0590565b60016125c4920154612242565b634e487b7160e01b84526011600452602484fd5b519069ffffffffffffffffffff821682036102ac57565b63ffffffff166000908152600b60209081526040808320600101548151633fabe5a360e21b81529392600492909160a0908690859082906001600160a01b03165afa9485156127ef578495859686928792612797575b508688131561275d5782156127255769ffffffffffffffffffff8091169116106126f557612687610e1091426121d2565b116126bd5750506402540be400928381029381850414901517156126aa57505090565b634e487b7160e01b825260119052602490fd5b5162461bcd60e51b815291820152601460248201527313dc9858db19481c1c9a58d9481d1bdbc81bdb1960621b604482015260649150fd5b505162461bcd60e51b815291820152600b60248201526a5374616c6520707269636560a81b604482015260649150fd5b835162461bcd60e51b81528087018690526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606490fd5b835162461bcd60e51b81528087018690526014602482015273496e76616c6964206f7261636c6520707269636560601b6044820152606490fd5b975050505060a0853d82116127e7575b816127b460a09383611f70565b810103126127e3576127c5856125e9565b828601516127da6080606089015198016125e9565b90969138612656565b8380fd5b3d91506127a7565b81513d86823e3d90fd5b1561280057565b60405162461bcd60e51b8152602060048201526012602482015271141bdcda5d1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b9061287660009260018060a01b0381168452600a6020526040842063ffffffff841685526020526114b3604085209361084560ff8654166127f9565b8281126128c35761288b90600283015461216a565b915b612710928381029381850414901517156128af5750600201546124ec91612177565b634e487b7160e01b81526011600452602490fd5b6128cc81612265565b60028301548091106000146128ed576108d06128e792612265565b9161288d565b50505090565b6006810154908115612940576005015490670de0b6b3a7640000918281029281840414901517156109495761292791612177565b670de0b6b3a763ffff1981019081136001166109495790565b505060009056fea2646970667358221220a03508c548abd34ea3d4f169d467d81f4fa872425afc804a783ad25209ff943c64736f6c63430008140033",
  "deployedBytecode": "0x610100806040526004361015610067575b50361561001c57600080fd5b7f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e884604061004b3460035461216a565b8060035561005934826121d2565b9082519182526020820152a1005b60003560e01c9081630905f56014611ef7575080630bba41a814611eaa578063160d8b2814611df35780631c804dcb146119085780632d2451d114611814578063367c7605146117d857806339c294be146117ba5780633dbc645d1461179c57806346904840146117735780634c1d81d41461173f57806352003d18146116b35780635300e18314611332578063715018a6146112d9578063717659161461122b57806374d6672d146110fe578063768e48a1146110d5578063776af5ba146110ac5780638da5cb5b14611083578063960b26a2146110655780639a1598c814610fb75780639cd7a34b14610f8e5780639f7e44c51461095f578063aca55a89146107e0578063b97d5dbe14610686578063c5b1c7d0146105e4578063ca4e5b6f1461058b578063ec97908214610567578063ece91e351461033f578063f2fde38b146102b15763fb9f1009146101be5738610010565b346102ac576020806003193601126102ac576101d8611f40565b906101e1611f92565b6101f863ffffffff80600e5416931692831061200a565b6000828152600b8252604090206001015461021d906001600160a01b0316151561204e565b81600052600d815260ff6040600020541615610274577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600d8152604060002060ff19815416905560405160008152a2005b6064906040519062461bcd60e51b82526004820152601160248201527013585c9ad95d081b9bdd081c185d5cd959607a1b6044820152fd5b600080fd5b346102ac5760203660031901126102ac576102ca611f17565b6102d2611f92565b6001600160a01b0390811690811561032657600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346102ac5760203660031901126102ac5763ffffffff61035d611f40565b16600052600b602052604060002060405190600081549060019180831c9183821691821561055d575b60208410831461054757838752869290811561052857506001146104e4575b6103b192500384611f70565b60018060a01b03908201541660805260028101549060038101546004820154600583015460068401546007850154600886015490600987015492600a88015494600b89015496600c8a01549860ff600e600d8d01549c01541660c0526040518060a0526101e08091528d51908160e05260a051015260005b60e05181101561044c578d810160209081015160a0518301610200015201610429565b508b600061020060e05160a051010152608051602060a0510152604060a0510152606060a0510152608060a051015260a08051015260c060a051015260e060a051015261010060a051015261012060a051015261014060a051015261016060a051015261018060a05101526101a060a051015260c05115156101c060a051015260a05161020081601f19601f60e05101168101030190f35b509083600052602060002090836000925b82841061050e575050509060206103b1928201016103a5565b6020929450805483858a01015201910190918386936104f5565b602092506103b194915060ff191682840152151560051b8201016103a5565b634e487b7160e01b600052602260045260246000fd5b92607f1692610386565b346102ac5760003660031901126102ac57602063ffffffff600e5416604051908152f35b346102ac5760203660031901126102ac5763ffffffff6105a9611f40565b16600052600c602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b346102ac5760003660031901126102ac576105fd611f92565b60025460ff81166106415760019060ff1916176002556040514281527f86e6259fbf164140d541a86ff1a2a0606fa80f77ed47ca4748ca84810358afcb60203392a2005b60405162461bcd60e51b815260206004820152601e60248201527f456d657267656e6379206d6f646520616c726561647920656e61626c656400006044820152606490fd5b346102ac576020806003193601126102ac57600435906106a4611f92565b6003549182811161078f5760008080836106bf8295886121d2565b60035581546001600160a01b03165af13d1561078a573d67ffffffffffffffff811161077457604051906106fc601f8201601f1916850183611f70565b81526000833d92013e5b1561073e5760035460408051938452918301527f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e88491a1005b6064906040519062461bcd60e51b82526004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152fd5b634e487b7160e01b600052604160045260246000fd5b610706565b60405162461bcd60e51b815260048101839052602360248201527f496e73756666696369656e7420696e737572616e63652066756e642062616c616044820152626e636560e81b6064820152608490fd5b346102ac5760403660031901126102ac576107f9611f17565b610801611f2d565b60018060a01b038216600052600a602052604060002063ffffffff8216600052602052604060002091600b60205261085e60406000209261084560ff8654166127f9565b61085861085182612600565b828561248b565b92612543565b90600284015493610878836108738488612276565b612276565b946000861361091c5760a0955060036000955b01549161271061089b8484612157565b049060ff6005820154166000146108f7576108d6926108cb6108c560036108d094015494836121d2565b84612157565b612177565b906121d2565b935b6040519481865260208601521115604084015260608301526080820152f35b610916926108cb6108c5600361091094015494836121d2565b9061216a565b936108d8565b6127109586810296818804149015171561094957600361094360a097600185015490612177565b9561088b565b634e487b7160e01b600052601160045260246000fd5b346102ac5760e03660031901126102ac57610978611f17565b610980611f2d565b63ffffffff9160643583811681036102ac576084351515608435036102ac576109b460018060a01b03600554163314611fbe565b6109bc6121af565b6109cd84600e54168585161061200a565b8284166000908152600b60205260409020600101546109f6906001600160a01b0316151561204e565b838316600052600b602052610a1560ff600e6040600020015416612093565b838316600052600d602052610a3260ff60406000205416156120d3565b60ff60025416610f4957838316600052600b602052604060002092610a5681612600565b60018060a01b038416600052600a602052604060002086831660005260205260ff60406000205416610f0457600d85015460443510610ecc5760075460443510610e8757600285015486841611610e4e57610aba610abf9160c4359060a4356121df565b612112565b610acd858316604435612157565b93600b8101548511610e095760843515610df657610aef85600583015461216a565b600c82015410610db157858216600052600c6020526040600020610b296003612710610b1f60018501548a612157565b0492015482612157565b506006546004546001600160a01b039182169260209290911690606490610b529060443561216a565b91600060405195869485936323b872dd60e01b8552600485015230602485015260448401525af1908115610da557600091610d76575b5015610d3b576020958260c092610bbf7f52710922282cb913690ab8fed6a1d7ec4464874aaf30f9f14d982aa24eda4de795612292565b600781015460068860405192610bd484611f53565b600184528c84018c81528a604086019260443584526060870160a43581526080880191825260a0880194608435151586528b8d8a019416845260e08901948c8c1686526101008a019742895260018060a01b03166000526020600a905260406000208d8d16600052602052610c5d60406000209a5115158b9060ff801983541691151516179055565b5160018a0155516002890155516003880155516004870155610c926005870193511515849060ff801983541691151516179055565b519064ffffffff0068ffffffff00000000008454925160281b169260081b169068ffffffffffffffff0019161717905551910155608435600014610d2657600501610cde88825461216a565b90555b81604051958887526044358a8801526084351515604088015216606086015260a43560808601524260a0860152169360018060a01b031692a360018055604051908152f35b600601610d3488825461216a565b9055610ce1565b60405162461bcd60e51b8152602060048201526013602482015272119959481d1c985b9cd9995c8819985a5b1959606a1b6044820152606490fd5b610d98915060203d602011610d9e575b610d908183611f70565b810190612197565b87610b88565b503d610d86565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152601860248201527f4d61726b657420636170616369747920657863656564656400000000000000006044820152606490fd5b610e0485600683015461216a565b610aef565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e2073697a6520746f6f206c617267650000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270098caeccae4c2ceca40e8dede40d0d2ced607b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f42656c6f7720676c6f62616c206d696e696d756d206d617267696e00000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f13585c99da5b881d1bdbc81cdb585b1b60821b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20616c7265616479206578697374730000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f53797374656d20697320696e20656d657267656e6379206d6f646500000000006044820152606490fd5b346102ac5760003660031901126102ac576004546040516001600160a01b039091168152602090f35b346102ac5760203660031901126102ac57610fd0611f17565b610fd8611f92565b6001600160a01b0316801561102057600580546001600160a01b031916821790557ffdcb9994e4d473b3bd591edff019610e7adebea2ed840dcbfe21fe7d62296de2600080a2005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206f72646572626f6f6b2061646472657373000000000000006044820152606490fd5b346102ac5760003660031901126102ac576020600854604051908152f35b346102ac5760003660031901126102ac576000546040516001600160a01b039091168152602090f35b346102ac5760003660031901126102ac576005546040516001600160a01b039091168152602090f35b346102ac5760003660031901126102ac576006546040516001600160a01b039091168152602090f35b346102ac5760203660031901126102ac57611117611f40565b600063ffffffff8216600052600b6020526040600020906005820154916006810154600c8201549485151560001461121c57611153828661216a565b95670de0b6b3a7640000968781029781890414901517156109495761117d6111839160c098612177565b91612600565b5061118d836128f3565b916008840154936111a260098201548661216a565b4210156111cc575b50604051958652602086015260408501526060840152608083015260a0820152f35b600a91955001546127106111e08285612242565b05818113156111f25750935b876111aa565b94906111fd81612265565b861261120a575b506111ec565b611215919550612265565b9387611204565b60c09550611183600091612600565b346102ac5760203660031901126102ac5763ffffffff611249611f40565b16600052600b6020526040600020600581015480156000146112b2575060005b6006820154918261128857506040915060005b82519182526020820152f35b670de0b6b3a76400008084029384040361094957604092600c6112ad92015490612177565b61127c565b670de0b6b3a76400008082029182040361094957600c8201546112d491612177565b611269565b346102ac5760003660031901126102ac576112f2611f92565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102ac5760803660031901126102ac5761134b611f17565b611353611f2d565b6005546001600160a01b03919061136d9083163314611fbe565b6113756121af565b63ffffffff8082169182600052602094600b865261139d60ff600e6040600020015416612093565b83600052600d86526113b760ff60406000205416156120d3565b858582169384600052600a825260406000208660005282526113e060ff6040600020541661243f565b84600052600a825260406000208660005282526040600020966040519361140685611f53565b60ff89541615158552600189015494848101958652610100600660028c01549b604084019c8d52600381015460608501526004810154608085015260058101549660a085019760ff811615158952818160081c1660c087015260281c1660e0850152015491015287600052600b84526114b96040600020916114b361148a89612600565b9861149f610aba6044359b606435908d6121df565b6114a881612292565b6108588a828561248b565b90612276565b9888600052600c85526127106114da60406000206001895191015490612157565b048a60008112611683576114f2906114f7935161216a565b6121d2565b925b511561166b576115106005865192019182546121d2565b90555b816115ab575b5050507fb266a68c763115f9e38948031eb363f250bda550b1b667dc5bd640b6d3650a8a9160809184600052600a88526040600020866000528852611586604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b519060405191825286888301526040820152426060820152a360018055604051908152f35b6006546004805460405163a9059cbb60e01b81529084166001600160a01b0316918101919091526024810193909352919291839116816000816044810103925af1908115610da55760009161164e575b501561160957858780611519565b60405162461bcd60e51b815260048101879052601d60248201527f5472616e7366657220746f20636f6c6c61746572616c206661696c65640000006044820152606490fd5b6116659150873d8911610d9e57610d908183611f70565b876115fb565b61167c6006865192019182546121d2565b9055611513565b61168c90612265565b9151808310156116a9576116a3926114f2916121d2565b926114f9565b50505060006116a3565b346102ac5760403660031901126102ac5760606116ce611f17565b61170d6116d9611f2d565b60018060a01b038316600052600a602052604060002063ffffffff821660005260205261084560ff604060002054166127f9565b906000811261172e579060015b604051928352151560208301526040820152f35b61173790612265565b90600061171a565b346102ac5760403660031901126102ac57602061176b61175d611f17565b611765611f2d565b9061283a565b604051908152f35b346102ac5760003660031901126102ac576009546040516001600160a01b039091168152602090f35b346102ac5760003660031901126102ac576020600354604051908152f35b346102ac5760003660031901126102ac576020600754604051908152f35b346102ac5760203660031901126102ac5763ffffffff6117f6611f40565b16600052600d602052602060ff604060002054166040519015158152f35b346102ac576020806003193601126102ac5761182e611f40565b90611837611f92565b61184e63ffffffff80600e5416931692831061200a565b6000828152600b82526040902060010154611873906001600160a01b0316151561204e565b81600052600d815260ff604060002054166118cc577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600d81526040600020600160ff1982541617905560405160018152a2005b6064906040519062461bcd60e51b82526004820152601560248201527413585c9ad95d08185b1c9958591e481c185d5cd959605a1b6044820152fd5b346102ac5760403660031901126102ac57611921611f17565b611929611f2d565b906119326121af565b63ffffffff821680600052602092600b845261195860ff600e6040600020015416612093565b81600052600d845261197260ff60406000205416156120d3565b60018060a01b03928381169182600052600a865260406000208460005286526119a260ff6040600020541661243f565b82600052600a865260406000208460005286526040600020600b8752604060002095600c88526119f26040600020946114b36119dd86612600565b956119e781612292565b61085887828561248b565b9360008512611dc157611a0985600285015461216a565b611a22600285015461271091829160038d015490612157565b048211611d7c579081611a4c60038594611a428f98976002015486612157565b0494015484612157565b04611a5781846121d2565b9a60ff600588015416600014611d6157611a7b6005600189015492019182546121d2565b90555b80611c9c575b5089611bea575b90611a95916121d2565b9081611b31575b5050509160809160017f575af161dc7fcfec91ce8b044ddfdc06c97cf3c371b3b030fc3bc9c697d085679486600052600a8a526040600020886000528a52611b0c604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b015491604051928352338984015260408301526060820152a360018055604051908152f35b6006546004805460405163a9059cbb60e01b81529084166001600160a01b0316918101919091526024810193909352919291839116816000816044810103925af1908115610da557600091611bcd575b5015611b8f57868880611a9c565b60405162461bcd60e51b815260048101889052601660248201527514995d1d5c9b881d1c985b9cd9995c8819985a5b195960521b6044820152606490fd5b611be49150883d8a11610d9e57610d908183611f70565b88611b81565b60065460405163a9059cbb60e01b8152336004820152602481018c9052939492939192908290604490829060009089165af1908115610da557600091611c7f575b5015611c3a5790899291611a8b565b60405162461bcd60e51b8152600481018b9052601e60248201527f4c697175696461746f7220666565207472616e73666572206661696c656400006044820152606490fd5b611c9691508b3d8d11610d9e57610d908183611f70565b8b611c2b565b60065460095460405163a9059cbb60e01b81529086166001600160a01b031660048201526024810192909252939492939192909182908616816000816044810103925af1908115610da557600091611d44575b5015611cff57908992918b611a84565b60405162461bcd60e51b8152600481018b9052601c60248201527f50726f746f636f6c20666565207472616e73666572206661696c6564000000006044820152606490fd5b611d5b91508b3d8d11610d9e57610d908183611f70565b8b611cef565b611d756006600189015492019182546121d2565b9055611a7e565b60405162461bcd60e51b8152600481018c9052601960248201527f506f736974696f6e206e6f74206c6971756964617461626c65000000000000006044820152606490fd5b611dca85612265565b6002840154809110600014611deb57611de6906108d087612265565b611a09565b506000611a09565b346102ac5760403660031901126102ac57610120611e0f611f17565b611e17611f2d565b9060018060a01b0316600052600a602052604060002063ffffffff809216600052602052604060002060ff815416916001820154916002810154600382015460048301549160066005850154940154956040519715158852602088015260408701526060860152608085015260ff8116151560a0850152818160081c1660c085015260281c1660e0830152610100820152f35b60003660031901126102ac577f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e8846040600354611ee6348261216a565b8060035582519182526020820152a1005b346102ac5760003660031901126102ac5760209060ff6002541615158152f35b600435906001600160a01b03821682036102ac57565b6024359063ffffffff821682036102ac57565b6004359063ffffffff821682036102ac57565b610120810190811067ffffffffffffffff82111761077457604052565b90601f8019910116810190811067ffffffffffffffff82111761077457604052565b6000546001600160a01b03163303611fa657565b60405163118cdaa760e01b8152336004820152602490fd5b15611fc557565b60405162461bcd60e51b815260206004820152601760248201527f4f6e6c79206f72646572626f6f6b2063616e2063616c6c0000000000000000006044820152606490fd5b1561201157565b60405162461bcd60e51b815260206004820152601560248201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606490fd5b1561205557565b60405162461bcd60e51b815260206004820152601660248201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b6044820152606490fd5b1561209a57565b60405162461bcd60e51b81526020600482015260116024820152704d61726b6574206e6f742061637469766560781b6044820152606490fd5b156120da57565b60405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc81c185d5cd95960821b6044820152606490fd5b1561211957565b60405162461bcd60e51b81526020600482015260166024820152755072696365206578636565647320736c69707061676560501b6044820152606490fd5b8181029291811591840414171561094957565b9190820180921161094957565b8115612181570490565b634e487b7160e01b600052601260045260246000fd5b908160209103126102ac575180151581036102ac5790565b6002600154146121c0576002600155565b604051633ee5aeb560e01b8152600490fd5b9190820391821161094957565b8015801561223a575b612232578180821115612222576121fe916121d2565b905b612710918281029281840414901517156109495761221d91612177565b111590565b9061222c916121d2565b90612200565b505050600090565b5081156121e8565b818102929160008212600160ff1b82141661094957818405149015171561094957565b600160ff1b81146109495760000390565b9190916000838201938412911290801582169115161761094957565b63ffffffff166000818152600b602052604081209060088201918254926009820154936122bf858261216a565b4210612437576122d3856108cb83426121d2565b94851561242e5760068401549485156123e1576005850154612710908181029181830414901517156123cd578661230991612177565b61270f1981019081136001166123cd576005936109107fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b2387999794606099979461238e945b61271061235f600a8a01548093612242565b0591818313156123a557509050985b612378818b612242565b61238760078901918254612276565b9055612157565b9055015460405192835260208301526040820152a2565b6123ae82612265565b83121590506123c7576123c19150612265565b9861236e565b506123c1565b634e487b7160e01b82526011600452602482fd5b9261238e600593610910879460609997877fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b23879c9a015415156000146124285761271061234d565b8061234d565b50505050505050565b505050505050565b1561244657565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20646f6573206e6f742065786973740000000000000000006044820152606490fd5b60018060a01b0316600052600a60205263ffffffff6040600020911660005260205260406000209060ff60058301541660001461250b57600382015490818111156124ef576124ec9260016124e3846108cb946121d2565b91015490612157565b90565b906108cb6124ec9360016124e361250695856121d2565b612265565b6003820154908181111561253057906108cb6124ec9360016124e384612506966121d2565b6124ec9260016124e36108cb93856121d2565b919060009260018060a01b03168352600a60205263ffffffff604084209116835260205260408220600b60205260076040842001546004820154908482820392128183128116918313901516176125d557670de0b6b3a764000092935060ff6005830154166000146125c8576125bf60016125c4930154612265565b612242565b0590565b60016125c4920154612242565b634e487b7160e01b84526011600452602484fd5b519069ffffffffffffffffffff821682036102ac57565b63ffffffff166000908152600b60209081526040808320600101548151633fabe5a360e21b81529392600492909160a0908690859082906001600160a01b03165afa9485156127ef578495859686928792612797575b508688131561275d5782156127255769ffffffffffffffffffff8091169116106126f557612687610e1091426121d2565b116126bd5750506402540be400928381029381850414901517156126aa57505090565b634e487b7160e01b825260119052602490fd5b5162461bcd60e51b815291820152601460248201527313dc9858db19481c1c9a58d9481d1bdbc81bdb1960621b604482015260649150fd5b505162461bcd60e51b815291820152600b60248201526a5374616c6520707269636560a81b604482015260649150fd5b835162461bcd60e51b81528087018690526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606490fd5b835162461bcd60e51b81528087018690526014602482015273496e76616c6964206f7261636c6520707269636560601b6044820152606490fd5b975050505060a0853d82116127e7575b816127b460a09383611f70565b810103126127e3576127c5856125e9565b828601516127da6080606089015198016125e9565b90969138612656565b8380fd5b3d91506127a7565b81513d86823e3d90fd5b1561280057565b60405162461bcd60e51b8152602060048201526012602482015271141bdcda5d1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b9061287660009260018060a01b0381168452600a6020526040842063ffffffff841685526020526114b3604085209361084560ff8654166127f9565b8281126128c35761288b90600283015461216a565b915b612710928381029381850414901517156128af5750600201546124ec91612177565b634e487b7160e01b81526011600452602490fd5b6128cc81612265565b60028301548091106000146128ed576108d06128e792612265565b9161288d565b50505090565b6006810154908115612940576005015490670de0b6b3a7640000918281029281840414901517156109495761292791612177565b670de0b6b3a763ffff1981019081136001166109495790565b505060009056fea2646970667358221220a03508c548abd34ea3d4f169d467d81f4fa872425afc804a783ad25209ff943c64736f6c63430008140033",
  "devdoc": {
    "details": "Core contract for perpetual trading with hasMON as collateral",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PerpEngine",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1686,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2464,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "emergencyMode",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 2466,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "insuranceFundBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2527,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "hasMonCollateral",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2529,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "orderBook",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2532,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "hasMON",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)923"
      },
      {
        "astId": 2534,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "minMargin",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2536,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "protocolFeeShare",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2538,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2545,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "positions",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Position)2485_storage))"
      },
      {
        "astId": 2550,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "markets",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_struct(Market)2516_storage)"
      },
      {
        "astId": 2555,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "marketFees",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint32,t_struct(FeeStructure)2525_storage)"
      },
      {
        "astId": 2559,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "marketPaused",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 2561,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "marketCount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)923": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Position)2485_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct PerpEngine.Position))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Position)2485_storage)"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_struct(FeeStructure)2525_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct PerpEngine.FeeStructure)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeStructure)2525_storage"
      },
      "t_mapping(t_uint32,t_struct(Market)2516_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct PerpEngine.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)2516_storage"
      },
      "t_mapping(t_uint32,t_struct(Position)2485_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct PerpEngine.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)2485_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeStructure)2525_storage": {
        "encoding": "inplace",
        "label": "struct PerpEngine.FeeStructure",
        "members": [
          {
            "astId": 2518,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "makerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2520,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "takerFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2522,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "liquidationFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2524,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "protocolShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Market)2516_storage": {
        "encoding": "inplace",
        "label": "struct PerpEngine.Market",
        "members": [
          {
            "astId": 2487,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2489,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "oracle",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2491,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxLeverage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2493,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "liquidationThreshold",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2495,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2497,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "openInterestLong",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2499,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "openInterestShort",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2501,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "cumulativeFunding",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 2503,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "lastFundingTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2505,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "fundingInterval",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 2507,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxFundingRate",
            "offset": 0,
            "slot": "10",
            "type": "t_int256"
          },
          {
            "astId": 2509,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxPositionSize",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 2511,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxOpenInterest",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 2513,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "minInitialMargin",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 2515,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "isActive",
            "offset": 0,
            "slot": "14",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Position)2485_storage": {
        "encoding": "inplace",
        "label": "struct PerpEngine.Position",
        "members": [
          {
            "astId": 2468,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "isOpen",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2470,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "size",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2472,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "margin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2474,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "entryPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2476,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "lastCumulativeFunding",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 2478,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "isLong",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 2480,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "leverage",
            "offset": 1,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 2482,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "marketIndex",
            "offset": 5,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 2484,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}