{
  "address": "0x7D1bf601aB6c904aF47eF23d44F7B1572e5EeaA6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minMargin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolFeeShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "EmergencyModeEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingRate",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openInterestLong",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "openInterestShort",
          "type": "uint256"
        }
      ],
      "name": "FundingUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "InsuranceFundUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxPositionSize",
          "type": "uint256"
        }
      ],
      "name": "MarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "MarketPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOrderBook",
          "type": "address"
        }
      ],
      "name": "OrderBookUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exitPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PositionClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidationPrice",
          "type": "uint256"
        }
      ],
      "name": "PositionLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "leverage",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PositionOpened",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingInterval",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "maxFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maxPositionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minInitialMargin",
          "type": "uint256"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addToInsuranceFund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "closePosition",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "collateralBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableEmergencyMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getMarketStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "longOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "utilizationRate",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "skewness",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "currentFundingRate",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getMarketUtilization",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "longUtil",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shortUtil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getPositionRisk",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "marginRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isLiquidatable",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "unrealizedPnl",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "fundingPayment",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "getPositionValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "hasProfit",
          "type": "bool"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceFundBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "liquidatePosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "makerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "takerFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "marketPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidationThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openInterestLong",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openInterestShort",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "cumulativeFunding",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastFundingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingInterval",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "maxFundingRate",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "maxPositionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minInitialMargin",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "leverage",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "openPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "pauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOpen",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryPrice",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "lastCumulativeFunding",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "leverage",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "marketIndex",
          "type": "uint32"
        }
      ],
      "name": "unpauseMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromInsuranceFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf1ded6bb787bc51efbae40ea7ae1c9ae9d4dab11b54e1d17ffed94d4d1b129e0",
  "receipt": {
    "to": null,
    "from": "0x5E729a4F664abf7045466f12039a513DE9572E17",
    "contractAddress": "0x7D1bf601aB6c904aF47eF23d44F7B1572e5EeaA6",
    "transactionIndex": 9,
    "gasUsed": "2663482",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000001c00020000000000000000200000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000002000000000000000000000",
    "blockHash": "0x0b34015f74606c1924c05f030947fd0f10894f578cb03bf939fac05225272d27",
    "transactionHash": "0xf1ded6bb787bc51efbae40ea7ae1c9ae9d4dab11b54e1d17ffed94d4d1b129e0",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 6035434,
        "transactionHash": "0xf1ded6bb787bc51efbae40ea7ae1c9ae9d4dab11b54e1d17ffed94d4d1b129e0",
        "address": "0x7D1bf601aB6c904aF47eF23d44F7B1572e5EeaA6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e729a4f664abf7045466f12039a513de9572e17"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x0b34015f74606c1924c05f030947fd0f10894f578cb03bf939fac05225272d27"
      }
    ],
    "blockNumber": 6035434,
    "cumulativeGasUsed": "3893753",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5E729a4F664abf7045466f12039a513DE9572E17",
    "100000000000000000",
    500
  ],
  "numDeployments": 3,
  "solcInputHash": "8b5ccc3fd01ef5ac1b5adcdaffe63075",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minMargin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFeeShare\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"EmergencyModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterestLong\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"openInterestShort\",\"type\":\"uint256\"}],\"name\":\"FundingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"InsuranceFundUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxPositionSize\",\"type\":\"uint256\"}],\"name\":\"MarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"MarketPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOrderBook\",\"type\":\"address\"}],\"name\":\"OrderBookUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exitPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PositionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"}],\"name\":\"PositionLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PositionOpened\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addToInsuranceFund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"closePosition\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getMarketStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"longOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"utilizationRate\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"skewness\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"currentFundingRate\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getMarketUtilization\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"longUtil\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shortUtil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getPositionRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marginRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLiquidatable\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"unrealizedPnl\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"fundingPayment\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"getPositionValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"hasProfit\",\"type\":\"bool\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceFundBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"liquidatePosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"makerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"takerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"marketPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openInterestLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openInterestShort\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"cumulativeFunding\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastFundingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingInterval\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"maxFundingRate\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"maxPositionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minInitialMargin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"openPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"pauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryPrice\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"lastCumulativeFunding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"leverage\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"marketIndex\",\"type\":\"uint32\"}],\"name\":\"unpauseMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromInsuranceFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Core contract for perpetual trading with hasMON as collateral\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PerpEngine\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/perps/PerpEngine.sol\":\"PerpEngine\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/perps/PerpEngine.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/**\\n * @title PerpEngine\\n * @dev Core contract for perpetual trading with hasMON as collateral\\n */\\ncontract PerpEngine is Ownable, ReentrancyGuard {\\n    // Constants\\n    uint256 private constant PRECISION = 1e18;\\n    uint256 private constant BASIS_POINTS = 10000;\\n    uint256 private constant MAX_LEVERAGE = 100; // 100x max leverage\\n    uint256 private constant MIN_LIQUIDATION_THRESHOLD = 50; // 50%\\n    uint256 private constant LIQUIDATION_FEE = 500; // 5% in basis points\\n    uint256 private constant PRICE_PRECISION = 1e10; // For Chainlink price conversion\\n\\n    // State\\n    bool public emergencyMode;\\n    uint256 public insuranceFundBalance;\\n\\n    mapping(address => mapping(address => uint256)) public collateralBalances;\\n\\n    struct Position {\\n        bool isOpen;\\n        uint256 size; // Position size in USD (x10^18)\\n        uint256 margin; // Initial margin in hasMON tokens\\n        uint256 entryPrice; // Entry price in USD (x10^18)\\n        int256 lastCumulativeFunding; // Funding state at entry\\n        bool isLong; // Long or short position\\n        uint32 leverage; // Leverage as an integer\\n        uint32 marketIndex; // Index of the market\\n        uint256 lastUpdateTime; // Last time position was updated\\n    }\\n\\n    struct Market {\\n        string symbol; // Market symbol (e.g., \\\"BTC-USD\\\")\\n        address oracle; // Chainlink oracle address\\n        uint256 maxLeverage; // Maximum allowed leverage\\n        uint256 liquidationThreshold; // % of margin to trigger liquidation\\n        uint256 fee; // Trading fee in bps\\n        uint256 openInterestLong; // Total long positions USD\\n        uint256 openInterestShort; // Total short positions USD\\n        int256 cumulativeFunding; // Accumulated funding\\n        uint256 lastFundingTime; // Last funding update\\n        uint256 fundingInterval; // Funding rate interval\\n        int256 maxFundingRate; // Max funding rate per interval\\n        uint256 maxPositionSize; // Max position size per user\\n        uint256 maxOpenInterest; // Max total open interest\\n        uint256 minInitialMargin; // Minimum initial margin\\n        bool isActive; // Market active status\\n    }\\n\\n    struct FeeStructure {\\n        uint256 makerFee; // Fee for makers (limit orders)\\n        uint256 takerFee; // Fee for takers (market orders)\\n        uint256 liquidationFee; // Fee for liquidators\\n        uint256 protocolShare; // Protocol's share of fees\\n    }\\n\\n    // State Variables\\n    uint256 public minMargin;\\n    uint256 public protocolFeeShare;\\n    address public feeRecipient;\\n\\n    // Mappings\\n    mapping(address => mapping(uint32 => Position)) public positions;\\n    mapping(uint32 => Market) public markets;\\n    mapping(uint32 => FeeStructure) public marketFees;\\n    mapping(uint32 => bool) public marketPaused;\\n    uint32 public marketCount;\\n\\n    // Events with improved details\\n    event PositionOpened(\\n        address indexed trader,\\n        uint32 indexed marketIndex,\\n        uint256 size,\\n        uint256 margin,\\n        bool isLong,\\n        uint32 leverage,\\n        uint256 entryPrice,\\n        uint256 timestamp\\n    );\\n    event PositionClosed(\\n        address indexed trader,\\n        uint32 indexed marketIndex,\\n        uint256 size,\\n        int256 pnl,\\n        uint256 exitPrice,\\n        uint256 timestamp\\n    );\\n    event PositionLiquidated(\\n        address indexed trader,\\n        uint32 indexed marketIndex,\\n        uint256 size,\\n        address liquidator,\\n        int256 pnl,\\n        uint256 liquidationPrice\\n    );\\n    event MarketAdded(\\n        uint32 indexed marketIndex,\\n        string symbol,\\n        address oracle,\\n        uint256 maxLeverage,\\n        uint256 maxPositionSize\\n    );\\n    event FundingUpdated(\\n        uint32 indexed marketIndex,\\n        int256 fundingRate,\\n        uint256 openInterestLong,\\n        uint256 openInterestShort\\n    );\\n    event EmergencyModeEnabled(address indexed triggeredBy, uint256 timestamp);\\n    event MarketPaused(uint32 indexed marketIndex, bool isPaused);\\n    event InsuranceFundUpdated(uint256 oldBalance, uint256 newBalance);\\n    event OrderBookUpdated(address indexed newOrderBook);\\n\\n    // Enhanced modifiers\\n    modifier notInEmergencyMode() {\\n        require(!emergencyMode, \\\"System is in emergency mode\\\");\\n        _;\\n    }\\n\\n    modifier marketActive(uint32 marketIndex) {\\n        require(markets[marketIndex].isActive, \\\"Market not active\\\");\\n        require(!marketPaused[marketIndex], \\\"Market is paused\\\");\\n        _;\\n    }\\n\\n    modifier validPrice(uint256 price) {\\n        require(price > 0, \\\"Invalid price\\\");\\n        _;\\n    }\\n\\n    modifier marketExists(uint32 marketIndex) {\\n        require(marketIndex < marketCount, \\\"Market does not exist\\\");\\n        require(markets[marketIndex].oracle != address(0), \\\"Market not initialized\\\");\\n        _;\\n    }\\n\\n    modifier positionExists(address trader, uint32 marketIndex) {\\n        require(positions[trader][marketIndex].isOpen, \\\"Position does not exist\\\");\\n        _;\\n    }\\n\\n    constructor(address _feeRecipient, uint256 _minMargin, uint256 _protocolFeeShare) Ownable(msg.sender) {\\n        require(_feeRecipient != address(0), \\\"Invalid fee recipient address\\\");\\n        require(_minMargin > 0, \\\"Invalid min margin\\\");\\n        require(_protocolFeeShare <= BASIS_POINTS, \\\"Invalid protocol fee share\\\");\\n\\n        feeRecipient = _feeRecipient;\\n        minMargin = _minMargin;\\n        protocolFeeShare = _protocolFeeShare;\\n\\n        emergencyMode = false;\\n        marketCount = 0;\\n    }\\n\\n    // New function to add a market\\n    function addMarket(\\n        string memory symbol,\\n        address oracle, // Switchboard aggregator address\\n        uint256 maxLeverage,\\n        uint256 liquidationThreshold,\\n        uint256 fee,\\n        uint256 fundingInterval,\\n        int256 maxFundingRate,\\n        uint256 maxPositionSize,\\n        uint256 maxOpenInterest,\\n        uint256 minInitialMargin\\n    ) external onlyOwner {\\n        markets[marketCount] = Market({\\n            symbol: symbol,\\n            oracle: oracle,\\n            maxLeverage: maxLeverage,\\n            liquidationThreshold: liquidationThreshold,\\n            fee: fee,\\n            openInterestLong: 0,\\n            openInterestShort: 0,\\n            cumulativeFunding: 0,\\n            lastFundingTime: block.timestamp,\\n            fundingInterval: fundingInterval,\\n            maxFundingRate: maxFundingRate,\\n            maxPositionSize: maxPositionSize,\\n            maxOpenInterest: maxOpenInterest,\\n            minInitialMargin: minInitialMargin,\\n            isActive: true\\n        });\\n        emit MarketAdded(marketCount, symbol, oracle, maxLeverage, maxPositionSize);\\n        marketCount++;\\n    }\\n\\n    function depositCollateral(address token, uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Amount must be > 0\\\");\\n        require(IERC20(token).transferFrom(msg.sender, address(this), amount), \\\"Transfer failed\\\");\\n        collateralBalances[msg.sender][token] += amount;\\n    }\\n\\n    function withdrawCollateral(address token, uint256 amount) external nonReentrant {\\n        require(collateralBalances[msg.sender][token] >= amount, \\\"Insufficient balance\\\");\\n        collateralBalances[msg.sender][token] -= amount;\\n        require(IERC20(token).transfer(msg.sender, amount), \\\"Transfer failed\\\");\\n    }\\n\\n    function _isValidPrice(uint256 price, uint256 currentPrice, uint256 maxSlippage) internal pure returns (bool) {\\n        if (price == 0 || currentPrice == 0) return false;\\n\\n        uint256 priceDiff = price > currentPrice ? price - currentPrice : currentPrice - price;\\n\\n        uint256 slippage = (priceDiff * BASIS_POINTS) / currentPrice;\\n        return slippage <= maxSlippage;\\n    }\\n\\n    function _updateFunding(uint32 marketIndex) internal {\\n        Market storage market = markets[marketIndex];\\n\\n        if (block.timestamp < market.lastFundingTime + market.fundingInterval) {\\n            return;\\n        }\\n\\n        // Calculate multiple funding payments if needed\\n        uint256 periods = (block.timestamp - market.lastFundingTime) / market.fundingInterval;\\n        if (periods == 0) return;\\n\\n        // Calculate imbalance between longs and shorts\\n        int256 longShortRatio;\\n        if (market.openInterestShort > 0) {\\n            longShortRatio =\\n                int256((market.openInterestLong * BASIS_POINTS) / market.openInterestShort) -\\n                int256(BASIS_POINTS);\\n        } else if (market.openInterestLong > 0) {\\n            longShortRatio = int256(BASIS_POINTS); // Max imbalance if no shorts\\n        } else {\\n            longShortRatio = 0; // No positions open\\n        }\\n\\n        // Calculate and cap funding rate\\n        int256 fundingRate = (longShortRatio * market.maxFundingRate) / int256(BASIS_POINTS);\\n        fundingRate = fundingRate > market.maxFundingRate\\n            ? market.maxFundingRate\\n            : (fundingRate < -market.maxFundingRate ? -market.maxFundingRate : fundingRate);\\n\\n        // Update cumulative funding\\n        market.cumulativeFunding += fundingRate * int256(periods);\\n        market.lastFundingTime += periods * market.fundingInterval;\\n\\n        emit FundingUpdated(marketIndex, fundingRate, market.openInterestLong, market.openInterestShort);\\n    }\\n\\n    // Core trading functions\\n    function openPosition(\\n        address trader,\\n        uint32 marketIndex,\\n        uint256 margin,\\n        uint32 leverage,\\n        bool isLong,\\n        uint256 price,\\n        uint256 maxSlippage,\\n        address collateralToken\\n    ) external nonReentrant marketExists(marketIndex) marketActive(marketIndex) notInEmergencyMode returns (uint256) {\\n        Market storage market = markets[marketIndex];\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n\\n        // Validate inputs\\n        require(!positions[trader][marketIndex].isOpen, \\\"Position already exists\\\");\\n        require(margin >= market.minInitialMargin, \\\"Margin too small\\\");\\n        require(margin >= minMargin, \\\"Below global minimum margin\\\");\\n        require(leverage <= market.maxLeverage, \\\"Leverage too high\\\");\\n        require(_isValidPrice(price, currentPrice, maxSlippage), \\\"Price exceeds slippage\\\");\\n        require(collateralBalances[msg.sender][collateralToken] >= margin, \\\"Insufficient collateral\\\");\\n\\n        // Calculate position details\\n        uint256 size = margin * uint256(leverage);\\n        require(size <= market.maxPositionSize, \\\"Position size too large\\\");\\n\\n        // Check market capacity\\n        uint256 newOpenInterest = isLong ? market.openInterestLong + size : market.openInterestShort + size;\\n        require(newOpenInterest <= market.maxOpenInterest, \\\"Market capacity exceeded\\\");\\n\\n        // Calculate and collect fees\\n        FeeStructure storage fees = marketFees[marketIndex];\\n        uint256 tradingFee = (size * fees.takerFee) / BASIS_POINTS;\\n        uint256 protocolFee = (tradingFee * fees.protocolShare) / BASIS_POINTS;\\n\\n        // Deduct margin plus fee from the trader\\u2019s collateral balance\\n        uint256 totalDebit = margin + tradingFee;\\n\\n        require(collateralBalances[msg.sender][collateralToken] >= totalDebit, \\\"Insufficient collateral for fee\\\");\\n        collateralBalances[msg.sender][collateralToken] -= totalDebit;\\n\\n        // Update funding before position creation\\n        _updateFunding(marketIndex);\\n\\n        // Create position\\n        positions[trader][marketIndex] = Position({\\n            isOpen: true,\\n            size: size,\\n            margin: margin,\\n            entryPrice: price,\\n            lastCumulativeFunding: market.cumulativeFunding,\\n            isLong: isLong,\\n            leverage: leverage,\\n            marketIndex: marketIndex,\\n            lastUpdateTime: block.timestamp\\n        });\\n\\n        // Update market state\\n        if (isLong) {\\n            market.openInterestLong += size;\\n        } else {\\n            market.openInterestShort += size;\\n        }\\n\\n        emit PositionOpened(trader, marketIndex, size, margin, isLong, leverage, price, block.timestamp);\\n\\n        return size;\\n    }\\n\\n    function closePosition(\\n        address trader,\\n        uint32 marketIndex,\\n        uint256 price,\\n        uint256 maxSlippage,\\n        address collateralToken\\n    ) external nonReentrant marketActive(marketIndex) positionExists(trader, marketIndex) returns (int256) {\\n        Position memory pos = positions[trader][marketIndex]; // Use memory instead of storage\\n        Market storage market = markets[marketIndex];\\n\\n        // Validate price\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        require(_isValidPrice(price, currentPrice, maxSlippage), \\\"Price exceeds slippage\\\");\\n\\n        // Update funding\\n        _updateFunding(marketIndex);\\n\\n        // Calculate returns using a separate internal function\\n        (uint256 returnAmount, int256 totalPnl) = _calculateClosingAmounts(trader, marketIndex, price, pos);\\n\\n        // Update market state\\n        if (pos.isLong) {\\n            market.openInterestLong -= pos.size;\\n        } else {\\n            market.openInterestShort -= pos.size;\\n        }\\n\\n        // Handle transfers\\n        collateralBalances[msg.sender][collateralToken] += returnAmount;\\n\\n        // Close position\\n        delete positions[trader][marketIndex];\\n\\n        emit PositionClosed(trader, marketIndex, pos.size, totalPnl, price, block.timestamp);\\n\\n        return totalPnl;\\n    }\\n\\n    function _calculateClosingAmounts(\\n        address trader,\\n        uint32 marketIndex,\\n        uint256 price,\\n        Position memory position\\n    ) internal view returns (uint256 returnAmount, int256 totalPnl) {\\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, price);\\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\\n        totalPnl = unrealizedPnl + fundingPayment;\\n\\n        FeeStructure storage fees = marketFees[marketIndex];\\n        uint256 closingFee = (position.size * fees.takerFee) / BASIS_POINTS;\\n\\n        if (totalPnl >= 0) {\\n            returnAmount = position.margin + uint256(totalPnl) - closingFee;\\n        } else {\\n            uint256 loss = uint256(-totalPnl);\\n            returnAmount = loss < position.margin ? position.margin - loss - closingFee : 0;\\n        }\\n    }\\n\\n    function liquidatePosition(\\n        address trader,\\n        uint32 marketIndex,\\n        address collateralToken\\n    ) external nonReentrant marketActive(marketIndex) positionExists(trader, marketIndex) returns (uint256) {\\n        Position storage position = positions[trader][marketIndex];\\n        Market storage market = markets[marketIndex];\\n        FeeStructure storage fees = marketFees[marketIndex];\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n\\n        // Update funding and calculate total PnL\\n        _updateFunding(marketIndex);\\n        int256 unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        int256 fundingPayment = _calculateFundingPayment(trader, marketIndex);\\n        int256 totalPnl = unrealizedPnl + fundingPayment;\\n\\n        // Calculate remaining margin\\n        uint256 remainingMargin;\\n        if (totalPnl >= 0) {\\n            remainingMargin = position.margin + uint256(totalPnl);\\n        } else {\\n            if (uint256(-totalPnl) < position.margin) {\\n                remainingMargin = position.margin - uint256(-totalPnl);\\n            } else {\\n                remainingMargin = 0;\\n            }\\n        }\\n\\n        // Check liquidation threshold\\n        uint256 maintenanceMargin = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\\n        require(remainingMargin <= maintenanceMargin, \\\"Position not liquidatable\\\");\\n\\n        // Calculate liquidation rewards\\n        uint256 liquidationFee = (remainingMargin * fees.liquidationFee) / BASIS_POINTS;\\n        uint256 protocolShare = (liquidationFee * fees.protocolShare) / BASIS_POINTS;\\n        uint256 liquidatorShare = liquidationFee - protocolShare;\\n\\n        // Update market state\\n        if (position.isLong) {\\n            market.openInterestLong -= position.size;\\n        } else {\\n            market.openInterestShort -= position.size;\\n        }\\n\\n        // Transfer fees\\n        if (protocolShare > 0) {\\n            collateralBalances[feeRecipient][collateralToken] += protocolShare;\\n        }\\n        if (liquidatorShare > 0) {\\n            collateralBalances[trader][collateralToken] += liquidatorShare;\\n        }\\n\\n        // Return remaining funds to trader\\n        uint256 returnAmount = remainingMargin - liquidationFee;\\n        if (returnAmount > 0) {\\n            collateralBalances[trader][collateralToken] += returnAmount;\\n        }\\n\\n        // Close position\\n        delete positions[trader][marketIndex];\\n\\n        emit PositionLiquidated(trader, marketIndex, position.size, msg.sender, totalPnl, currentPrice);\\n\\n        return liquidatorShare;\\n    }\\n\\n    // Internal calculation functions\\n    function _calculatePremium(Market storage market) internal view returns (int256) {\\n        if (market.openInterestShort == 0) return 0;\\n\\n        // Calculate skew ratio between longs and shorts\\n        uint256 ratio = (market.openInterestLong * PRECISION) / market.openInterestShort;\\n        int256 skew = int256(ratio) - int256(PRECISION);\\n\\n        return skew;\\n    }\\n\\n    function _calculatePnL(address trader, uint32 marketIndex, uint256 currentPrice) internal view returns (int256) {\\n        Position storage position = positions[trader][marketIndex];\\n\\n        uint256 priceDelta;\\n        if (position.isLong) {\\n            if (currentPrice > position.entryPrice) {\\n                priceDelta = currentPrice - position.entryPrice;\\n                return int256((priceDelta * position.size) / position.entryPrice);\\n            } else {\\n                priceDelta = position.entryPrice - currentPrice;\\n                return -int256((priceDelta * position.size) / position.entryPrice);\\n            }\\n        } else {\\n            if (currentPrice > position.entryPrice) {\\n                priceDelta = currentPrice - position.entryPrice;\\n                return -int256((priceDelta * position.size) / position.entryPrice);\\n            } else {\\n                priceDelta = position.entryPrice - currentPrice;\\n                return int256((priceDelta * position.size) / position.entryPrice);\\n            }\\n        }\\n    }\\n\\n    function _calculateFundingPayment(address trader, uint32 marketIndex) internal view returns (int256) {\\n        Position storage position = positions[trader][marketIndex];\\n        Market storage market = markets[marketIndex];\\n\\n        int256 fundingDelta = market.cumulativeFunding - position.lastCumulativeFunding;\\n\\n        // Cast position.size to int256 and PRECISION to int256 for consistent arithmetic\\n        if (position.isLong) {\\n            return (-int256(position.size) * fundingDelta) / int256(PRECISION);\\n        } else {\\n            return (int256(position.size) * fundingDelta) / int256(PRECISION);\\n        }\\n    }\\n\\n    function _getOraclePrice(uint32 marketIndex) internal view returns (uint256) {\\n        Market storage market = markets[marketIndex];\\n        AggregatorV3Interface oracle = AggregatorV3Interface(market.oracle);\\n\\n        // Get latest round data\\n        (uint80 roundId, int256 price, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound) = oracle\\n            .latestRoundData();\\n\\n        // Price validation\\n        require(price > 0, \\\"Invalid oracle price\\\");\\n        require(updatedAt > 0, \\\"Round not complete\\\");\\n        require(answeredInRound >= roundId, \\\"Stale price\\\");\\n        require(block.timestamp - updatedAt <= 3600, \\\"Oracle price too old\\\");\\n\\n        // Convert to 18 decimals (assuming Chainlink uses 8 decimals)\\n        return uint256(price) * PRICE_PRECISION;\\n    }\\n\\n    // View functions for external integrations\\n    function getPositionValue(\\n        address trader,\\n        uint32 marketIndex\\n    ) external view returns (uint256 value, bool hasProfit, int256 fundingFee) {\\n        Position storage position = positions[trader][marketIndex];\\n        require(position.isOpen, \\\"Position not found\\\");\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        fundingFee = _calculateFundingPayment(trader, marketIndex);\\n\\n        if (pnl >= 0) {\\n            value = uint256(pnl);\\n            hasProfit = true;\\n        } else {\\n            value = uint256(-pnl);\\n            hasProfit = false;\\n        }\\n    }\\n\\n    function getMarketUtilization(uint32 marketIndex) external view returns (uint256 longUtil, uint256 shortUtil) {\\n        Market storage market = markets[marketIndex];\\n\\n        longUtil = market.openInterestLong == 0 ? 0 : (market.openInterestLong * PRECISION) / market.maxOpenInterest;\\n\\n        shortUtil = market.openInterestShort == 0 ? 0 : (market.openInterestShort * PRECISION) / market.maxOpenInterest;\\n    }\\n\\n    function getHealthFactor(address trader, uint32 marketIndex) external view returns (uint256) {\\n        Position storage position = positions[trader][marketIndex];\\n        require(position.isOpen, \\\"Position not found\\\");\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        int256 pnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        int256 fundingFee = _calculateFundingPayment(trader, marketIndex);\\n        int256 totalPnl = pnl + fundingFee;\\n\\n        uint256 remainingMargin;\\n        if (totalPnl >= 0) {\\n            remainingMargin = position.margin + uint256(totalPnl);\\n        } else {\\n            if (uint256(-totalPnl) < position.margin) {\\n                remainingMargin = position.margin - uint256(-totalPnl);\\n            } else {\\n                return 0;\\n            }\\n        }\\n\\n        return (remainingMargin * BASIS_POINTS) / position.margin;\\n    }\\n\\n    // Emergency functions\\n    function enableEmergencyMode() external onlyOwner {\\n        require(!emergencyMode, \\\"Emergency mode already enabled\\\");\\n        emergencyMode = true;\\n        emit EmergencyModeEnabled(msg.sender, block.timestamp);\\n    }\\n\\n    function pauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\\n        require(!marketPaused[marketIndex], \\\"Market already paused\\\");\\n        marketPaused[marketIndex] = true;\\n        emit MarketPaused(marketIndex, true);\\n    }\\n\\n    function unpauseMarket(uint32 marketIndex) external onlyOwner marketExists(marketIndex) {\\n        require(marketPaused[marketIndex], \\\"Market not paused\\\");\\n        marketPaused[marketIndex] = false;\\n        emit MarketPaused(marketIndex, false);\\n    }\\n\\n    // Insurance fund management\\n    function addToInsuranceFund() external payable {\\n        uint256 oldBalance = insuranceFundBalance;\\n        insuranceFundBalance += msg.value;\\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\\n    }\\n\\n    function withdrawFromInsuranceFund(uint256 amount) external onlyOwner {\\n        require(amount <= insuranceFundBalance, \\\"Insufficient insurance fund balance\\\");\\n        uint256 oldBalance = insuranceFundBalance;\\n        insuranceFundBalance -= amount;\\n        (bool success, ) = payable(owner()).call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n        emit InsuranceFundUpdated(oldBalance, insuranceFundBalance);\\n    }\\n\\n    // Enhanced view functions for market analysis\\n    function getMarketStats(\\n        uint32 marketIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 longOpenInterest,\\n            uint256 shortOpenInterest,\\n            uint256 utilizationRate,\\n            int256 skewness,\\n            uint256 lastFundingTime,\\n            int256 currentFundingRate\\n        )\\n    {\\n        Market storage market = markets[marketIndex];\\n\\n        longOpenInterest = market.openInterestLong;\\n        shortOpenInterest = market.openInterestShort;\\n\\n        utilizationRate = market.maxOpenInterest > 0\\n            ? ((market.openInterestLong + market.openInterestShort) * PRECISION) / market.maxOpenInterest\\n            : 0;\\n\\n        skewness = _calculatePremium(market);\\n        lastFundingTime = market.lastFundingTime;\\n\\n        // Calculate current funding rate\\n        if (block.timestamp >= market.lastFundingTime + market.fundingInterval) {\\n            currentFundingRate = (skewness * market.maxFundingRate) / int256(BASIS_POINTS);\\n            if (currentFundingRate > market.maxFundingRate) {\\n                currentFundingRate = market.maxFundingRate;\\n            } else if (currentFundingRate < -market.maxFundingRate) {\\n                currentFundingRate = -market.maxFundingRate;\\n            }\\n        }\\n    }\\n\\n    function getPositionRisk(\\n        address trader,\\n        uint32 marketIndex\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 marginRatio,\\n            uint256 liquidationPrice,\\n            bool isLiquidatable,\\n            int256 unrealizedPnl,\\n            int256 fundingPayment\\n        )\\n    {\\n        Position storage position = positions[trader][marketIndex];\\n        Market storage market = markets[marketIndex];\\n        require(position.isOpen, \\\"Position not found\\\");\\n\\n        uint256 currentPrice = _getOraclePrice(marketIndex);\\n        unrealizedPnl = _calculatePnL(trader, marketIndex, currentPrice);\\n        fundingPayment = _calculateFundingPayment(trader, marketIndex);\\n\\n        int256 totalValue = int256(position.margin) + unrealizedPnl + fundingPayment;\\n        marginRatio = totalValue <= 0 ? 0 : (uint256(totalValue) * BASIS_POINTS) / position.size;\\n\\n        // Calculate liquidation price\\n        uint256 liquidationThreshold = (position.margin * market.liquidationThreshold) / BASIS_POINTS;\\n        if (position.isLong) {\\n            liquidationPrice =\\n                position.entryPrice -\\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\\n        } else {\\n            liquidationPrice =\\n                position.entryPrice +\\n                ((position.entryPrice * (position.margin - liquidationThreshold)) / position.margin);\\n        }\\n\\n        isLiquidatable = marginRatio <= market.liquidationThreshold;\\n    }\\n\\n    // Receive function for native token deposits\\n    receive() external payable {\\n        // Only accept payments for insurance fund\\n        insuranceFundBalance += msg.value;\\n        emit InsuranceFundUpdated(insuranceFundBalance - msg.value, insuranceFundBalance);\\n    }\\n}\\n\",\"keccak256\":\"0x6d61a2f3746222494675e34149b0c029e1c3a85d223de8b40c003688a11bb1b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620001d657601f62002e8738819003918201601f191683019291906001600160401b03841183851017620001db578160609284926040968752833981010312620001d65780516001600160a01b03919082811690819003620001d657836020830151920151923315620001be576000549060018060a01b03199133838216176000558651913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805582156200017c5750821562000143576127108411620000ff57600754161760075560055560065560ff196002541660025563ffffffff19600c5416600c5551612c959081620001f28239f35b845162461bcd60e51b815260206004820152601a60248201527f496e76616c69642070726f746f636f6c206665652073686172650000000000006044820152606490fd5b845162461bcd60e51b815260206004820152601260248201527124b73b30b634b21036b4b71036b0b933b4b760711b6044820152606490fd5b62461bcd60e51b815260206004820152601d60248201527f496e76616c69642066656520726563697069656e7420616464726573730000006044820152606490fd5b8451631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080806040526004361015610066575b50361561001b57600080fd5b7f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e884604061004a3460035461233a565b80600355610058348261236a565b9082519182526020820152a1005b60003560e01c9081630905f56014612171575080630bba41a814612124578063160d8b281461206d5780632d2451d114611f79578063350c35e914611e68578063367c760514611e2c57806339c294be14611e0e57806339ecf9ba14611dbd5780633dbc645d14611d9f5780634690484014611d765780634c1d81d414611d4257806352003d1814611cb6578063715018a614611c5d5780637176591614611baf57806374d6672d14611a965780638da5cb5b14611a6d578063955880d0146116ba578063960b26a21461169c578063a5d5db0c14611580578063aca55a8914611407578063af50e74614611047578063b97d5dbe14610f47578063c5b1c7d014610ea5578063ca4e5b6f14610e4c578063deba827f14610b5c578063e882ead5146104e7578063ec979082146104c3578063ece91e351461033e578063f2fde38b146102b05763fb9f1009146101bd573861000f565b346102ab576020806003193601126102ab576101d76121d0565b906101e06122b8565b6101f763ffffffff80600c54169316928310612377565b600082815260098252604090206001015461021c906001600160a01b031615156123bb565b81600052600b815260ff6040600020541615610273577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600b8152604060002060ff19815416905560405160008152a2005b6064906040519062461bcd60e51b82526004820152601160248201527013585c9ad95d081b9bdd081c185d5cd959607a1b6044820152fd5b600080fd5b346102ab5760203660031901126102ab576102c9612191565b6102d16122b8565b6001600160a01b0390811690811561032557600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346102ab5760203660031901126102ab5763ffffffff61035c6121d0565b16600052600960205260406000206040519060008282549161037d8361223e565b8083526001938085169081156104a75750600114610467575b50036103a29084612200565b600160a01b60019003908201541660028201549160038101549060048101546005820154600683015460078401546008850154600986015491600a87015493600b88015495600c89015497600d8a015499600e015460ff169a6040519e8f9e8f916101e0808452830161041491612278565b9e602083015260408201526060015260808d015260a08c015260c08b015260e08a01526101008901526101208801526101408701526101608601526101808501526101a084015215156101c08301520390f35b905083600052602060002090836000925b82841061048d57505050810160200185610396565b6020929450805483858a0101520191019091838693610478565b90506020925060ff191682840152151560051b82010185610396565b346102ab5760003660031901126102ab57602063ffffffff600c5416604051908152f35b346102ab576101003660031901126102ab57610501612191565b6105096121bd565b9063ffffffff9060643582811681036102ab576084351515608435036102ab5760e435936001600160a01b03851685036102ab57610545612347565b61055684600c541685831610612377565b80841660009081526009602052604090206001015461057f906001600160a01b031615156123bb565b838116600052600960205261059e60ff600e6040600020015416612400565b838116600052600b6020526105bb60ff6040600020541615612440565b60ff60025416610b175783811660005260096020526040600020946105df82612918565b60018060a01b0385166000526008602052604060002086841660005260205260ff60406000205416610ad257600d87015460443510610a9a5760055460443510610a5557600287015486851611610a1c576106436106489160c4359060a4356124f7565b61247f565b336000526004602052604060002060018060a01b038216600052602052604435604060002054106109d7576106818584166044356124c4565b94600b8701548611610992576084351561097f576106a386600589015461233a565b600c8801541061093a57808316600052600a6020526106e960406000206106e060036127106106d660018501548c6124c4565b04920154826124c4565b5060443561233a565b92336000526004602052604060002060018060a01b03841660005260205283604060002054106108f5576020977f52710922282cb913690ab8fed6a1d7ec4464874aaf30f9f14d982aa24eda4de79460c0943360005260048b5260406000209060018060a01b03166000528a52610766604060002091825461236a565b9055610771826125aa565b600781015460405190610783826121e3565b60018252898b830152604435604083015260a43560608301526080820152608435151560a0820152600685820191858916835260e0810190868616825261010081019142835260018060a01b038c1660005260088e5260406000208888166000528e5260406000209461080583511515879060ff801983541691151516179055565b8e830151600187015560408301516002870155606083015160038701556080830151600487015561084c60a0600588019401511515849060ff801983541691151516179055565b519064ffffffff0068ffffffff00000000008454925160281b169260081b169068ffffffffffffffff00191617179055519101556084356000146108e05760050161089888825461233a565b90555b81604051958887526044358a8801526084351515604088015216606086015260a43560808601524260a0860152169360018060a01b031692a360018055604051908152f35b6006016108ee88825461233a565b905561089b565b60405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420636f6c6c61746572616c20666f7220666565006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f4d61726b657420636170616369747920657863656564656400000000000000006044820152606490fd5b61098d86600689015461233a565b6106a3565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e2073697a6520746f6f206c617267650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270098caeccae4c2ceca40e8dede40d0d2ced607b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f42656c6f7720676c6f62616c206d696e696d756d206d617267696e00000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f13585c99da5b881d1bdbc81cdb585b1b60821b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20616c7265616479206578697374730000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f53797374656d20697320696e20656d657267656e6379206d6f646500000000006044820152606490fd5b346102ab5760a03660031901126102ab57610b75612191565b610b7d6121bd565b6001600160a01b0391608435838116926044359290918490036102ab57610ba2612347565b63ffffffff908183169384600052602096600988526040600020600e015460ff16610bcc90612400565b85600052600b885260406000205460ff1615610be790612440565b8216938460005260088852604060002086600052885260406000205460ff16610c0f90612757565b8460005260088852604060002086600052885260406000209360405191610c35836121e3565b855460ff16151583526001860154928a810193845260028701549660408201978852600381015460608301526004810154608083015260058101549360a083019460ff811615158652818160081c1660c085015260281c1660e0830152600601549061010001528760005260098a52604060002094606435610cb683612918565b90610cc191876124f7565b610cca9061247f565b610cd3826125aa565b610cde8583836127a3565b91610ce89161285b565b610cf19161258e565b97889488600052600a8b52604060002084519060010154610d11916124c4565b7fb266a68c763115f9e38948031eb363f250bda550b1b667dc5bd640b6d3650a8a97608097909161271090049060008112610e1c57610d5490610d59935161233a565b61236a565b925b5115610e0457610d7260058551920191825461236a565b90555b3360005260048a526040600020906000528952610d98604060002091825461233a565b905584600052600888526040600020866000528852610ddf604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b519060405191825286888301526040820152426060820152a360018055604051908152f35b610e1560068551920191825461236a565b9055610d75565b610e259061257d565b915180831015610e4257610e3c92610d549161236a565b92610d5b565b5050506000610e3c565b346102ab5760203660031901126102ab5763ffffffff610e6a6121d0565b16600052600a602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b346102ab5760003660031901126102ab57610ebe6122b8565b60025460ff8116610f025760019060ff1916176002556040514281527f86e6259fbf164140d541a86ff1a2a0606fa80f77ed47ca4748ca84810358afcb60203392a2005b60405162461bcd60e51b815260206004820152601e60248201527f456d657267656e6379206d6f646520616c726561647920656e61626c656400006044820152606490fd5b346102ab5760203660031901126102ab57600435610f636122b8565b60035490818111610ff65781610fe1600080808086610fa56040987f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e8849a61236a565b60035581546001600160a01b03165af13d15610ff1573d610fc581612222565b90610fd286519283612200565b8152600060203d92013e6122fc565b60035482519182526020820152a1005b6122fc565b60405162461bcd60e51b815260206004820152602360248201527f496e73756666696369656e7420696e737572616e63652066756e642062616c616044820152626e636560e81b6064820152608490fd5b346102ab5760603660031901126102ab57611060612191565b6110686121bd565b90604435906001600160a01b03821682036102ab57611085612347565b63ffffffff831660005260096020526110a860ff600e6040600020015416612400565b63ffffffff8316600052600b6020526110c960ff6040600020541615612440565b60018060a01b0381166000526008602052604060002063ffffffff84166000526020526110fd60ff60406000205416612757565b60018060a01b0381166000526008602052604060002063ffffffff84166000526020526040600020926009602052604060002092600a60205261119c604060002061114784612918565b93611151816125aa565b61116f61115f8683896127a3565b611169838961285b565b9061258e565b94600086126113cf576111868660028b015461233a565b60028a015461271095869160038c0154906124c4565b04811161138a576020997f575af161dc7fcfec91ce8b044ddfdc06c97cf3c371b3b030fc3bc9c697d085679661123786600194896111f5600360809c6111eb600263ffffffff9e0154866124c4565b04940154846124c4565b04611200818461236a565b9e60ff60058801541660001461137057611223600589890154920191825461236a565b90555b80611333575b508d6112fa5761236a565b90816112c0575b5050818060a01b03891660005260088b5260406000208585166000528b5261128e604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b015460408051918252338b830152810196909652606086015216936001600160a01b031692a360018055604051908152f35b838060a01b038b1660005260048d52604060002090848060a01b03166000528c526112f1604060002091825461233a565b90558b8061123e565b858060a01b038d1660005260048f526040600020868060a01b0385166000528f528d61132c604060002091825461233a565b905561236a565b868060a01b03600754166000528f600490526040600020878060a01b038616600052602052611368604060002091825461233a565b90558f61122c565b611383600689890154920191825461236a565b9055611226565b60405162461bcd60e51b815260206004820152601960248201527f506f736974696f6e206e6f74206c6971756964617461626c65000000000000006044820152606490fd5b6113d88661257d565b60028a01548091106000146113ff576113fa906113f48861257d565b9061236a565b611186565b506000611186565b346102ab5760403660031901126102ab57611420612191565b6114286121bd565b60018060a01b0382166000526008602052604060002063ffffffff8216600052602052604060002091600960205261148560406000209261146c60ff865416612b11565b61147f61147882612918565b82856127a3565b9261285b565b9060028401549361149f8361149a848861258e565b61258e565b946000861361153d5760a0955060036000955b0154916127106114c284846124c4565b049060ff600582015416600014611518576114f7926114f26114ec60036113f4940154948361236a565b846124c4565b6124d7565b935b6040519481865260208601521115604084015260608301526080820152f35b611537926114f26114ec6003611531940154948361236a565b9061233a565b936114f9565b6127109586810296818804149015171561156a57600361156460a0976001850154906124d7565b956114b2565b634e487b7160e01b600052601160045260246000fd5b346102ab5760403660031901126102ab57611599612191565b602435906115a5612347565b8115611662576040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906020816064816000865af18015611656576115fb91600091611628575b506122fc565b336000526004602052604060002090600052602052611620604060002091825461233a565b905560018055005b611649915060203d811161164f575b6116418183612200565b8101906122e4565b846115f5565b503d611637565b6040513d6000823e3d90fd5b60405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606490fd5b346102ab5760003660031901126102ab576020600654604051908152f35b346102ab576101403660031901126102ab5760043567ffffffffffffffff81116102ab57366023820112156102ab5780600401356116f781612222565b916117056040519384612200565b81835236602483830101116102ab5781600092602460209301838601378301015261172e6121a7565b906117376122b8565b6040516101e0810181811067ffffffffffffffff821117611a575760405281815260018060a01b0383166020820152604435604082015260643560608201526084356080820152600060a0820152600060c0820152600060e08201524261010082015260a43561012082015260c43561014082015260e43561016082015261010435610180820152610124356101a082015260016101c082015263ffffffff600c54166000526009602052604060002090805180519067ffffffffffffffff8211611a5757611806845461223e565b601f8111611a13575b50602090601f831160011461199f579282600e936101c0936119059796600092611994575b50508160011b916000199060031b1c19161784555b6001840160018060a01b036020830151166bffffffffffffffffffffffff60a01b82541617905560408101516002850155606081015160038501556080810151600485015560a0810151600585015560c0810151600685015560e0810151600785015561010081015160088501556101208101516009850155610140810151600a850155610160810151600b850155610180810151600c8501556101a0810151600d8501550151151591019060ff801983541691151516179055565b600c54917f4361617ad68387758b447680374b64f5fa3909671d4177ba50ac52b57e9ace9461194b63ffffffff8516938493604051928392608084526080840190612278565b6001600160a01b039091166020830152604435604083015260e43560608301520390a263ffffffff811461156a57600163ffffffff9101169063ffffffff191617600c55600080f35b015190508980611834565b908460005260206000209160005b601f19851681106119fb5750836101c093611905979693600193600e97601f198116106119e2575b505050811b018455611849565b015160001960f88460031b161c191690558980806119d5565b919260206001819286850151815501940192016119ad565b846000526020600020601f840160051c810160208510611a50575b601f830160051c82018110611a4457505061180f565b60008155600101611a2e565b5080611a2e565b634e487b7160e01b600052604160045260246000fd5b346102ab5760003660031901126102ab576000546040516001600160a01b039091168152602090f35b346102ab5760203660031901126102ab57611aaf6121d0565b63ffffffff16600090815260096020526040812060058101546006820154600c830154939192908415611ba457611ae6818561233a565b670de0b6b3a76400009081810291818304149015171561156a5760c095611b0c916124d7565b611b1583612c0b565b91600884015493611b2a60098201548661233a565b421015611b54575b50604051958652602086015260408501526060840152608083015260a0820152f35b600a9195500154612710611b68828561255a565b0581811315611b7a5750935b87611b32565b9490611b858161257d565b8612611b92575b50611b74565b611b9d91955061257d565b9387611b8c565b60c094506000611b0c565b346102ab5760203660031901126102ab5763ffffffff611bcd6121d0565b166000526009602052604060002060058101548015600014611c36575060005b60068201549182611c0c57506040915060005b82519182526020820152f35b670de0b6b3a76400008084029384040361156a57604092600c611c31920154906124d7565b611c00565b670de0b6b3a76400008082029182040361156a57600c820154611c58916124d7565b611bed565b346102ab5760003660031901126102ab57611c766122b8565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102ab5760403660031901126102ab576060611cd1612191565b611d10611cdc6121bd565b60018060a01b0383166000526008602052604060002063ffffffff821660005260205261146c60ff60406000205416612b11565b9060008112611d31579060015b604051928352151560208301526040820152f35b611d3a9061257d565b906000611d1d565b346102ab5760403660031901126102ab576020611d6e611d60612191565b611d686121bd565b90612b52565b604051908152f35b346102ab5760003660031901126102ab576007546040516001600160a01b039091168152602090f35b346102ab5760003660031901126102ab576020600354604051908152f35b346102ab5760403660031901126102ab57611dd6612191565b611dde6121a7565b9060018060a01b038091166000526004602052604060002091166000526020526020604060002054604051908152f35b346102ab5760003660031901126102ab576020600554604051908152f35b346102ab5760203660031901126102ab5763ffffffff611e4a6121d0565b16600052600b602052602060ff604060002054166040519015158152f35b346102ab5760403660031901126102ab57611e81612191565b60243590611e8d612347565b336000526020916004835260406000209160018060a01b0316918260005283528060406000205410611f3d57600091604484923385526004845260408520838652845260408520611edf82825461236a565b9055604051948593849263a9059cbb60e01b845233600485015260248401525af190811561165657611f1a92600092611f20575b50506122fc565b60018055005b611f369250803d1061164f576116418183612200565b8280611f13565b60405162461bcd60e51b8152600481018490526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b346102ab576020806003193601126102ab57611f936121d0565b90611f9c6122b8565b611fb363ffffffff80600c54169316928310612377565b6000828152600982526040902060010154611fd8906001600160a01b031615156123bb565b81600052600b815260ff60406000205416612031577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600b81526040600020600160ff1982541617905560405160018152a2005b6064906040519062461bcd60e51b82526004820152601560248201527413585c9ad95d08185b1c9958591e481c185d5cd959605a1b6044820152fd5b346102ab5760403660031901126102ab57610120612089612191565b6120916121bd565b9060018060a01b03166000526008602052604060002063ffffffff809216600052602052604060002060ff815416916001820154916002810154600382015460048301549160066005850154940154956040519715158852602088015260408701526060860152608085015260ff8116151560a0850152818160081c1660c085015260281c1660e0830152610100820152f35b60003660031901126102ab577f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e8846040600354612160348261233a565b8060035582519182526020820152a1005b346102ab5760003660031901126102ab5760209060ff6002541615158152f35b600435906001600160a01b03821682036102ab57565b602435906001600160a01b03821682036102ab57565b6024359063ffffffff821682036102ab57565b6004359063ffffffff821682036102ab57565b610120810190811067ffffffffffffffff821117611a5757604052565b90601f8019910116810190811067ffffffffffffffff821117611a5757604052565b67ffffffffffffffff8111611a5757601f01601f191660200190565b90600182811c9216801561226e575b602083101461225857565b634e487b7160e01b600052602260045260246000fd5b91607f169161224d565b919082519283825260005b8481106122a4575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612283565b6000546001600160a01b031633036122cc57565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126102ab575180151581036102ab5790565b1561230357565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b9190820180921161156a57565b600260015414612358576002600155565b604051633ee5aeb560e01b8152600490fd5b9190820391821161156a57565b1561237e57565b60405162461bcd60e51b815260206004820152601560248201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606490fd5b156123c257565b60405162461bcd60e51b815260206004820152601660248201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b6044820152606490fd5b1561240757565b60405162461bcd60e51b81526020600482015260116024820152704d61726b6574206e6f742061637469766560781b6044820152606490fd5b1561244757565b60405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc81c185d5cd95960821b6044820152606490fd5b1561248657565b60405162461bcd60e51b81526020600482015260166024820152755072696365206578636565647320736c69707061676560501b6044820152606490fd5b8181029291811591840414171561156a57565b81156124e1570490565b634e487b7160e01b600052601260045260246000fd5b80158015612552575b61254a57818082111561253a576125169161236a565b905b6127109182810292818404149015171561156a57612535916124d7565b111590565b906125449161236a565b90612518565b505050600090565b508115612500565b818102929160008212600160ff1b82141661156a57818405149015171561156a57565b600160ff1b811461156a5760000390565b9190916000838201938412911290801582169115161761156a57565b63ffffffff1660008181526009602052604081209060088201918254926009820154936125d7858261233a565b421061274f576125eb856114f2834261236a565b9485156127465760068401549485156126f9576005850154612710908181029181830414901517156126e55786612621916124d7565b61270f1981019081136001166126e5576005936115317fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b238799979460609997946126a6945b612710612677600a8a0154809361255a565b0591818313156126bd57509050985b612690818b61255a565b61269f6007890191825461258e565b90556124c4565b9055015460405192835260208301526040820152a2565b6126c68261257d565b83121590506126df576126d9915061257d565b98612686565b506126d9565b634e487b7160e01b82526011600452602482fd5b926126a6600593611531879460609997877fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b23879c9a0154151560001461274057612710612665565b80612665565b50505050505050565b505050505050565b1561275e57565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20646f6573206e6f742065786973740000000000000000006044820152606490fd5b60018060a01b0316600052600860205263ffffffff6040600020911660005260205260406000209060ff6005830154166000146128235760038201549081811115612807576128049260016127fb846114f29461236a565b910154906124c4565b90565b906114f26128049360016127fb61281e958561236a565b61257d565b6003820154908181111561284857906114f26128049360016127fb8461281e9661236a565b6128049260016127fb6114f2938561236a565b919060009260018060a01b03168352600860205263ffffffff604084209116835260205260408220600960205260076040842001546004820154908482820392128183128116918313901516176128ed57670de0b6b3a764000092935060ff6005830154166000146128e0576128d760016128dc93015461257d565b61255a565b0590565b60016128dc92015461255a565b634e487b7160e01b84526011600452602484fd5b519069ffffffffffffffffffff821682036102ab57565b63ffffffff166000908152600960209081526040808320600101548151633fabe5a360e21b81529392600492909160a0908690859082906001600160a01b03165afa948515612b07578495859686928792612aaf575b5086881315612a75578215612a3d5769ffffffffffffffffffff809116911610612a0d5761299f610e10914261236a565b116129d55750506402540be400928381029381850414901517156129c257505090565b634e487b7160e01b825260119052602490fd5b5162461bcd60e51b815291820152601460248201527313dc9858db19481c1c9a58d9481d1bdbc81bdb1960621b604482015260649150fd5b505162461bcd60e51b815291820152600b60248201526a5374616c6520707269636560a81b604482015260649150fd5b835162461bcd60e51b81528087018690526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606490fd5b835162461bcd60e51b81528087018690526014602482015273496e76616c6964206f7261636c6520707269636560601b6044820152606490fd5b975050505060a0853d8211612aff575b81612acc60a09383612200565b81010312612afb57612add85612901565b82860151612af2608060608901519801612901565b9096913861296e565b8380fd5b3d9150612abf565b81513d86823e3d90fd5b15612b1857565b60405162461bcd60e51b8152602060048201526012602482015271141bdcda5d1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b90612b8e60009260018060a01b038116845260086020526040842063ffffffff84168552602052611169604085209361146c60ff865416612b11565b828112612bdb57612ba390600283015461233a565b915b61271092838102938185041490151715612bc7575060020154612804916124d7565b634e487b7160e01b81526011600452602490fd5b612be48161257d565b6002830154809110600014612c05576113f4612bff9261257d565b91612ba5565b50505090565b6006810154908115612c58576005015490670de0b6b3a76400009182810292818404149015171561156a57612c3f916124d7565b670de0b6b3a763ffff19810190811360011661156a5790565b505060009056fea2646970667358221220f644928174be5f61e1e1606d3055dd71c856181f561924d67649b9c4ccff1d6664736f6c63430008140033",
  "deployedBytecode": "0x6080806040526004361015610066575b50361561001b57600080fd5b7f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e884604061004a3460035461233a565b80600355610058348261236a565b9082519182526020820152a1005b60003560e01c9081630905f56014612171575080630bba41a814612124578063160d8b281461206d5780632d2451d114611f79578063350c35e914611e68578063367c760514611e2c57806339c294be14611e0e57806339ecf9ba14611dbd5780633dbc645d14611d9f5780634690484014611d765780634c1d81d414611d4257806352003d1814611cb6578063715018a614611c5d5780637176591614611baf57806374d6672d14611a965780638da5cb5b14611a6d578063955880d0146116ba578063960b26a21461169c578063a5d5db0c14611580578063aca55a8914611407578063af50e74614611047578063b97d5dbe14610f47578063c5b1c7d014610ea5578063ca4e5b6f14610e4c578063deba827f14610b5c578063e882ead5146104e7578063ec979082146104c3578063ece91e351461033e578063f2fde38b146102b05763fb9f1009146101bd573861000f565b346102ab576020806003193601126102ab576101d76121d0565b906101e06122b8565b6101f763ffffffff80600c54169316928310612377565b600082815260098252604090206001015461021c906001600160a01b031615156123bb565b81600052600b815260ff6040600020541615610273577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600b8152604060002060ff19815416905560405160008152a2005b6064906040519062461bcd60e51b82526004820152601160248201527013585c9ad95d081b9bdd081c185d5cd959607a1b6044820152fd5b600080fd5b346102ab5760203660031901126102ab576102c9612191565b6102d16122b8565b6001600160a01b0390811690811561032557600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346102ab5760203660031901126102ab5763ffffffff61035c6121d0565b16600052600960205260406000206040519060008282549161037d8361223e565b8083526001938085169081156104a75750600114610467575b50036103a29084612200565b600160a01b60019003908201541660028201549160038101549060048101546005820154600683015460078401546008850154600986015491600a87015493600b88015495600c89015497600d8a015499600e015460ff169a6040519e8f9e8f916101e0808452830161041491612278565b9e602083015260408201526060015260808d015260a08c015260c08b015260e08a01526101008901526101208801526101408701526101608601526101808501526101a084015215156101c08301520390f35b905083600052602060002090836000925b82841061048d57505050810160200185610396565b6020929450805483858a0101520191019091838693610478565b90506020925060ff191682840152151560051b82010185610396565b346102ab5760003660031901126102ab57602063ffffffff600c5416604051908152f35b346102ab576101003660031901126102ab57610501612191565b6105096121bd565b9063ffffffff9060643582811681036102ab576084351515608435036102ab5760e435936001600160a01b03851685036102ab57610545612347565b61055684600c541685831610612377565b80841660009081526009602052604090206001015461057f906001600160a01b031615156123bb565b838116600052600960205261059e60ff600e6040600020015416612400565b838116600052600b6020526105bb60ff6040600020541615612440565b60ff60025416610b175783811660005260096020526040600020946105df82612918565b60018060a01b0385166000526008602052604060002086841660005260205260ff60406000205416610ad257600d87015460443510610a9a5760055460443510610a5557600287015486851611610a1c576106436106489160c4359060a4356124f7565b61247f565b336000526004602052604060002060018060a01b038216600052602052604435604060002054106109d7576106818584166044356124c4565b94600b8701548611610992576084351561097f576106a386600589015461233a565b600c8801541061093a57808316600052600a6020526106e960406000206106e060036127106106d660018501548c6124c4565b04920154826124c4565b5060443561233a565b92336000526004602052604060002060018060a01b03841660005260205283604060002054106108f5576020977f52710922282cb913690ab8fed6a1d7ec4464874aaf30f9f14d982aa24eda4de79460c0943360005260048b5260406000209060018060a01b03166000528a52610766604060002091825461236a565b9055610771826125aa565b600781015460405190610783826121e3565b60018252898b830152604435604083015260a43560608301526080820152608435151560a0820152600685820191858916835260e0810190868616825261010081019142835260018060a01b038c1660005260088e5260406000208888166000528e5260406000209461080583511515879060ff801983541691151516179055565b8e830151600187015560408301516002870155606083015160038701556080830151600487015561084c60a0600588019401511515849060ff801983541691151516179055565b519064ffffffff0068ffffffff00000000008454925160281b169260081b169068ffffffffffffffff00191617179055519101556084356000146108e05760050161089888825461233a565b90555b81604051958887526044358a8801526084351515604088015216606086015260a43560808601524260a0860152169360018060a01b031692a360018055604051908152f35b6006016108ee88825461233a565b905561089b565b60405162461bcd60e51b815260206004820152601f60248201527f496e73756666696369656e7420636f6c6c61746572616c20666f7220666565006044820152606490fd5b60405162461bcd60e51b815260206004820152601860248201527f4d61726b657420636170616369747920657863656564656400000000000000006044820152606490fd5b61098d86600689015461233a565b6106a3565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e2073697a6520746f6f206c617267650000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526011602482015270098caeccae4c2ceca40e8dede40d0d2ced607b1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f42656c6f7720676c6f62616c206d696e696d756d206d617267696e00000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601060248201526f13585c99da5b881d1bdbc81cdb585b1b60821b6044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20616c7265616479206578697374730000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f53797374656d20697320696e20656d657267656e6379206d6f646500000000006044820152606490fd5b346102ab5760a03660031901126102ab57610b75612191565b610b7d6121bd565b6001600160a01b0391608435838116926044359290918490036102ab57610ba2612347565b63ffffffff908183169384600052602096600988526040600020600e015460ff16610bcc90612400565b85600052600b885260406000205460ff1615610be790612440565b8216938460005260088852604060002086600052885260406000205460ff16610c0f90612757565b8460005260088852604060002086600052885260406000209360405191610c35836121e3565b855460ff16151583526001860154928a810193845260028701549660408201978852600381015460608301526004810154608083015260058101549360a083019460ff811615158652818160081c1660c085015260281c1660e0830152600601549061010001528760005260098a52604060002094606435610cb683612918565b90610cc191876124f7565b610cca9061247f565b610cd3826125aa565b610cde8583836127a3565b91610ce89161285b565b610cf19161258e565b97889488600052600a8b52604060002084519060010154610d11916124c4565b7fb266a68c763115f9e38948031eb363f250bda550b1b667dc5bd640b6d3650a8a97608097909161271090049060008112610e1c57610d5490610d59935161233a565b61236a565b925b5115610e0457610d7260058551920191825461236a565b90555b3360005260048a526040600020906000528952610d98604060002091825461233a565b905584600052600888526040600020866000528852610ddf604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b519060405191825286888301526040820152426060820152a360018055604051908152f35b610e1560068551920191825461236a565b9055610d75565b610e259061257d565b915180831015610e4257610e3c92610d549161236a565b92610d5b565b5050506000610e3c565b346102ab5760203660031901126102ab5763ffffffff610e6a6121d0565b16600052600a602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b346102ab5760003660031901126102ab57610ebe6122b8565b60025460ff8116610f025760019060ff1916176002556040514281527f86e6259fbf164140d541a86ff1a2a0606fa80f77ed47ca4748ca84810358afcb60203392a2005b60405162461bcd60e51b815260206004820152601e60248201527f456d657267656e6379206d6f646520616c726561647920656e61626c656400006044820152606490fd5b346102ab5760203660031901126102ab57600435610f636122b8565b60035490818111610ff65781610fe1600080808086610fa56040987f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e8849a61236a565b60035581546001600160a01b03165af13d15610ff1573d610fc581612222565b90610fd286519283612200565b8152600060203d92013e6122fc565b60035482519182526020820152a1005b6122fc565b60405162461bcd60e51b815260206004820152602360248201527f496e73756666696369656e7420696e737572616e63652066756e642062616c616044820152626e636560e81b6064820152608490fd5b346102ab5760603660031901126102ab57611060612191565b6110686121bd565b90604435906001600160a01b03821682036102ab57611085612347565b63ffffffff831660005260096020526110a860ff600e6040600020015416612400565b63ffffffff8316600052600b6020526110c960ff6040600020541615612440565b60018060a01b0381166000526008602052604060002063ffffffff84166000526020526110fd60ff60406000205416612757565b60018060a01b0381166000526008602052604060002063ffffffff84166000526020526040600020926009602052604060002092600a60205261119c604060002061114784612918565b93611151816125aa565b61116f61115f8683896127a3565b611169838961285b565b9061258e565b94600086126113cf576111868660028b015461233a565b60028a015461271095869160038c0154906124c4565b04811161138a576020997f575af161dc7fcfec91ce8b044ddfdc06c97cf3c371b3b030fc3bc9c697d085679661123786600194896111f5600360809c6111eb600263ffffffff9e0154866124c4565b04940154846124c4565b04611200818461236a565b9e60ff60058801541660001461137057611223600589890154920191825461236a565b90555b80611333575b508d6112fa5761236a565b90816112c0575b5050818060a01b03891660005260088b5260406000208585166000528b5261128e604060002060066000918281558260018201558260028201558260038201558260048201558260058201550155565b015460408051918252338b830152810196909652606086015216936001600160a01b031692a360018055604051908152f35b838060a01b038b1660005260048d52604060002090848060a01b03166000528c526112f1604060002091825461233a565b90558b8061123e565b858060a01b038d1660005260048f526040600020868060a01b0385166000528f528d61132c604060002091825461233a565b905561236a565b868060a01b03600754166000528f600490526040600020878060a01b038616600052602052611368604060002091825461233a565b90558f61122c565b611383600689890154920191825461236a565b9055611226565b60405162461bcd60e51b815260206004820152601960248201527f506f736974696f6e206e6f74206c6971756964617461626c65000000000000006044820152606490fd5b6113d88661257d565b60028a01548091106000146113ff576113fa906113f48861257d565b9061236a565b611186565b506000611186565b346102ab5760403660031901126102ab57611420612191565b6114286121bd565b60018060a01b0382166000526008602052604060002063ffffffff8216600052602052604060002091600960205261148560406000209261146c60ff865416612b11565b61147f61147882612918565b82856127a3565b9261285b565b9060028401549361149f8361149a848861258e565b61258e565b946000861361153d5760a0955060036000955b0154916127106114c284846124c4565b049060ff600582015416600014611518576114f7926114f26114ec60036113f4940154948361236a565b846124c4565b6124d7565b935b6040519481865260208601521115604084015260608301526080820152f35b611537926114f26114ec6003611531940154948361236a565b9061233a565b936114f9565b6127109586810296818804149015171561156a57600361156460a0976001850154906124d7565b956114b2565b634e487b7160e01b600052601160045260246000fd5b346102ab5760403660031901126102ab57611599612191565b602435906115a5612347565b8115611662576040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b0391909116906020816064816000865af18015611656576115fb91600091611628575b506122fc565b336000526004602052604060002090600052602052611620604060002091825461233a565b905560018055005b611649915060203d811161164f575b6116418183612200565b8101906122e4565b846115f5565b503d611637565b6040513d6000823e3d90fd5b60405162461bcd60e51b81526020600482015260126024820152710416d6f756e74206d757374206265203e20360741b6044820152606490fd5b346102ab5760003660031901126102ab576020600654604051908152f35b346102ab576101403660031901126102ab5760043567ffffffffffffffff81116102ab57366023820112156102ab5780600401356116f781612222565b916117056040519384612200565b81835236602483830101116102ab5781600092602460209301838601378301015261172e6121a7565b906117376122b8565b6040516101e0810181811067ffffffffffffffff821117611a575760405281815260018060a01b0383166020820152604435604082015260643560608201526084356080820152600060a0820152600060c0820152600060e08201524261010082015260a43561012082015260c43561014082015260e43561016082015261010435610180820152610124356101a082015260016101c082015263ffffffff600c54166000526009602052604060002090805180519067ffffffffffffffff8211611a5757611806845461223e565b601f8111611a13575b50602090601f831160011461199f579282600e936101c0936119059796600092611994575b50508160011b916000199060031b1c19161784555b6001840160018060a01b036020830151166bffffffffffffffffffffffff60a01b82541617905560408101516002850155606081015160038501556080810151600485015560a0810151600585015560c0810151600685015560e0810151600785015561010081015160088501556101208101516009850155610140810151600a850155610160810151600b850155610180810151600c8501556101a0810151600d8501550151151591019060ff801983541691151516179055565b600c54917f4361617ad68387758b447680374b64f5fa3909671d4177ba50ac52b57e9ace9461194b63ffffffff8516938493604051928392608084526080840190612278565b6001600160a01b039091166020830152604435604083015260e43560608301520390a263ffffffff811461156a57600163ffffffff9101169063ffffffff191617600c55600080f35b015190508980611834565b908460005260206000209160005b601f19851681106119fb5750836101c093611905979693600193600e97601f198116106119e2575b505050811b018455611849565b015160001960f88460031b161c191690558980806119d5565b919260206001819286850151815501940192016119ad565b846000526020600020601f840160051c810160208510611a50575b601f830160051c82018110611a4457505061180f565b60008155600101611a2e565b5080611a2e565b634e487b7160e01b600052604160045260246000fd5b346102ab5760003660031901126102ab576000546040516001600160a01b039091168152602090f35b346102ab5760203660031901126102ab57611aaf6121d0565b63ffffffff16600090815260096020526040812060058101546006820154600c830154939192908415611ba457611ae6818561233a565b670de0b6b3a76400009081810291818304149015171561156a5760c095611b0c916124d7565b611b1583612c0b565b91600884015493611b2a60098201548661233a565b421015611b54575b50604051958652602086015260408501526060840152608083015260a0820152f35b600a9195500154612710611b68828561255a565b0581811315611b7a5750935b87611b32565b9490611b858161257d565b8612611b92575b50611b74565b611b9d91955061257d565b9387611b8c565b60c094506000611b0c565b346102ab5760203660031901126102ab5763ffffffff611bcd6121d0565b166000526009602052604060002060058101548015600014611c36575060005b60068201549182611c0c57506040915060005b82519182526020820152f35b670de0b6b3a76400008084029384040361156a57604092600c611c31920154906124d7565b611c00565b670de0b6b3a76400008082029182040361156a57600c820154611c58916124d7565b611bed565b346102ab5760003660031901126102ab57611c766122b8565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346102ab5760403660031901126102ab576060611cd1612191565b611d10611cdc6121bd565b60018060a01b0383166000526008602052604060002063ffffffff821660005260205261146c60ff60406000205416612b11565b9060008112611d31579060015b604051928352151560208301526040820152f35b611d3a9061257d565b906000611d1d565b346102ab5760403660031901126102ab576020611d6e611d60612191565b611d686121bd565b90612b52565b604051908152f35b346102ab5760003660031901126102ab576007546040516001600160a01b039091168152602090f35b346102ab5760003660031901126102ab576020600354604051908152f35b346102ab5760403660031901126102ab57611dd6612191565b611dde6121a7565b9060018060a01b038091166000526004602052604060002091166000526020526020604060002054604051908152f35b346102ab5760003660031901126102ab576020600554604051908152f35b346102ab5760203660031901126102ab5763ffffffff611e4a6121d0565b16600052600b602052602060ff604060002054166040519015158152f35b346102ab5760403660031901126102ab57611e81612191565b60243590611e8d612347565b336000526020916004835260406000209160018060a01b0316918260005283528060406000205410611f3d57600091604484923385526004845260408520838652845260408520611edf82825461236a565b9055604051948593849263a9059cbb60e01b845233600485015260248401525af190811561165657611f1a92600092611f20575b50506122fc565b60018055005b611f369250803d1061164f576116418183612200565b8280611f13565b60405162461bcd60e51b8152600481018490526014602482015273496e73756666696369656e742062616c616e636560601b6044820152606490fd5b346102ab576020806003193601126102ab57611f936121d0565b90611f9c6122b8565b611fb363ffffffff80600c54169316928310612377565b6000828152600982526040902060010154611fd8906001600160a01b031615156123bb565b81600052600b815260ff60406000205416612031577f5f6604b72fcf4d413300d055c9a3d833633c57363fd4e4ffe616f3db5edd7f6b9082600052600b81526040600020600160ff1982541617905560405160018152a2005b6064906040519062461bcd60e51b82526004820152601560248201527413585c9ad95d08185b1c9958591e481c185d5cd959605a1b6044820152fd5b346102ab5760403660031901126102ab57610120612089612191565b6120916121bd565b9060018060a01b03166000526008602052604060002063ffffffff809216600052602052604060002060ff815416916001820154916002810154600382015460048301549160066005850154940154956040519715158852602088015260408701526060860152608085015260ff8116151560a0850152818160081c1660c085015260281c1660e0830152610100820152f35b60003660031901126102ab577f2f6dd957f9c3eb2c0a2c983afd12b3c6c1321b82b7adfde0008a0d59f3d4e8846040600354612160348261233a565b8060035582519182526020820152a1005b346102ab5760003660031901126102ab5760209060ff6002541615158152f35b600435906001600160a01b03821682036102ab57565b602435906001600160a01b03821682036102ab57565b6024359063ffffffff821682036102ab57565b6004359063ffffffff821682036102ab57565b610120810190811067ffffffffffffffff821117611a5757604052565b90601f8019910116810190811067ffffffffffffffff821117611a5757604052565b67ffffffffffffffff8111611a5757601f01601f191660200190565b90600182811c9216801561226e575b602083101461225857565b634e487b7160e01b600052602260045260246000fd5b91607f169161224d565b919082519283825260005b8481106122a4575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201612283565b6000546001600160a01b031633036122cc57565b60405163118cdaa760e01b8152336004820152602490fd5b908160209103126102ab575180151581036102ab5790565b1561230357565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b9190820180921161156a57565b600260015414612358576002600155565b604051633ee5aeb560e01b8152600490fd5b9190820391821161156a57565b1561237e57565b60405162461bcd60e51b815260206004820152601560248201527413585c9ad95d08191bd95cc81b9bdd08195e1a5cdd605a1b6044820152606490fd5b156123c257565b60405162461bcd60e51b815260206004820152601660248201527513585c9ad95d081b9bdd081a5b9a5d1a585b1a5e995960521b6044820152606490fd5b1561240757565b60405162461bcd60e51b81526020600482015260116024820152704d61726b6574206e6f742061637469766560781b6044820152606490fd5b1561244757565b60405162461bcd60e51b815260206004820152601060248201526f13585c9ad95d081a5cc81c185d5cd95960821b6044820152606490fd5b1561248657565b60405162461bcd60e51b81526020600482015260166024820152755072696365206578636565647320736c69707061676560501b6044820152606490fd5b8181029291811591840414171561156a57565b81156124e1570490565b634e487b7160e01b600052601260045260246000fd5b80158015612552575b61254a57818082111561253a576125169161236a565b905b6127109182810292818404149015171561156a57612535916124d7565b111590565b906125449161236a565b90612518565b505050600090565b508115612500565b818102929160008212600160ff1b82141661156a57818405149015171561156a57565b600160ff1b811461156a5760000390565b9190916000838201938412911290801582169115161761156a57565b63ffffffff1660008181526009602052604081209060088201918254926009820154936125d7858261233a565b421061274f576125eb856114f2834261236a565b9485156127465760068401549485156126f9576005850154612710908181029181830414901517156126e55786612621916124d7565b61270f1981019081136001166126e5576005936115317fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b238799979460609997946126a6945b612710612677600a8a0154809361255a565b0591818313156126bd57509050985b612690818b61255a565b61269f6007890191825461258e565b90556124c4565b9055015460405192835260208301526040820152a2565b6126c68261257d565b83121590506126df576126d9915061257d565b98612686565b506126d9565b634e487b7160e01b82526011600452602482fd5b926126a6600593611531879460609997877fe32262fd2f50e6ac566f589085979d584789af6150d354fb5a290fc0d01b23879c9a0154151560001461274057612710612665565b80612665565b50505050505050565b505050505050565b1561275e57565b60405162461bcd60e51b815260206004820152601760248201527f506f736974696f6e20646f6573206e6f742065786973740000000000000000006044820152606490fd5b60018060a01b0316600052600860205263ffffffff6040600020911660005260205260406000209060ff6005830154166000146128235760038201549081811115612807576128049260016127fb846114f29461236a565b910154906124c4565b90565b906114f26128049360016127fb61281e958561236a565b61257d565b6003820154908181111561284857906114f26128049360016127fb8461281e9661236a565b6128049260016127fb6114f2938561236a565b919060009260018060a01b03168352600860205263ffffffff604084209116835260205260408220600960205260076040842001546004820154908482820392128183128116918313901516176128ed57670de0b6b3a764000092935060ff6005830154166000146128e0576128d760016128dc93015461257d565b61255a565b0590565b60016128dc92015461255a565b634e487b7160e01b84526011600452602484fd5b519069ffffffffffffffffffff821682036102ab57565b63ffffffff166000908152600960209081526040808320600101548151633fabe5a360e21b81529392600492909160a0908690859082906001600160a01b03165afa948515612b07578495859686928792612aaf575b5086881315612a75578215612a3d5769ffffffffffffffffffff809116911610612a0d5761299f610e10914261236a565b116129d55750506402540be400928381029381850414901517156129c257505090565b634e487b7160e01b825260119052602490fd5b5162461bcd60e51b815291820152601460248201527313dc9858db19481c1c9a58d9481d1bdbc81bdb1960621b604482015260649150fd5b505162461bcd60e51b815291820152600b60248201526a5374616c6520707269636560a81b604482015260649150fd5b835162461bcd60e51b81528087018690526012602482015271526f756e64206e6f7420636f6d706c65746560701b6044820152606490fd5b835162461bcd60e51b81528087018690526014602482015273496e76616c6964206f7261636c6520707269636560601b6044820152606490fd5b975050505060a0853d8211612aff575b81612acc60a09383612200565b81010312612afb57612add85612901565b82860151612af2608060608901519801612901565b9096913861296e565b8380fd5b3d9150612abf565b81513d86823e3d90fd5b15612b1857565b60405162461bcd60e51b8152602060048201526012602482015271141bdcda5d1a5bdb881b9bdd08199bdd5b9960721b6044820152606490fd5b90612b8e60009260018060a01b038116845260086020526040842063ffffffff84168552602052611169604085209361146c60ff865416612b11565b828112612bdb57612ba390600283015461233a565b915b61271092838102938185041490151715612bc7575060020154612804916124d7565b634e487b7160e01b81526011600452602490fd5b612be48161257d565b6002830154809110600014612c05576113f4612bff9261257d565b91612ba5565b50505090565b6006810154908115612c58576005015490670de0b6b3a76400009182810292818404149015171561156a57612c3f916124d7565b670de0b6b3a763ffff19810190811360011661156a5790565b505060009056fea2646970667358221220f644928174be5f61e1e1606d3055dd71c856181f561924d67649b9c4ccff1d6664736f6c63430008140033",
  "devdoc": {
    "details": "Core contract for perpetual trading with hasMON as collateral",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PerpEngine",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 312,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 401,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "emergencyMode",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 403,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "insuranceFundBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 409,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "collateralBalances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 470,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "minMargin",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 472,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "protocolFeeShare",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 474,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 481,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "positions",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Position)428_storage))"
      },
      {
        "astId": 486,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "markets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint32,t_struct(Market)459_storage)"
      },
      {
        "astId": 491,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "marketFees",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint32,t_struct(FeeStructure)468_storage)"
      },
      {
        "astId": 495,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "marketPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_bool)"
      },
      {
        "astId": 497,
        "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
        "label": "marketCount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Position)428_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct PerpEngine.Position))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Position)428_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_struct(FeeStructure)468_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct PerpEngine.FeeStructure)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeStructure)468_storage"
      },
      "t_mapping(t_uint32,t_struct(Market)459_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct PerpEngine.Market)",
        "numberOfBytes": "32",
        "value": "t_struct(Market)459_storage"
      },
      "t_mapping(t_uint32,t_struct(Position)428_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct PerpEngine.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)428_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(FeeStructure)468_storage": {
        "encoding": "inplace",
        "label": "struct PerpEngine.FeeStructure",
        "members": [
          {
            "astId": 461,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "makerFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 463,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "takerFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 465,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "liquidationFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 467,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "protocolShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Market)459_storage": {
        "encoding": "inplace",
        "label": "struct PerpEngine.Market",
        "members": [
          {
            "astId": 430,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 432,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "oracle",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 434,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxLeverage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 436,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "liquidationThreshold",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 438,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "fee",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 440,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "openInterestLong",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 442,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "openInterestShort",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 444,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "cumulativeFunding",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 446,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "lastFundingTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 448,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "fundingInterval",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 450,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxFundingRate",
            "offset": 0,
            "slot": "10",
            "type": "t_int256"
          },
          {
            "astId": 452,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxPositionSize",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 454,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "maxOpenInterest",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 456,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "minInitialMargin",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 458,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "isActive",
            "offset": 0,
            "slot": "14",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(Position)428_storage": {
        "encoding": "inplace",
        "label": "struct PerpEngine.Position",
        "members": [
          {
            "astId": 411,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "isOpen",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 413,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "size",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 415,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "margin",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 417,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "entryPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 419,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "lastCumulativeFunding",
            "offset": 0,
            "slot": "4",
            "type": "t_int256"
          },
          {
            "astId": 421,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "isLong",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 423,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "leverage",
            "offset": 1,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 425,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "marketIndex",
            "offset": 5,
            "slot": "5",
            "type": "t_uint32"
          },
          {
            "astId": 427,
            "contract": "contracts/perps/PerpEngine.sol:PerpEngine",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}