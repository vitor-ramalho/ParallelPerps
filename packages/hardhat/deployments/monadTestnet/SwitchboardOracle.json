{
  "address": "0x043FfBC09C1fae6cBfe207039dE14D97EaDffafF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "feedAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "PriceFeedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "StalePriceThresholdUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "feedDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "priceFeeds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "feedAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "setStalePriceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stalePriceThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb40467d9da01c0ac73faaecca2d245f0e32d29675184960f2cecd5a9216adae",
  "receipt": {
    "to": null,
    "from": "0x5E729a4F664abf7045466f12039a513DE9572E17",
    "contractAddress": "0x043FfBC09C1fae6cBfe207039dE14D97EaDffafF",
    "transactionIndex": 6,
    "gasUsed": "489471",
    "logsBloom": "0x
    "blockHash": "0xaa849b30307edc563cfd71487f711fde36148f3dd24cf2ff119001451c4069bf",
    "transactionHash": "0xbb40467d9da01c0ac73faaecca2d245f0e32d29675184960f2cecd5a9216adae",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 6192447,
        "transactionHash": "0xbb40467d9da01c0ac73faaecca2d245f0e32d29675184960f2cecd5a9216adae",
        "address": "0x043FfBC09C1fae6cBfe207039dE14D97EaDffafF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e729a4f664abf7045466f12039a513de9572e17"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xaa849b30307edc563cfd71487f711fde36148f3dd24cf2ff119001451c4069bf"
      }
    ],
    "blockNumber": 6192447,
    "cumulativeGasUsed": "1283094",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "978c64aafe02294d882239593c17f2dd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"PriceFeedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"StalePriceThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"feedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketId\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"feedAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"setStalePriceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stalePriceThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract that integrates with Switchboard's data feeds for price oracle functionality\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"getPrice(bytes32)\":{\"details\":\"Gets the latest price from Switchboard for a specific market\",\"params\":{\"marketId\":\"The ID of the market\"},\"returns\":{\"price\":\"The latest price (normalized to 8 decimals)\",\"timestamp\":\"The timestamp of the latest update\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setPriceFeed(bytes32,address,uint8)\":{\"details\":\"Sets a Switchboard price feed for a specific market\",\"params\":{\"decimals\":\"The number of decimals used in the feed\",\"feedAddress\":\"The address of the Switchboard feed\",\"marketId\":\"The ID of the market\"}},\"setStalePriceThreshold(uint256)\":{\"details\":\"Updates the stale price threshold\",\"params\":{\"newThreshold\":\"New threshold in seconds\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SwitchboardOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/perps/SwitchboardOracle.sol\":\"SwitchboardOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@switchboard-xyz/on-demand-solidity/ISwitchboard.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {IAggregatorModule} from \\\"./interfaces/IAggregatorModule.sol\\\";\\nimport {IOracleModule} from \\\"./interfaces/IOracleModule.sol\\\";\\nimport {IRandomnessModule} from \\\"./interfaces/IRandomnessModule.sol\\\";\\nimport {ISwitchboardModule} from \\\"./interfaces/ISwitchboardModule.sol\\\";\\nimport {IQueueModule} from \\\"./interfaces/IQueueModule.sol\\\";\\n\\ninterface ISwitchboard is\\n    IAggregatorModule,\\n    IOracleModule,\\n    IRandomnessModule,\\n    ISwitchboardModule,\\n    IQueueModule\\n{}\\n\",\"keccak256\":\"0x917c1c895984e531a6941f84397abe8282bd43483491644886e208afe179a677\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/Structs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\ncontract Structs {\\n    /**\\n     * An update to a feed\\n     * @param oracleId The publisher of the update\\n     * @param result The result of the update\\n     * @param timestamp The timestamp of the update\\n     */\\n    struct Update {\\n        bytes32 oracleId;\\n        int128 result;\\n        uint256 timestamp;\\n    }\\n\\n    /**\\n     * The current result for a feed\\n     * @param result The result of the feed\\n     * @param minTimestamp The minimum timestamp of the feed\\n     * @param maxTimestamp The maximum timestamp of the feed\\n     * @param minResult The minimum result of the feed\\n     * @param maxResult The maximum result of the feed\\n     * @param stdev The standard deviation of the feed\\n     * @param range The range of the feed\\n     * @param mean The mean of the feed\\n     */\\n    struct CurrentResult {\\n        int128 result;\\n        uint256 minTimestamp;\\n        uint256 maxTimestamp;\\n        int128 minResult;\\n        int128 maxResult;\\n        int128 stdev;\\n        int128 range;\\n        int128 mean;\\n    }\\n\\n    /**\\n     * Results for a feed\\n     * @param idx The index of the feed\\n     * @param updates The updates for the feed\\n     */\\n    struct Results {\\n        uint256 idx;\\n        Update[] updates;\\n    }\\n\\n    /**\\n     * An abstraction over feed allowing for UI to display the feed in a more human readable way and reconfiguration of sources.\\n     * Reading from this struct should be atomic (same tx as the write).\\n     * @param aggregatorId The aggregator id\\n     * @param authority The authority of the feed\\n     * @param name The name of the feed\\n     * @param queueId The queue id associated with the feed\\n     * @param toleratedDelta The maximum blocks staleness\\n     * @param cid The content id (IPFS cid for example) for the feed\\n     * @param feedHash The feed associated with the aggregator\\n     * @param createdAt The time the feed was created\\n     * @param maxVariance The maximum variance allowed for a feed result\\n     * @param minResponses The minimum number of responses required for a valid feed result\\n     * @param minSamples The minimum number of samples to take for a feed result\\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\\n     */\\n    struct Aggregator {\\n        bytes32 aggregatorId;\\n        address authority;\\n        string name;\\n        bytes32 queueId;\\n        uint256 toleratedDelta;\\n        bytes32 cid;\\n        bytes32 feedHash;\\n        uint256 createdAt;\\n        uint64 maxVariance;\\n        uint32 minResponses;\\n        uint8 minSamples;\\n        uint256 maxStaleness;\\n    }\\n\\n    /**\\n     * Queue / Switchboard Subnet\\n     * @param queueId The queue id\\n     * @param authority The authority of the queue\\n     * @param name The name of the queue\\n     * @param fee The fee required to submit an update to the queue\\n     * @param feeRecipient The recipient of the fee (OPTIONAL - if unset the oracle is the recipient)\\n     * @param minAttestations size * (1 / minAttestations) + 1 is the minimum number of oracles required to attest to a registration\\n     * @param toleratedTimestampDelta The default maximum staleness for a valid feed result\\n     * @param resultsMaxSize The maximum size of the results array\\n     * @param oracleValidityLength The length of time an oracle is valid for\\n     * @param mrEnclaves The enclave measurements allowed by the queue\\n     * @param oracles The oracles associated with the queue\\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\\n     * @param lastQueueOverride The last time the queue was overridden\\n     * @param guardianQueueId The guardian queue id\\n     */\\n    struct Queue {\\n        bytes32 queueId;\\n        address authority;\\n        string name;\\n        uint256 fee;\\n        address feeRecipient;\\n        uint64 minAttestations;\\n        uint256 toleratedTimestampDelta;\\n        uint8 resultsMaxSize;\\n        uint256 oracleValidityLength;\\n        bytes32[] mrEnclaves;\\n        bytes32[] oracles;\\n        uint256 toleratedBlocksStaleness;\\n        uint256 lastQueueOverride;\\n        bytes32 guardianQueueId;\\n    }\\n\\n    /**\\n     * Oracle - A more dense version of the oracle\\n     * @param authority the oracle's enclave secp key\\n     * @param owner the owner of the oracle\\n     * @param oracleId the oracle's id (hexified pubkey from solana)\\n     * @param queueId the queue that the oracle belongs to\\n     * @param mrEnclave the oracle's enclave measurement\\n     * @param expirationTime the time the oracle expires\\n     * @param feesOwed the fees owed to the oracle\\n     */\\n    struct Oracle {\\n        address authority;\\n        address owner;\\n        bytes32 oracleId;\\n        bytes32 queueId;\\n        bytes32 mrEnclave;\\n        uint256 expirationTime;\\n        uint256 feesOwed;\\n    }\\n\\n    /**\\n     * Pending Oracle Registration\\n     * @param oracle The oracle to be registered\\n     * @param attestingOracle The oracle attesting to the registration\\n     */\\n    struct OracleAttestation {\\n        address oracleAuthority;\\n        bytes32 oracleId;\\n        bytes32 attestingOracle;\\n        uint256 timestamp;\\n        bytes32 mrEnclave;\\n    }\\n\\n    /**\\n     * Randomness - a message resolving randomness\\n     * @param randId The randomness id\\n     * @param queueId The queue id\\n     * @param createdAt The time the randomness was created\\n     * @param authority The authority of the randomness\\n     * @param rollTimestamp The timestamp of the latest roll\\n     * @param minSettlementDelay The minimum settlement delay seconds\\n     * @param result The value of the randomness (uint256)\\n     */\\n    struct Randomness {\\n        bytes32 randId;\\n        bytes32 queueId;\\n        uint256 createdAt;\\n        address authority;\\n        uint256 rollTimestamp;\\n        uint64 minSettlementDelay;\\n        RandomnessResult result;\\n    }\\n\\n    /**\\n     * Randomness Result\\n     * @param oracleId The oracle id\\n     * @param oracleAuthority The authority of the oracle that provided the randomness\\n     * @param value The value of the randomness\\n     * @param settledAt The time the randomness was settled\\n     */\\n    struct RandomnessResult {\\n        bytes32 oracleId;\\n        address oracleAuthority;\\n        uint256 value;\\n        uint256 settledAt;\\n    }\\n\\n    /**\\n     * Attestations\\n     * @param list The list of pending attestations\\n     */\\n    struct Attestations {\\n        OracleAttestation[] list;\\n    }\\n}\\n\",\"keccak256\":\"0xf4df26289c2798c0314d14305e96fc3d3043b0fb8d8ce94f398b8ddb3e8fe1f1\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IAggregatorModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Aggregators: an abstraction over feeds to allow for reconfiguration --\\ninterface IAggregatorModule {\\n    event AggregatorCreated(\\n        bytes32 indexed aggregatorId,\\n        bytes32 indexed feedId,\\n        address authority\\n    );\\n    event AggregatorConfigured(\\n        bytes32 indexed aggregatorId,\\n        string name,\\n        uint256 toleratedDelta,\\n        bytes32 cid,\\n        uint64 maxVariance,\\n        uint32 minResponses\\n    );\\n    event AggregatorAuthoritySet(\\n        bytes32 indexed aggregatorId,\\n        address indexed authority\\n    );\\n\\n    /**\\n     * Create a new aggregator\\n     * @param aggregator The aggregator to create\\n     */\\n    function createAggregator(Structs.Aggregator calldata aggregator) external;\\n\\n    /**\\n     * Set the config for an aggregator\\n     * @dev Only the authority of the aggregator can set the config\\n     * @param aggregatorId The aggregatorId to set the config for\\n     * @param name The name of the aggregator\\n     * @param toleratedDelta The maximum staleness blocks for a valid feed result (or seconds if the queue has a time feed)\\n     * @param cid The content id (IPFS cid for example) for the feed\\n     * @param feedId The feedId associated with the aggregator\\n     * @param maxVariance The maximum variance allowed for a feed result\\n     * @param minResponses The minimum number of responses required for a valid feed result\\n     * @param minSamples The minimum number of samples to take for a feed result\\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\\n     */\\n    function setAggregatorConfig(\\n        bytes32 aggregatorId,\\n        string memory name,\\n        uint256 toleratedDelta,\\n        bytes32 cid,\\n        bytes32 feedId,\\n        uint64 maxVariance,\\n        uint32 minResponses,\\n        uint8 minSamples,\\n        uint256 maxStaleness\\n    ) external;\\n\\n    /**\\n     * Set the authority for an aggregator\\n     * @dev Only the authority of the aggregator can set a new authority\\n     * @param aggregatorId The aggregatorId to set the authority for\\n     * @param authority The new authority to set for the aggregator\\n     */\\n    function setAggregatorAuthority(\\n        bytes32 aggregatorId,\\n        address authority\\n    ) external;\\n\\n    /**\\n     * The aggregator to fetch\\n     * @param aggregatorId The aggregatorId to get\\n     */\\n    function getAggregator(\\n        bytes32 aggregatorId\\n    )\\n        external\\n        view\\n        returns (Structs.Aggregator memory, Structs.Update[] memory);\\n\\n    /**\\n     * Get all aggregators\\n     */\\n    function getAllAggregators()\\n        external\\n        view\\n        returns (Structs.Aggregator[] memory, Structs.Update[][] memory);\\n\\n    /**\\n     * Get the results for a feed\\n     * @param feedId The feedId to get the results for\\n     * @return The results for the feed\\n     */\\n    function getAggregatorResults(\\n        bytes32 feedId\\n    ) external view returns (Structs.Update[] memory);\\n}\\n\",\"keccak256\":\"0x680978b88274eddf6aa7c5a210e296b3d13bac7964e63cc0da2140007ba26882\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IOracleModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Oracle: an entity that can provide updates for feeds on a queue --\\ninterface IOracleModule {\\n    /**\\n     * Get oracles associated with an address\\n     * @param queueId the queue\\n     * @param oracleAddress the address of the oracle\\n     * @return oracleAddress the oracle associated with the address\\n     */\\n    function getOracleByAddress(\\n        bytes32 queueId,\\n        address oracleAddress\\n    ) external view returns (Structs.Oracle memory);\\n\\n    /**\\n     * Get an oracle\\n     * @param queueId The queueId associated with the oracle\\n     * @param oracleId The oracleId corresponding to the oracle\\n     * @return The oracle associated with the queueId and oracleId\\n     */\\n    function getOracle(\\n        bytes32 queueId,\\n        bytes32 oracleId\\n    ) external view returns (Structs.Oracle memory);\\n\\n    /**\\n     * Get all oracles associated with a queue\\n     * @param queueId The queueId to get the oracles for\\n     * @return The oracles associated with the queue\\n     */\\n    function getAllOracles(\\n        bytes32 queueId\\n    ) external view returns (Structs.Oracle[] memory);\\n}\\n\",\"keccak256\":\"0xc958d6038bdbfd8d12661263db9bcb5788e156b743a8b3c9f8b7ea71d47217fe\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IQueueModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Queues: switchboard subnets (each with its own set of oracles) --\\ninterface IQueueModule {\\n    event QueueCreated(bytes32 queueId, address authority);\\n    event QueueConfigSet(\\n        bytes32 queueId,\\n        string name,\\n        uint256 fee,\\n        uint8 minAttestations,\\n        uint256 toleratedTimestampDelta,\\n        uint8 resultsMaxSize,\\n        uint256 oracleValidityLength,\\n        uint256 toleratedBlocksStaleness\\n    );\\n    event QueueAuthoritySet(bytes32 queueId, address authority);\\n    event QueueMrEnclaveAdded(bytes32 queueId, bytes32 mrEnclave);\\n    event QueueMrEnclaveRemoved(bytes32 queueId, bytes32 mrEnclave);\\n    event QueueOraclesOverridden(bytes32 queueId);\\n\\n    /**\\n     * Create a new queue\\n     * @param queue The queue to create\\n     * @param oracles The initial set of oracles associated with the queue\\n     */\\n    function createQueue(\\n        Structs.Queue calldata queue,\\n        Structs.Oracle[] calldata oracles\\n    ) external;\\n\\n    /**\\n     * Set the config for a queue\\n     * @dev Only the authority of the queue can set the config\\n     * @param queueId the queueId to set the config for\\n     * @param name name of the queue\\n     * @param fee fee required to submit an update to the queue\\n     * @param minAttestations minimum number of attestations required for adding an oracle the queue\\n     * @param toleratedTimestampDelta default maximum staleness blocks for a valid feed result\\n     * @param resultsMaxSize maximum size of the results array for feeds\\n     * @param oracleValidityLength length of time an oracle is valid for\\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\\n     */\\n    function setQueueConfig(\\n        bytes32 queueId,\\n        string memory name,\\n        uint256 fee,\\n        uint8 minAttestations,\\n        uint256 toleratedTimestampDelta,\\n        uint8 resultsMaxSize,\\n        uint256 oracleValidityLength,\\n        uint256 toleratedBlocksStaleness\\n    ) external;\\n\\n    /**\\n     * Set the authority for a queue\\n     * @dev Only the authority of the queue can set a new authority\\n     * @param queueId The queueId to set the authority for\\n     * @param authority The new authority to set for the queue\\n     */\\n    function setQueueAuthority(bytes32 queueId, address authority) external;\\n\\n    /**\\n     * Add an enclave measurement to a queue\\n     * @dev Only the authority of the queue can set the mrEnclave\\n     * @param queueId The queueId to set the mrEnclave for\\n     * @param mrEnclave The mrEnclave to set for the queue\\n     */\\n    function addQueueMrEnclave(bytes32 queueId, bytes32 mrEnclave) external;\\n\\n    /**\\n     * Remove an enclave measurement from a queue\\n     * @dev Only the authority of the queue can remove the mrEnclave\\n     * @param queueId The queueId to remove the mrEnclave from\\n     * @param mrEnclave The mrEnclave to remove\\n     */\\n    function removeQueueMrEnclave(bytes32 queueId, bytes32 mrEnclave) external;\\n\\n    /**\\n     * Get the mrEnclaves associated with a queue\\n     * @param queueId The queueId to get the mrEnclaves for\\n     * @return The mrEnclaves associated with the queue\\n     */\\n    function getQueueMrEnclaves(\\n        bytes32 queueId\\n    ) external view returns (bytes32[] memory);\\n\\n    /**\\n     * Set the oracle queue manually (override the oracles array)\\n     * @dev Should only be dao controlled\\n     * @param queueId The queueId to set the oracles for\\n     * @param oracles The oracles to set for the queue\\n     */\\n    function queueOverride(\\n        bytes32 queueId,\\n        bytes32[] calldata mrEnclaves,\\n        Structs.Oracle[] calldata oracles\\n    ) external;\\n\\n    /**\\n     * Get a queue\\n     * @param queueId The queueId to get\\n     */\\n    function getQueue(\\n        bytes32 queueId\\n    ) external view returns (Structs.Queue memory);\\n\\n    /**\\n     * Get all queues\\n     * @return The queues associated with the queueId\\n     */\\n    function getAllQueues() external view returns (Structs.Queue[] memory);\\n}\\n\",\"keccak256\":\"0x69d16e9924475e2d019ea5f10aa8496ab777dd749342a6d391c0b9a8296701d3\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/IRandomnessModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Randomness: enclave-sourced randomness from an oracle on a queue --\\ninterface IRandomnessModule {\\n    event RandomnessRequested(\\n        bytes32 indexed randomnessId,\\n        address indexed authority,\\n        bytes32 queueId,\\n        uint64 minSettlementDelay,\\n        bytes32 indexed oracleId\\n    );\\n\\n    event RandomnessRerolled(\\n        bytes32 indexed randomnessId,\\n        bytes32 indexed oracleId\\n    );\\n\\n    /**\\n     * Request randomness from Switchboard from an Oracle on the queue\\n     * @param randomnessId The randomness id, which must be unique, is used to identify the randomness request\\n     * @param authority The authority (contract or EOA) that is in charge of providing the randomness\\n     * @param queueId The queue id that the randomness is associated with\\n     * @param minSettlementDelay The minimum delay before the randomness can be settled\\n     */\\n    function requestRandomness(\\n        bytes32 randomnessId,\\n        address authority,\\n        bytes32 queueId,\\n        uint64 minSettlementDelay\\n    ) external;\\n\\n    /**\\n     * Request randomness from Switchboard from an Oracle on the queue\\n     * @param randomnessId The randomness id, which must be unique, is used to identify the randomness request\\n     * @param authority The authority (contract or EOA) that is in charge of providing the randomness\\n     * @param queueId The queue id that the randomness is associated with\\n     * @param minSettlementDelay The minimum delay before the randomness can be settled\\n     * @param oracleId The oracle id that must respond to the request\\n     */\\n    function requestRandomness(\\n        bytes32 randomnessId,\\n        address authority,\\n        bytes32 queueId,\\n        uint64 minSettlementDelay,\\n        bytes32 oracleId\\n    ) external;\\n\\n    /**\\n     * Reroll randomness (to reuse existing randomness objects for new randomness requests)\\n     * @dev caller must be the authority for the randomness\\n     * @param randomnessId The randomness id\\n     */\\n    function rerollRandomness(bytes32 randomnessId) external;\\n\\n    /**\\n     * Reroll randomness (to reuse existing randomness objects for new randomness requests)\\n     * @dev caller must be the authority for the randomness\\n     * @param randomnessId The randomness id\\n     * @param oracleId The oracle id to specifically reroll randomness from\\n     */\\n    function rerollRandomness(bytes32 randomnessId, bytes32 oracleId) external;\\n\\n    /**\\n     * Get randomness by id\\n     * @param randomnessId The randomness id\\n     * @return randomness The randomness object\\n     */\\n    function getRandomness(\\n        bytes32 randomnessId\\n    ) external view returns (Structs.Randomness memory);\\n}\\n\",\"keccak256\":\"0xdb92bc4ecc7a23bf47558712cb61e99208c3dc68cfe30fcab15841c9e746371f\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/interfaces/ISwitchboardModule.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport {Structs} from \\\"../structs/Structs.sol\\\";\\n\\n// -- Switchboard: the main contract for the Switchboard protocol  --\\ninterface ISwitchboardModule {\\n    event FeedUpdate(\\n        bytes32 indexed feedId,\\n        bytes32 indexed oracleId,\\n        uint256 timestamp,\\n        int128 result\\n    );\\n    event OracleAdded(\\n        bytes32 indexed queueId,\\n        bytes32 indexed oracleId,\\n        address indexed oracleAddress\\n    );\\n    event OracleRemoved(bytes32 indexed queueId, bytes32 indexed oracleId);\\n    event RandomnessSettled(\\n        bytes32 indexed randomnessId,\\n        bytes32 indexed oracleId,\\n        uint256 timestamp,\\n        uint256 result\\n    );\\n\\n    /**\\n     * Get the latest Update struct for a feed\\n     * @dev Intended to be called within the same transaction as a feed update for the most up-to-date data.\\n     * @dev Reverts if the feed does not exist\\n     * @dev Reverts if the feed does not have a valid update within queue (or aggregator's) tolerated delta\\n     * @dev Reverts if the feed does not have the minimum number of valid responses\\n     * @param feedId The identifier for the feed to get the latest update for\\n     * @return Update The latest update for the given feed\\n     */\\n    function latestUpdate(\\n        bytes32 feedId\\n    ) external view returns (Structs.Update memory);\\n\\n    /**\\n     * Calculate\\n     * @param aggregatorId The feed identifier to calculate the current result for\\n     * @return CurrentResult The current result for the given feed, a struct containing stats and the result\\n     */\\n    function findCurrentResult(\\n        bytes32 aggregatorId\\n    ) external view returns (Structs.CurrentResult memory);\\n\\n    /**\\n     * Get the fee in wei for submitting a set of updates\\n     * @param updates Encoded switchboard update(s) with signatures\\n     * @return uint256 The fee in wei for submitting the updates\\n     */\\n    function getFee(bytes[] calldata updates) external view returns (uint256);\\n\\n    /**\\n     * Update feeds with new oracle results\\n     * @dev reverts if the queue's fee is not paid\\n     * @dev reverts if the blockhash is invalid (i.e. the block is in the future)\\n     * @dev reverts if the timestamp is out of valid range (optional flow for timestamp-sequenced updates)\\n     * @param updates Encoded switchboard update(s) with signatures\\n     */\\n    function updateFeeds(bytes[] calldata updates) external payable;\\n}\\n\",\"keccak256\":\"0xf3ade458a150d41b861500f326c5ea4f3ac2f3d408961b4cb0afc2eb9ef0fe90\",\"license\":\"UNLICENSED\"},\"@switchboard-xyz/on-demand-solidity/structs/Structs.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0 <0.9.0;\\n\\ncontract Structs {\\n    /**\\n     * An update to a feed\\n     * @param oracleId The publisher of the update\\n     * @param result The result of the update\\n     * @param timestamp The timestamp of the update\\n     */\\n    struct Update {\\n        bytes32 oracleId;\\n        int128 result;\\n        uint256 timestamp;\\n    }\\n\\n    /**\\n     * The current result for a feed\\n     * @param result The result of the feed\\n     * @param minTimestamp The minimum timestamp of the feed\\n     * @param maxTimestamp The maximum timestamp of the feed\\n     * @param minResult The minimum result of the feed\\n     * @param maxResult The maximum result of the feed\\n     * @param stdev The standard deviation of the feed\\n     * @param range The range of the feed\\n     * @param mean The mean of the feed\\n     */\\n    struct CurrentResult {\\n        int128 result;\\n        uint256 minTimestamp;\\n        uint256 maxTimestamp;\\n        int128 minResult;\\n        int128 maxResult;\\n        int128 stdev;\\n        int128 range;\\n        int128 mean;\\n    }\\n\\n    /**\\n     * Results for a feed\\n     * @param idx The index of the feed\\n     * @param updates The updates for the feed\\n     */\\n    struct Results {\\n        uint256 idx;\\n        Update[] updates;\\n    }\\n\\n    /**\\n     * An abstraction over feed allowing for UI to display the feed in a more human readable way and reconfiguration of sources.\\n     * Reading from this struct should be atomic (same tx as the write).\\n     * @param aggregatorId The aggregator id\\n     * @param authority The authority of the feed\\n     * @param name The name of the feed\\n     * @param queueId The queue id associated with the feed\\n     * @param toleratedDelta The maximum blocks staleness\\n     * @param cid The content id (IPFS cid for example) for the feed\\n     * @param feedHash The feed associated with the aggregator\\n     * @param createdAt The time the feed was created\\n     * @param maxVariance The maximum variance allowed for a feed result\\n     * @param minResponses The minimum number of responses required for a valid feed result\\n     * @param minSamples The minimum number of samples to take for a feed result\\n     * @param maxStaleness The maximum number of seconds staleness for an update to be valid\\n     */\\n    struct Aggregator {\\n        bytes32 aggregatorId;\\n        address authority;\\n        string name;\\n        bytes32 queueId;\\n        uint256 toleratedDelta;\\n        bytes32 cid;\\n        bytes32 feedHash;\\n        uint256 createdAt;\\n        uint64 maxVariance;\\n        uint32 minResponses;\\n        uint8 minSamples;\\n        uint256 maxStaleness;\\n    }\\n\\n    /**\\n     * Queue / Switchboard Subnet\\n     * @param queueId The queue id\\n     * @param authority The authority of the queue\\n     * @param name The name of the queue\\n     * @param fee The fee required to submit an update to the queue\\n     * @param feeRecipient The recipient of the fee (OPTIONAL - if unset the oracle is the recipient)\\n     * @param minAttestations size * (1 / minAttestations) + 1 is the minimum number of oracles required to attest to a registration\\n     * @param toleratedTimestampDelta The default maximum staleness for a valid feed result\\n     * @param resultsMaxSize The maximum size of the results array\\n     * @param oracleValidityLength The length of time an oracle is valid for\\n     * @param mrEnclaves The enclave measurements allowed by the queue\\n     * @param oracles The oracles associated with the queue\\n     * @param toleratedBlocksStaleness The number of blocks a timestamp is allowed to be stale\\n     * @param lastQueueOverride The last time the queue was overridden\\n     * @param guardianQueueId The guardian queue id\\n     */\\n    struct Queue {\\n        bytes32 queueId;\\n        address authority;\\n        string name;\\n        uint256 fee;\\n        address feeRecipient;\\n        uint64 minAttestations;\\n        uint256 toleratedTimestampDelta;\\n        uint8 resultsMaxSize;\\n        uint256 oracleValidityLength;\\n        bytes32[] mrEnclaves;\\n        bytes32[] oracles;\\n        uint256 toleratedBlocksStaleness;\\n        uint256 lastQueueOverride;\\n        bytes32 guardianQueueId;\\n    }\\n\\n    /**\\n     * Oracle - A more dense version of the oracle\\n     * @param authority the oracle's enclave secp key\\n     * @param owner the owner of the oracle\\n     * @param oracleId the oracle's id (hexified pubkey from solana)\\n     * @param queueId the queue that the oracle belongs to\\n     * @param mrEnclave the oracle's enclave measurement\\n     * @param expirationTime the time the oracle expires\\n     * @param feesOwed the fees owed to the oracle\\n     */\\n    struct Oracle {\\n        address authority;\\n        address owner;\\n        bytes32 oracleId;\\n        bytes32 queueId;\\n        bytes32 mrEnclave;\\n        uint256 expirationTime;\\n        uint256 feesOwed;\\n    }\\n\\n    /**\\n     * Pending Oracle Registration\\n     * @param oracle The oracle to be registered\\n     * @param attestingOracle The oracle attesting to the registration\\n     */\\n    struct OracleAttestation {\\n        address oracleAuthority;\\n        bytes32 oracleId;\\n        bytes32 attestingOracle;\\n        uint256 timestamp;\\n        bytes32 mrEnclave;\\n    }\\n\\n    /**\\n     * Randomness - a message resolving randomness\\n     * @param randId The randomness id\\n     * @param queueId The queue id\\n     * @param createdAt The time the randomness was created\\n     * @param authority The authority of the randomness\\n     * @param rollTimestamp The timestamp of the latest roll\\n     * @param minSettlementDelay The minimum settlement delay seconds\\n     * @param result The value of the randomness (uint256)\\n     */\\n    struct Randomness {\\n        bytes32 randId;\\n        bytes32 queueId;\\n        uint256 createdAt;\\n        address authority;\\n        uint256 rollTimestamp;\\n        uint64 minSettlementDelay;\\n        RandomnessResult result;\\n    }\\n\\n    /**\\n     * Randomness Result\\n     * @param oracleId The oracle id\\n     * @param oracleAuthority The authority of the oracle that provided the randomness\\n     * @param value The value of the randomness\\n     * @param settledAt The time the randomness was settled\\n     */\\n    struct RandomnessResult {\\n        bytes32 oracleId;\\n        address oracleAuthority;\\n        uint256 value;\\n        uint256 settledAt;\\n    }\\n\\n    /**\\n     * Attestations\\n     * @param list The list of pending attestations\\n     */\\n    struct Attestations {\\n        OracleAttestation[] list;\\n    }\\n}\\n\",\"keccak256\":\"0xf4df26289c2798c0314d14305e96fc3d3043b0fb8d8ce94f398b8ddb3e8fe1f1\",\"license\":\"UNLICENSED\"},\"contracts/perps/SwitchboardOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ISwitchboard } from \\\"@switchboard-xyz/on-demand-solidity/ISwitchboard.sol\\\";\\nimport { Structs } from \\\"@switchboard-xyz/on-demand-solidity/Structs.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title SwitchboardOracle\\n * @dev Contract that integrates with Switchboard's data feeds for price oracle functionality\\n */\\ncontract SwitchboardOracle is Ownable {\\n    // Mapping from market ID to Switchboard feed address\\n    mapping(bytes32 => address) public priceFeeds;\\n\\n    // Mapping to store the decimals for each price feed\\n    mapping(bytes32 => uint8) public feedDecimals;\\n\\n    // Heartbeat threshold in seconds (time before price is considered stale)\\n    uint256 public stalePriceThreshold = 300; // 5 minutes\\n\\n    // Events\\n    event PriceFeedSet(bytes32 indexed marketId, address indexed feedAddress, uint8 decimals);\\n    event StalePriceThresholdUpdated(uint256 newThreshold);\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Sets a Switchboard price feed for a specific market\\n     * @param marketId The ID of the market\\n     * @param feedAddress The address of the Switchboard feed\\n     * @param decimals The number of decimals used in the feed\\n     */\\n    function setPriceFeed(bytes32 marketId, address feedAddress, uint8 decimals) external onlyOwner {\\n        require(feedAddress != address(0), \\\"Invalid feed address\\\");\\n        priceFeeds[marketId] = feedAddress;\\n        feedDecimals[marketId] = decimals;\\n\\n        emit PriceFeedSet(marketId, feedAddress, decimals);\\n    }\\n\\n    /**\\n     * @dev Updates the stale price threshold\\n     * @param newThreshold New threshold in seconds\\n     */\\n    function setStalePriceThreshold(uint256 newThreshold) external onlyOwner {\\n        stalePriceThreshold = newThreshold;\\n\\n        emit StalePriceThresholdUpdated(newThreshold);\\n    }\\n\\n    /**\\n     * @dev Gets the latest price from Switchboard for a specific market\\n     * @param marketId The ID of the market\\n     * @return price The latest price (normalized to 8 decimals)\\n     * @return timestamp The timestamp of the latest update\\n     */\\n    function getPrice(bytes32 marketId) external view returns (uint256 price, uint256 timestamp) {\\n        address feedAddress = priceFeeds[marketId];\\n        require(feedAddress != address(0), \\\"Feed not found\\\");\\n\\n        // Get the latest result from Switchboard feed\\n        int256 latestValue;\\n        uint256 latestTimestamp;\\n\\n        try ISwitchboardFeed(feedAddress).latestResult() returns (int256 value, uint256 updatedAt) {\\n            latestValue = value;\\n            latestTimestamp = updatedAt;\\n        } catch {\\n            revert(\\\"Failed to fetch price from Switchboard\\\");\\n        }\\n\\n        require(latestTimestamp > 0, \\\"Price not available\\\");\\n        require(block.timestamp - latestTimestamp <= stalePriceThreshold, \\\"Price is stale\\\");\\n\\n        // Switchboard prices are stored as a scaled int256 depending on the feed's decimals\\n        // We normalize to 8 decimals which is standard for price feeds in DeFi\\n        if (latestValue >= 0) {\\n            // Handle decimals conversion - standardize to 8 decimals\\n            if (feedDecimals[marketId] > 8) {\\n                price = uint256(latestValue) / (10 ** (feedDecimals[marketId] - 8));\\n            } else if (feedDecimals[marketId] < 8) {\\n                price = uint256(latestValue) * (10 ** (8 - feedDecimals[marketId]));\\n            } else {\\n                price = uint256(latestValue);\\n            }\\n\\n            return (price, latestTimestamp);\\n        } else {\\n            revert(\\\"Negative price returned\\\");\\n        }\\n    }\\n}\\n\\n/**\\n * @title ISwitchboardFeed\\n * @dev Interface for interacting with a Switchboard feed\\n */\\ninterface ISwitchboardFeed {\\n    function latestResult() external view returns (int256 value, uint256 updatedAt);\\n\\n    function latestResultWithValidity() external view returns (int256 value, uint256 updatedAt, bool validity);\\n}\\n\",\"keccak256\":\"0xfc6e2b5df413d9f3cf85c94b67c0d0127ab628ce3d59ebd4ec3bd70af7ad3271\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461008057331561006a5760008054336001600160a01b03198216811783556040519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361012c6003556106f490816100868239f35b631e4fbdf760e01b815260006004820152602490fd5b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816308cb221014610356575080631629ecc9146102765780632599af341461022857806331d98b3f146101fe5780634d54da23146101d3578063715018a6146101765780638da5cb5b1461014a578063c6c3f71e146101175763f2fde38b1461008757600080fd5b34610113576020366003190112610113576001600160a01b0382358181169391929084900361010f576100b8610372565b83156100f957505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b5090346101135760203660031901126101135735825260016020908152918190205490516001600160a01b039091168152f35b838234610172578160031936011261017257905490516001600160a01b039091168152602090f35b5080fd5b83346101d057806003193601126101d05761018f610372565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509034610113576020366003190112610113578160209360ff92358152600285522054169051908152f35b5091346101d05760203660031901126101d0575061021c90356103c5565b82519182526020820152f35b509034610113576020366003190112610113577fc1889aed38d7217b7da9544724b219b3a25c64efc413bfcfbb187aa96107348291602091359061026a610372565b8160035551908152a180f35b509034610113576060366003190112610113576024356001600160a01b038116928235929184900361010f576044359160ff8316809303610352576102b9610372565b841561031957508285526001602090815281862080546001600160a01b0319168617905560028152818620805460ff19168417905590519182527fe7c02115116419a5b4b395e78dcf1a7e0147af9d84277f1e16abb9ddf1799a7d91a380f35b6020606492519162461bcd60e51b83528201526014602482015273496e76616c69642066656564206164647265737360601b6044820152fd5b8580fd5b8490346101725781600319360112610172576020906003548152f35b6000546001600160a01b0316330361038657565b60405163118cdaa760e01b8152336004820152602490fd5b60ff16604d81116103af57600a0a90565b634e487b7160e01b600052601160045260246000fd5b906000908282526020906001825260409260018060a01b03848220541690811561068957845163351752bf60e11b8152600495939290919084908390889082905afa91828291839461062a575b5061046957845162461bcd60e51b8152808801879052602660248201527f4661696c656420746f2066657463682070726963652066726f6d2053776974636044820152651a189bd85c9960d21b6064820152608490fd5b959490929593919687156105f1578742034281116105de57600354106105aa5783851261056757808452600282528284205460ff1660088111156104fe575083526002905281205460ff908116600719019081116104eb576104ca9061039e565b9283156104d8575050049190565b634e487b7160e01b825260129052602490fd5b634e487b7160e01b825260118452602482fd5b949593949250505060088110156105605760080360ff811161054d576105239061039e565b9283810293818504149015171561053a5750509190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b5050509190565b825162461bcd60e51b8152808701839052601760248201527f4e656761746976652070726963652072657475726e65640000000000000000006044820152606490fd5b825162461bcd60e51b8152808701839052600e60248201526d5072696365206973207374616c6560901b6044820152606490fd5b634e487b7160e01b855260118752602485fd5b825162461bcd60e51b815280870183905260136024820152725072696365206e6f7420617661696c61626c6560681b6044820152606490fd5b91509250843d8611610682575b601f8101601f1916820167ffffffffffffffff81118382101761066f5786918391835281010312610172578581519101519238610412565b634e487b7160e01b845260418952602484fd5b503d610637565b845162461bcd60e51b815260048101859052600e60248201526d11995959081b9bdd08199bdd5b9960921b6044820152606490fdfea264697066735822122033165be7046f4b3b1748ecbd7caf457f2438b0c7b35db507f7d88e54c8051d5564736f6c63430008140033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816308cb221014610356575080631629ecc9146102765780632599af341461022857806331d98b3f146101fe5780634d54da23146101d3578063715018a6146101765780638da5cb5b1461014a578063c6c3f71e146101175763f2fde38b1461008757600080fd5b34610113576020366003190112610113576001600160a01b0382358181169391929084900361010f576100b8610372565b83156100f957505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8480fd5b8280fd5b5090346101135760203660031901126101135735825260016020908152918190205490516001600160a01b039091168152f35b838234610172578160031936011261017257905490516001600160a01b039091168152602090f35b5080fd5b83346101d057806003193601126101d05761018f610372565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509034610113576020366003190112610113578160209360ff92358152600285522054169051908152f35b5091346101d05760203660031901126101d0575061021c90356103c5565b82519182526020820152f35b509034610113576020366003190112610113577fc1889aed38d7217b7da9544724b219b3a25c64efc413bfcfbb187aa96107348291602091359061026a610372565b8160035551908152a180f35b509034610113576060366003190112610113576024356001600160a01b038116928235929184900361010f576044359160ff8316809303610352576102b9610372565b841561031957508285526001602090815281862080546001600160a01b0319168617905560028152818620805460ff19168417905590519182527fe7c02115116419a5b4b395e78dcf1a7e0147af9d84277f1e16abb9ddf1799a7d91a380f35b6020606492519162461bcd60e51b83528201526014602482015273496e76616c69642066656564206164647265737360601b6044820152fd5b8580fd5b8490346101725781600319360112610172576020906003548152f35b6000546001600160a01b0316330361038657565b60405163118cdaa760e01b8152336004820152602490fd5b60ff16604d81116103af57600a0a90565b634e487b7160e01b600052601160045260246000fd5b906000908282526020906001825260409260018060a01b03848220541690811561068957845163351752bf60e11b8152600495939290919084908390889082905afa91828291839461062a575b5061046957845162461bcd60e51b8152808801879052602660248201527f4661696c656420746f2066657463682070726963652066726f6d2053776974636044820152651a189bd85c9960d21b6064820152608490fd5b959490929593919687156105f1578742034281116105de57600354106105aa5783851261056757808452600282528284205460ff1660088111156104fe575083526002905281205460ff908116600719019081116104eb576104ca9061039e565b9283156104d8575050049190565b634e487b7160e01b825260129052602490fd5b634e487b7160e01b825260118452602482fd5b949593949250505060088110156105605760080360ff811161054d576105239061039e565b9283810293818504149015171561053a5750509190565b634e487b7160e01b825260119052602490fd5b634e487b7160e01b835260118252602483fd5b5050509190565b825162461bcd60e51b8152808701839052601760248201527f4e656761746976652070726963652072657475726e65640000000000000000006044820152606490fd5b825162461bcd60e51b8152808701839052600e60248201526d5072696365206973207374616c6560901b6044820152606490fd5b634e487b7160e01b855260118752602485fd5b825162461bcd60e51b815280870183905260136024820152725072696365206e6f7420617661696c61626c6560681b6044820152606490fd5b91509250843d8611610682575b601f8101601f1916820167ffffffffffffffff81118382101761066f5786918391835281010312610172578581519101519238610412565b634e487b7160e01b845260418952602484fd5b503d610637565b845162461bcd60e51b815260048101859052600e60248201526d11995959081b9bdd08199bdd5b9960921b6044820152606490fdfea264697066735822122033165be7046f4b3b1748ecbd7caf457f2438b0c7b35db507f7d88e54c8051d5564736f6c63430008140033",
  "devdoc": {
    "details": "Contract that integrates with Switchboard's data feeds for price oracle functionality",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "getPrice(bytes32)": {
        "details": "Gets the latest price from Switchboard for a specific market",
        "params": {
          "marketId": "The ID of the market"
        },
        "returns": {
          "price": "The latest price (normalized to 8 decimals)",
          "timestamp": "The timestamp of the latest update"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setPriceFeed(bytes32,address,uint8)": {
        "details": "Sets a Switchboard price feed for a specific market",
        "params": {
          "decimals": "The number of decimals used in the feed",
          "feedAddress": "The address of the Switchboard feed",
          "marketId": "The ID of the market"
        }
      },
      "setStalePriceThreshold(uint256)": {
        "details": "Updates the stale price threshold",
        "params": {
          "newThreshold": "New threshold in seconds"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SwitchboardOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/perps/SwitchboardOracle.sol:SwitchboardOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2145,
        "contract": "contracts/perps/SwitchboardOracle.sol:SwitchboardOracle",
        "label": "priceFeeds",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2149,
        "contract": "contracts/perps/SwitchboardOracle.sol:SwitchboardOracle",
        "label": "feedDecimals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_uint8)"
      },
      {
        "astId": 2152,
        "contract": "contracts/perps/SwitchboardOracle.sol:SwitchboardOracle",
        "label": "stalePriceThreshold",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint8)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}