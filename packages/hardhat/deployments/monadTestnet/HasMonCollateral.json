{
  "address": "0x4e9E588a27DE851947e3848C5764cb817f02aBD3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hasMON",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralAllocated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralReleased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CollateralWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "triggeredBy",
          "type": "address"
        }
      ],
      "name": "EmergencyModeEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOrderBook",
          "type": "address"
        }
      ],
      "name": "OrderBookUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPerpEngine",
          "type": "address"
        }
      ],
      "name": "PerpEngineUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accumulatedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allocateCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allocatedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyMode",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableEmergencyMode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAvailableCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCollateralStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastAction",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getMaxAllowedAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maxAllowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentAllocated",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSystemInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCollateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalFeesAccumulated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isEmergencyMode",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "engineAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bookAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasMON",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderBook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "perpEngine",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "processFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "name": "releaseCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        }
      ],
      "name": "setFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_orderBook",
          "type": "address"
        }
      ],
      "name": "setOrderBook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_perpEngine",
          "type": "address"
        }
      ],
      "name": "setPerpEngine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "updateWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x84d1a55535bbadf22d1ce91348599a6d6b21c65538715a2e519362832bac6583",
  "receipt": {
    "to": null,
    "from": "0x5E729a4F664abf7045466f12039a513DE9572E17",
    "contractAddress": "0x4e9E588a27DE851947e3848C5764cb817f02aBD3",
    "transactionIndex": 49,
    "gasUsed": "1192795",
    "logsBloom": "0x
    "blockHash": "0x19a499a44b9a4dd02cc301b5610b0585e5c44ae2c58dabd1b750a786ae688c29",
    "transactionHash": "0x84d1a55535bbadf22d1ce91348599a6d6b21c65538715a2e519362832bac6583",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 5760424,
        "transactionHash": "0x84d1a55535bbadf22d1ce91348599a6d6b21c65538715a2e519362832bac6583",
        "address": "0x4e9E588a27DE851947e3848C5764cb817f02aBD3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005e729a4f664abf7045466f12039a513de9572e17"
        ],
        "data": "0x",
        "logIndex": 136,
        "blockHash": "0x19a499a44b9a4dd02cc301b5610b0585e5c44ae2c58dabd1b750a786ae688c29"
      }
    ],
    "blockNumber": 5760424,
    "cumulativeGasUsed": "10479788",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE887582468591CB9dE71ab01acA4101C756A6442",
    "0x989d0faccf313a0d78b0d7fcb0216075eded94e7"
  ],
  "numDeployments": 1,
  "solcInputHash": "b16643e7df8b48fc292aff9038462ff9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hasMON\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralAllocated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollateralWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"triggeredBy\",\"type\":\"address\"}],\"name\":\"EmergencyModeEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOrderBook\",\"type\":\"address\"}],\"name\":\"OrderBookUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPerpEngine\",\"type\":\"address\"}],\"name\":\"PerpEngineUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allocatedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableEmergencyMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAvailableCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateralStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAction\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getMaxAllowedAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxAllowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAllocated\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSystemInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCollateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalFeesAccumulated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEmergencyMode\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"engineAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bookAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMON\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpEngine\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"name\":\"releaseCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_orderBook\",\"type\":\"address\"}],\"name\":\"setOrderBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_perpEngine\",\"type\":\"address\"}],\"name\":\"setPerpEngine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for managing hasMON as collateral for perpetual trading\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"allocateCollateral(address,uint256)\":{\"details\":\"Allocates collateral for a trading position (called by OrderBook/PerpEngine)\",\"params\":{\"amount\":\"The amount to allocate\",\"user\":\"The user's address\"}},\"depositCollateral(uint256)\":{\"details\":\"Allows users to deposit hasMON as collateral\",\"params\":{\"amount\":\"The amount of hasMON to deposit\"}},\"getAvailableCollateral(address)\":{\"details\":\"Get user's available collateral\",\"params\":{\"user\":\"The user's address\"},\"returns\":{\"_0\":\"The amount of available collateral\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processFee(uint256)\":{\"details\":\"Processes trading fees (called by PerpEngine)\",\"params\":{\"amount\":\"Fee amount to process\"}},\"releaseCollateral(address,uint256,int256)\":{\"details\":\"Releases collateral back to user after position closure (called by PerpEngine)\",\"params\":{\"amount\":\"The amount to release\",\"pnl\":\"The profit/loss from the position (can be negative)\",\"user\":\"The user's address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawCollateral(uint256)\":{\"details\":\"Allows users to withdraw available hasMON collateral\",\"params\":{\"amount\":\"The amount of hasMON to withdraw\"}},\"withdrawFees()\":{\"details\":\"Withdraws accumulated fees to fee recipient (called by owner)\"}},\"title\":\"HasMonCollateral\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/perps/HasMonCollateral.sol\":\"HasMonCollateral\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/perps/HasMonCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title HasMonCollateral\\n * @dev Contract for managing hasMON as collateral for perpetual trading\\n */\\ncontract HasMonCollateral is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 private constant MAX_ALLOCATION_PERCENTAGE = 9000; // 90% in basis points\\n    uint256 private constant BASIS_POINTS = 10000;\\n\\n    bool public emergencyMode;\\n    mapping(address => bool) public whitelist;\\n\\n    // State variables\\n    IERC20 public hasMON;\\n    address public perpEngine;\\n    address public orderBook;\\n\\n    // Mapping of user balances\\n    mapping(address => uint256) public userCollateral;\\n    uint256 public totalCollateral;\\n\\n    // Fee accumulation\\n    uint256 public accumulatedFees;\\n    address public feeRecipient;\\n\\n    mapping(address => uint256) public allocatedCollateral; // Track allocated collateral\\n    mapping(address => uint256) public lastUpdateTime;\\n\\n    // Events\\n    event CollateralDeposited(address indexed user, uint256 amount);\\n    event CollateralWithdrawn(address indexed user, uint256 amount);\\n    event CollateralAllocated(address indexed user, uint256 amount);\\n    event CollateralReleased(address indexed user, uint256 amount);\\n    event FeesWithdrawn(uint256 amount);\\n    event EmergencyModeEnabled(address indexed triggeredBy);\\n    event WhitelistUpdated(address indexed user, bool status);\\n    event PerpEngineUpdated(address indexed newPerpEngine);\\n    event OrderBookUpdated(address indexed newOrderBook);\\n\\n    // Modifiers\\n    modifier onlyPerpEngine() {\\n        require(msg.sender == perpEngine, \\\"Only PerpEngine can call\\\");\\n        _;\\n    }\\n\\n    modifier onlyOrderBook() {\\n        require(msg.sender == orderBook, \\\"Only OrderBook can call\\\");\\n        _;\\n    }\\n\\n    constructor(address _hasMON, address _feeRecipient) Ownable(msg.sender) {\\n        hasMON = IERC20(_hasMON);\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    // Admin functions\\n\\n    function enableEmergencyMode() external onlyOwner {\\n        emergencyMode = true;\\n        emit EmergencyModeEnabled(msg.sender);\\n    }\\n\\n    function updateWhitelist(address user, bool status) external onlyOwner {\\n        whitelist[user] = status;\\n        emit WhitelistUpdated(user, status);\\n    }\\n\\n    function setPerpEngine(address _perpEngine) external onlyOwner {\\n        require(_perpEngine != address(0), \\\"Invalid PerpEngine address\\\");\\n        require(_perpEngine != perpEngine, \\\"Same address\\\");\\n        perpEngine = _perpEngine;\\n        emit PerpEngineUpdated(_perpEngine);\\n    }\\n\\n    function setOrderBook(address _orderBook) external onlyOwner {\\n        orderBook = _orderBook;\\n    }\\n\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    /**\\n     * @dev Allows users to deposit hasMON as collateral\\n     * @param amount The amount of hasMON to deposit\\n     */\\n    function depositCollateral(uint256 amount) external nonReentrant {\\n        require(!emergencyMode, \\\"System is in emergency mode\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n\\n        // Check allowance before transfer\\n        require(hasMON.allowance(msg.sender, address(this)) >= amount, \\\"Insufficient allowance\\\");\\n\\n        // Update last action time\\n        lastUpdateTime[msg.sender] = block.timestamp;\\n\\n        // Transfer hasMON from user to this contract\\n        hasMON.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Update user's collateral balance\\n        userCollateral[msg.sender] += amount;\\n        totalCollateral += amount;\\n\\n        emit CollateralDeposited(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Allows users to withdraw available hasMON collateral\\n     * @param amount The amount of hasMON to withdraw\\n     */\\n    function withdrawCollateral(uint256 amount) external nonReentrant {\\n        require(!emergencyMode || whitelist[msg.sender], \\\"Withdrawals restricted\\\");\\n        require(amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(userCollateral[msg.sender] >= amount, \\\"Insufficient collateral\\\");\\n\\n        // Check available collateral (not allocated)\\n        uint256 available = userCollateral[msg.sender] - allocatedCollateral[msg.sender];\\n        require(available >= amount, \\\"Collateral is allocated\\\");\\n\\n        // Update balances\\n        userCollateral[msg.sender] -= amount;\\n        totalCollateral -= amount;\\n        lastUpdateTime[msg.sender] = block.timestamp;\\n\\n        // Transfer hasMON to user\\n        hasMON.safeTransfer(msg.sender, amount);\\n\\n        emit CollateralWithdrawn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev Allocates collateral for a trading position (called by OrderBook/PerpEngine)\\n     * @param user The user's address\\n     * @param amount The amount to allocate\\n     */\\n    function allocateCollateral(address user, uint256 amount) external nonReentrant onlyPerpEngine {\\n        require(userCollateral[user] >= amount, \\\"Insufficient collateral\\\");\\n\\n        // Check allocation limits\\n        uint256 totalAllocated = allocatedCollateral[user] + amount;\\n        uint256 maxAllowedAllocation = (userCollateral[user] * MAX_ALLOCATION_PERCENTAGE) / BASIS_POINTS;\\n        require(totalAllocated <= maxAllowedAllocation, \\\"Exceeds max allocation\\\");\\n\\n        // Update user's allocated collateral\\n        allocatedCollateral[user] += amount;\\n        userCollateral[user] -= amount;\\n\\n        emit CollateralAllocated(user, amount);\\n    }\\n\\n    /**\\n     * @dev Releases collateral back to user after position closure (called by PerpEngine)\\n     * @param user The user's address\\n     * @param amount The amount to release\\n     * @param pnl The profit/loss from the position (can be negative)\\n     */\\n    function releaseCollateral(address user, uint256 amount, int256 pnl) external nonReentrant onlyPerpEngine {\\n        uint256 releaseAmount = amount;\\n\\n        // Handle profits (positive PnL)\\n        if (pnl > 0) {\\n            releaseAmount += uint256(pnl);\\n        }\\n        // Handle losses (negative PnL)\\n        else if (pnl < 0) {\\n            uint256 loss = uint256(-pnl);\\n            if (loss >= amount) {\\n                releaseAmount = 0;\\n            } else {\\n                releaseAmount -= loss;\\n            }\\n        }\\n\\n        // Update user's collateral\\n        userCollateral[user] += releaseAmount;\\n\\n        emit CollateralReleased(user, releaseAmount);\\n    }\\n\\n    /**\\n     * @dev Processes trading fees (called by PerpEngine)\\n     * @param amount Fee amount to process\\n     */\\n    function processFee(uint256 amount) external nonReentrant onlyPerpEngine {\\n        require(amount > 0, \\\"Fee must be greater than 0\\\");\\n\\n        // Accumulate fees\\n        accumulatedFees += amount;\\n    }\\n\\n    /**\\n     * @dev Withdraws accumulated fees to fee recipient (called by owner)\\n     */\\n    function withdrawFees() external onlyOwner {\\n        require(accumulatedFees > 0, \\\"No fees to withdraw\\\");\\n\\n        uint256 amount = accumulatedFees;\\n        accumulatedFees = 0;\\n\\n        // Transfer fees to recipient\\n        hasMON.safeTransfer(feeRecipient, amount);\\n\\n        emit FeesWithdrawn(amount);\\n    }\\n\\n    /**\\n     * @dev Get user's available collateral\\n     * @param user The user's address\\n     * @return The amount of available collateral\\n     */\\n    function getAvailableCollateral(address user) external view returns (uint256) {\\n        return userCollateral[user];\\n    }\\n\\n    function getCollateralStatus(\\n        address user\\n    ) external view returns (uint256 total, uint256 allocated, uint256 available, uint256 lastAction) {\\n        total = userCollateral[user];\\n        allocated = allocatedCollateral[user];\\n        available = total - allocated;\\n        lastAction = lastUpdateTime[user];\\n    }\\n\\n    function getSystemInfo()\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralAmount,\\n            uint256 totalFeesAccumulated,\\n            bool isEmergencyMode,\\n            address engineAddress,\\n            address bookAddress\\n        )\\n    {\\n        return (totalCollateral, accumulatedFees, emergencyMode, perpEngine, orderBook);\\n    }\\n\\n    function getMaxAllowedAllocation(address user) public view returns (uint256 maxAllowed, uint256 currentAllocated) {\\n        maxAllowed = (userCollateral[user] * MAX_ALLOCATION_PERCENTAGE) / BASIS_POINTS;\\n        currentAllocated = allocatedCollateral[user];\\n    }\\n}\\n\",\"keccak256\":\"0xb059a72781ed7a8c3093408beacd996995e476fe718e65c9b067da78b2e77d2d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060408181526004918236101561001657600080fd5b600092833560e01c9182630905f56014610f1f575081630d392cd914610ea15781632ce9aead14610e69578163373fe98014610d335781634690484014610d0a578163476343ee14610c6157816348ba4d2b14610c385781634ac8eb5f14610c19578163587f5ed714610bfa5781636112fe2e14610a765781636cb69f4214610a24578163715018a6146109ca5781637411afbd14610954578163768e48a11461092c578163776af5ba146109035781638da5cb5b146108db5781639a1598c8146108965781639b19251a14610858578163a8dd9b22146107f0578163b619daf714610702578163b7ce8547146105ab578163bad4a01f146103b2578163bb69bc711461038a578163be4474b4146102f7578163c0ade15a146102bf578163c5b1c7d014610271578163e74b981b14610229578163f2fde38b1461019e575063f69f1e4a1461016457600080fd5b3461019a57602036600319011261019a5760209181906001600160a01b0361018a610f40565b1681526007845220549051908152f35b5080fd5b905034610225576020366003190112610225576101b9610f40565b906101c2610f5b565b6001600160a01b0391821692831561020f57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b833461026e57602036600319011261026e57610243610f40565b61024b610f5b565b60018060a01b03166bffffffffffffffffffffffff60a01b600a541617600a5580f35b80fd5b833461026e578060031936011261026e5761028a610f5b565b600160ff196002541617600255337fc0a1c7e9f05b4d536e1ff8606bae9b847cdb43ef4a9b2d7a503a88cee08dccdb8280a280f35b50503461019a57602036600319011261019a5760209181906001600160a01b036102e7610f40565b168152600b845220549051908152f35b90503461022557602036600319011261022557803591610315611165565b61032a60018060a01b03600554163314611233565b8215610347578361033d8460095461100b565b6009556001805580f35b906020606492519162461bcd60e51b8352820152601a60248201527f466565206d7573742062652067726561746572207468616e20300000000000006044820152fd5b50503461019a57602036600319011261019a5760209181906001600160a01b0361018a610f40565b83833461019a57602080600319360112610225578335916103d1611165565b60ff60025416610568576103e6831515610f87565b84548151636eb1769f60e11b815233818801523060248201526001600160a01b039184908290604490829086165afa90811561055e579085918791610529575b50106104ed57338552600c835242828620558554168151906323b872dd60e01b848301523360248301523060448301528460648301526064825260a0820182811067ffffffffffffffff8211176104da5783527fd7243f6f8212d5188fd054141cf6ea89cfc0d91facb8c3afe2f88a13584801429392916104a69161102e565b338552600782528085206104bb85825461100b565b90556104c98460085461100b565b600855519283523392a26001805580f35b634e487b7160e01b875260418852602487fd5b815162461bcd60e51b81528087018490526016602482015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606490fd5b809250858092503d8311610557575b6105428183610fd3565b810103126105535784905188610426565b8580fd5b503d610538565b83513d88823e3d90fd5b5162461bcd60e51b815280850191909152601b60248201527f53797374656d20697320696e20656d657267656e6379206d6f646500000000006044820152606490fd5b905034610225576060366003190112610225576105c6610f40565b9060243590604435906105d7611165565b6005546001600160a01b0393906105f19085163314611233565b80918784136000146106555750509161062e7f15192ee5c95e01de0681c61d6cbfa4b8d1e4c160294017332eb7d6e5c4ea38b7949260209461100b565b915b16938486526007835280862061064783825461100b565b905551908152a26001805580f35b8784929396941261068f575b505050916020917f15192ee5c95e01de0681c61d6cbfa4b8d1e4c160294017332eb7d6e5c4ea38b793610630565b9294509091600160ff1b82146106ef57507f15192ee5c95e01de0681c61d6cbfa4b8d1e4c160294017332eb7d6e5c4ea38b7936020939092909187038181106106e057505085915b91938193610661565b6106e9916111d4565b916106d7565b634e487b7160e01b875260119052602486fd5b8391503461019a57602036600319011261019a5761071e610f40565b610726610f5b565b6001600160a01b039081169182156107ad57600554918216831461077b57506001600160a01b03191681176005557f8a64d92abd11c5d3e10159842d11181b5407bfb5f34b58d52d7d7ddcaab64f178280a280f35b606490602086519162461bcd60e51b8352820152600c60248201526b53616d65206164647265737360a01b6044820152fd5b606490602086519162461bcd60e51b8352820152601a60248201527f496e76616c69642050657270456e67696e6520616464726573730000000000006044820152fd5b50503461019a57602036600319011261019a576080916001600160a01b03610816610f40565b1680825260076020528282205492600b60205280808420549361083985876111d4565b938152600c602052205492815194855260208501528301526060820152f35b50503461019a57602036600319011261019a5760209160ff9082906001600160a01b03610883610f40565b1681526003855220541690519015158152f35b833461026e57602036600319011261026e576108b0610f40565b6108b8610f5b565b60018060a01b03166bffffffffffffffffffffffff60a01b600654161760065580f35b50503461019a578160031936011261019a57905490516001600160a01b039091168152602090f35b50503461019a578160031936011261019a5760065490516001600160a01b039091168152602090f35b9050346102255782600319360112610225575490516001600160a01b03909116815260209150f35b9050823461026e57602036600319011261026e576001600160a01b03610978610f40565b1680825260076020528382205492612328938481029481860414901517156109b757509083918152600b60205220546127108351920482526020820152f35b634e487b7160e01b835260119052602482fd5b833461026e578060031936011261026e576109e3610f5b565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50503461019a578160031936011261019a5760a090600854906009549060ff6002541690600180861b039182600554169260065416938251958652602086015215159084015260608301526080820152f35b919050346102255760209081600319360112610bf657823592610a97611165565b60ff60025416158015610be2575b15610ba857610ab5841515610f87565b33855260078352610acb84838720541015611188565b3385526007835283610ae883872054600b865284882054906111d4565b10610b675790610b59847fc30fcfbcaac9e0deffa719714eaa82396ff506a0d0d0eebe170830177288715d949333885260078552838820610b2a8382546111d4565b9055610b38826008546111d4565b60085533808952600c865284892042905590546001600160a01b03166111e1565b519283523392a26001805580f35b82606492519162461bcd60e51b8352820152601760248201527f436f6c6c61746572616c20697320616c6c6f63617465640000000000000000006044820152fd5b82606492519162461bcd60e51b8352820152601660248201527515da5d1a191c985dd85b1cc81c995cdd1c9a58dd195960521b6044820152fd5b503385526003835260ff8286205416610aa5565b8380fd5b50503461019a578160031936011261019a576020906009549051908152f35b50503461019a578160031936011261019a576020906008549051908152f35b50503461019a578160031936011261019a5760055490516001600160a01b039091168152602090f35b91905034610225578260031936011261022557610c7c610f5b565b600954918215610cd25791602091610cca827f9800e6f57aeb4360eaa72295a820a4293e1e66fbfcabcd8874ae141304a76deb958760095560018060a01b038091541690600a5416906111e1565b51908152a180f35b6020606492519162461bcd60e51b835282015260136024820152724e6f206665657320746f20776974686472617760681b6044820152fd5b50503461019a578160031936011261019a57600a5490516001600160a01b039091168152602090f35b905034610225578160031936011261022557610d4d610f40565b60243590610d59611165565b6005546001600160a01b039190610d739083163314611233565b169283855260209260078452610d8e83838820541015611188565b848652600b8452610da2838388205461100b565b858752600785528287205461232890818102918183041490151715610e5657612710900410610e1c5750907fa056ffc766bf8d666c3c356852abe2066c4435df7f85008d7e7c931f68e420cb9291848652600b8352808620610e0583825461100b565b9055848652600783528086206106478382546111d4565b83606492519162461bcd60e51b8352820152601660248201527522bc31b2b2b2399036b0bc1030b63637b1b0ba34b7b760511b6044820152fd5b634e487b7160e01b885260118352602488fd5b50503461019a57602036600319011261019a5760209181906001600160a01b03610e91610f40565b168152600c845220549051908152f35b50503461019a578060031936011261019a57610ebb610f40565b60243590811515809203610bf6577ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d91602091610ef6610f5b565b6001600160a01b031680865260038352848620805460ff191660ff84161790559351908152a280f35b84903461019a578160031936011261019a5760209060ff6002541615158152f35b600435906001600160a01b0382168203610f5657565b600080fd5b6000546001600160a01b03163303610f6f57565b60405163118cdaa760e01b8152336004820152602490fd5b15610f8e57565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b90601f8019910116810190811067ffffffffffffffff821117610ff557604052565b634e487b7160e01b600052604160045260246000fd5b9190820180921161101857565b634e487b7160e01b600052601160045260246000fd5b60018060a01b031690600080826020829451910182865af13d156110f6573d9067ffffffffffffffff82116110e2579061108a916040519161107a6020601f19601f8401160184610fd3565b82523d84602084013e5b84611102565b9081519182151592836110ba575b5050506110a25750565b60249060405190635274afe760e01b82526004820152fd5b81929350906020918101031261019a57602001519081159182150361026e5750388080611098565b634e487b7160e01b83526041600452602483fd5b61108a90606090611084565b90611129575080511561111757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061115c575b61113a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b15611132565b600260015414611176576002600155565b604051633ee5aeb560e01b8152600490fd5b1561118f57565b60405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420636f6c6c61746572616c0000000000000000006044820152606490fd5b9190820391821161101857565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017610ff5576112319260405261102e565b565b1561123a57565b60405162461bcd60e51b815260206004820152601860248201527f4f6e6c792050657270456e67696e652063616e2063616c6c00000000000000006044820152606490fdfea2646970667358221220cd2eb3ff4797a047d79ffa1147fd98957585174a3aba518c2604177e26a44b6b64736f6c63430008140033",
  "devdoc": {
    "details": "Contract for managing hasMON as collateral for perpetual trading",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allocateCollateral(address,uint256)": {
        "details": "Allocates collateral for a trading position (called by OrderBook/PerpEngine)",
        "params": {
          "amount": "The amount to allocate",
          "user": "The user's address"
        }
      },
      "depositCollateral(uint256)": {
        "details": "Allows users to deposit hasMON as collateral",
        "params": {
          "amount": "The amount of hasMON to deposit"
        }
      },
      "getAvailableCollateral(address)": {
        "details": "Get user's available collateral",
        "params": {
          "user": "The user's address"
        },
        "returns": {
          "_0": "The amount of available collateral"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processFee(uint256)": {
        "details": "Processes trading fees (called by PerpEngine)",
        "params": {
          "amount": "Fee amount to process"
        }
      },
      "releaseCollateral(address,uint256,int256)": {
        "details": "Releases collateral back to user after position closure (called by PerpEngine)",
        "params": {
          "amount": "The amount to release",
          "pnl": "The profit/loss from the position (can be negative)",
          "user": "The user's address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawCollateral(uint256)": {
        "details": "Allows users to withdraw available hasMON collateral",
        "params": {
          "amount": "The amount of hasMON to withdraw"
        }
      },
      "withdrawFees()": {
        "details": "Withdraws accumulated fees to fee recipient (called by owner)"
      }
    },
    "title": "HasMonCollateral",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1686,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1767,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "emergencyMode",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1771,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "whitelist",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1774,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "hasMON",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)923"
      },
      {
        "astId": 1776,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "perpEngine",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1778,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "orderBook",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1782,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "userCollateral",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1784,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "totalCollateral",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1786,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "accumulatedFees",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1788,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 1792,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "allocatedCollateral",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1796,
        "contract": "contracts/perps/HasMonCollateral.sol:HasMonCollateral",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)923": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}